#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from pyInterface import DataMiningInterface
from pyInterface.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('   getDrivingFeaturesBinary(string problem,  behavioral,  non_behavioral,  all_archs, double supp, double conf, double lift)')
    print('   getMarginalDrivingFeaturesBinary(string problem,  behavioral,  non_behavioral,  all_archs, string featureExpression, string logical_connective, double supp, double conf, double lift)')
    print('   getDrivingFeaturesEpsilonMOEABinary(string problem,  behavioral,  non_behavioral,  all_archs)')
    print('   getDrivingFeaturesDiscrete(string problem,  behavioral,  non_behavioral,  all_archs, double supp, double conf, double lift)')
    print('   getMarginalDrivingFeaturesDiscrete(string problem,  behavioral,  non_behavioral,  all_archs, string featureExpression, string logical_connective, double supp, double conf, double lift)')
    print('   getDrivingFeaturesEpsilonMOEADiscrete(string problem,  behavioral,  non_behavioral,  all_archs)')
    print('   getDrivingFeaturesContinuous(string problem,  behavioral,  non_behavioral,  all_archs, double supp, double conf, double lift)')
    print('   getDrivingFeaturesEpsilonMOEAContinuous(string problem,  behavioral,  non_behavioral,  all_archs)')
    print('   generalizeFeatureBinary(string problem, string session,  behavioral,  non_behavioral,  all_archs, string rootfeatureExpression, string nodeFeatureExpression)')
    print('   getDrivingFeaturesWithGeneralizationBinary(string problem,  behavioral,  non_behavioral,  all_archs)')
    print('  string simplifyFeatureExpression(string problem, string expression)')
    print('  int stopSearch(string session)')
    print('   computeComplexityOfFeatures(string problem,  expressions)')
    print('   computeAlgebraicTypicality(string problem, BinaryInputArchitecture arch, string feature)')
    print('  double computeComplexity(string problem, string expression)')
    print('  string convertToCNF(string expression)')
    print('  string convertToDNF(string expression)')
    print('  bool setAssigningProblemEntities(string problem, AssigningProblemEntities entities)')
    print('  bool setAssigningProblemGeneralizedConcepts(string problem, AssigningProblemEntities generalizedConcepts)')
    print('  AssigningProblemEntities getAssigningProblemEntities(string problem)')
    print('  FlattenedConceptHierarchy getAssigningProblemConceptHierarchy(string problem, AssigningProblemEntities params)')
    print('   computeAlgebraicTypicalityWithStringInput(string problem, string architecture, string feature)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = DataMiningInterface.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'getDrivingFeaturesBinary':
    if len(args) != 7:
        print('getDrivingFeaturesBinary requires 7 args')
        sys.exit(1)
    pp.pprint(client.getDrivingFeaturesBinary(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'getMarginalDrivingFeaturesBinary':
    if len(args) != 9:
        print('getMarginalDrivingFeaturesBinary requires 9 args')
        sys.exit(1)
    pp.pprint(client.getMarginalDrivingFeaturesBinary(args[0], eval(args[1]), eval(args[2]), eval(args[3]), args[4], args[5], eval(args[6]), eval(args[7]), eval(args[8]),))

elif cmd == 'getDrivingFeaturesEpsilonMOEABinary':
    if len(args) != 4:
        print('getDrivingFeaturesEpsilonMOEABinary requires 4 args')
        sys.exit(1)
    pp.pprint(client.getDrivingFeaturesEpsilonMOEABinary(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getDrivingFeaturesDiscrete':
    if len(args) != 7:
        print('getDrivingFeaturesDiscrete requires 7 args')
        sys.exit(1)
    pp.pprint(client.getDrivingFeaturesDiscrete(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'getMarginalDrivingFeaturesDiscrete':
    if len(args) != 9:
        print('getMarginalDrivingFeaturesDiscrete requires 9 args')
        sys.exit(1)
    pp.pprint(client.getMarginalDrivingFeaturesDiscrete(args[0], eval(args[1]), eval(args[2]), eval(args[3]), args[4], args[5], eval(args[6]), eval(args[7]), eval(args[8]),))

elif cmd == 'getDrivingFeaturesEpsilonMOEADiscrete':
    if len(args) != 4:
        print('getDrivingFeaturesEpsilonMOEADiscrete requires 4 args')
        sys.exit(1)
    pp.pprint(client.getDrivingFeaturesEpsilonMOEADiscrete(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getDrivingFeaturesContinuous':
    if len(args) != 7:
        print('getDrivingFeaturesContinuous requires 7 args')
        sys.exit(1)
    pp.pprint(client.getDrivingFeaturesContinuous(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'getDrivingFeaturesEpsilonMOEAContinuous':
    if len(args) != 4:
        print('getDrivingFeaturesEpsilonMOEAContinuous requires 4 args')
        sys.exit(1)
    pp.pprint(client.getDrivingFeaturesEpsilonMOEAContinuous(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'generalizeFeatureBinary':
    if len(args) != 7:
        print('generalizeFeatureBinary requires 7 args')
        sys.exit(1)
    pp.pprint(client.generalizeFeatureBinary(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]), args[5], args[6],))

elif cmd == 'getDrivingFeaturesWithGeneralizationBinary':
    if len(args) != 4:
        print('getDrivingFeaturesWithGeneralizationBinary requires 4 args')
        sys.exit(1)
    pp.pprint(client.getDrivingFeaturesWithGeneralizationBinary(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'simplifyFeatureExpression':
    if len(args) != 2:
        print('simplifyFeatureExpression requires 2 args')
        sys.exit(1)
    pp.pprint(client.simplifyFeatureExpression(args[0], args[1],))

elif cmd == 'stopSearch':
    if len(args) != 1:
        print('stopSearch requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopSearch(args[0],))

elif cmd == 'computeComplexityOfFeatures':
    if len(args) != 2:
        print('computeComplexityOfFeatures requires 2 args')
        sys.exit(1)
    pp.pprint(client.computeComplexityOfFeatures(args[0], eval(args[1]),))

elif cmd == 'computeAlgebraicTypicality':
    if len(args) != 3:
        print('computeAlgebraicTypicality requires 3 args')
        sys.exit(1)
    pp.pprint(client.computeAlgebraicTypicality(args[0], eval(args[1]), args[2],))

elif cmd == 'computeComplexity':
    if len(args) != 2:
        print('computeComplexity requires 2 args')
        sys.exit(1)
    pp.pprint(client.computeComplexity(args[0], args[1],))

elif cmd == 'convertToCNF':
    if len(args) != 1:
        print('convertToCNF requires 1 args')
        sys.exit(1)
    pp.pprint(client.convertToCNF(args[0],))

elif cmd == 'convertToDNF':
    if len(args) != 1:
        print('convertToDNF requires 1 args')
        sys.exit(1)
    pp.pprint(client.convertToDNF(args[0],))

elif cmd == 'setAssigningProblemEntities':
    if len(args) != 2:
        print('setAssigningProblemEntities requires 2 args')
        sys.exit(1)
    pp.pprint(client.setAssigningProblemEntities(args[0], eval(args[1]),))

elif cmd == 'setAssigningProblemGeneralizedConcepts':
    if len(args) != 2:
        print('setAssigningProblemGeneralizedConcepts requires 2 args')
        sys.exit(1)
    pp.pprint(client.setAssigningProblemGeneralizedConcepts(args[0], eval(args[1]),))

elif cmd == 'getAssigningProblemEntities':
    if len(args) != 1:
        print('getAssigningProblemEntities requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAssigningProblemEntities(args[0],))

elif cmd == 'getAssigningProblemConceptHierarchy':
    if len(args) != 2:
        print('getAssigningProblemConceptHierarchy requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAssigningProblemConceptHierarchy(args[0], eval(args[1]),))

elif cmd == 'computeAlgebraicTypicalityWithStringInput':
    if len(args) != 3:
        print('computeAlgebraicTypicalityWithStringInput requires 3 args')
        sys.exit(1)
    pp.pprint(client.computeAlgebraicTypicalityWithStringInput(args[0], args[1], args[2],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
