#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thriftinterface import VASSARInterface
from thriftinterface.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  BinaryInputArchitecture evalBinaryInputArch(string problem,  inputs)')
    print('  DiscreteInputArchitecture evalDiscreteInputArch(string problem,  inputs)')
    print('   runLocalSearchBinaryInput(string problem,  inputs)')
    print('   runLocalSearchDiscreteInput(string problem,  inputs)')
    print('   getOrbitList(string problem)')
    print('   getInstrumentList(string problem)')
    print('   getObjectiveList(string problem)')
    print('   getInstrumentsForObjective(string problem, string objective)')
    print('   getInstrumentsForPanel(string problem, string panel)')
    print('   getCritiqueBinaryInputArch(string problem,  inputs)')
    print('   getCritiqueDiscreteInputArch(string problem,  inputs)')
    print('   getArchitectureScoreExplanation(string problem,  arch)')
    print('   getPanelScoreExplanation(string problem,  arch, string panel)')
    print('   getObjectiveScoreExplanation(string problem,  arch, string objective)')
    print('  bool isGABinaryInputRunning()')
    print('  int startGABinaryInput(string problem,  dataset, string username)')
    print('  int stopGABinaryInput(string username)')
    print('   getArchScienceInformationBinaryInput(string problem, BinaryInputArchitecture arch)')
    print('   getArchCostInformationBinaryInput(string problem, BinaryInputArchitecture arch)')
    print('  SubobjectiveDetails getSubscoreDetailsBinaryInput(string problem, BinaryInputArchitecture arch, string subobj)')
    print('  bool isGADiscreteInputRunning()')
    print('  int startGADiscreteInput(string problem,  dataset, string username)')
    print('  int stopGADiscreteInput(string username)')
    print('   getArchScienceInformationDiscreteInput(string problem, DiscreteInputArchitecture arch)')
    print('   getArchCostInformationDiscreteInput(string problem, DiscreteInputArchitecture arch)')
    print('  SubobjectiveDetails getSubscoreDetailsDiscreteInput(string problem, DiscreteInputArchitecture arch, string subobj)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = VASSARInterface.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'evalBinaryInputArch':
    if len(args) != 2:
        print('evalBinaryInputArch requires 2 args')
        sys.exit(1)
    pp.pprint(client.evalBinaryInputArch(args[0], eval(args[1]),))

elif cmd == 'evalDiscreteInputArch':
    if len(args) != 2:
        print('evalDiscreteInputArch requires 2 args')
        sys.exit(1)
    pp.pprint(client.evalDiscreteInputArch(args[0], eval(args[1]),))

elif cmd == 'runLocalSearchBinaryInput':
    if len(args) != 2:
        print('runLocalSearchBinaryInput requires 2 args')
        sys.exit(1)
    pp.pprint(client.runLocalSearchBinaryInput(args[0], eval(args[1]),))

elif cmd == 'runLocalSearchDiscreteInput':
    if len(args) != 2:
        print('runLocalSearchDiscreteInput requires 2 args')
        sys.exit(1)
    pp.pprint(client.runLocalSearchDiscreteInput(args[0], eval(args[1]),))

elif cmd == 'getOrbitList':
    if len(args) != 1:
        print('getOrbitList requires 1 args')
        sys.exit(1)
    pp.pprint(client.getOrbitList(args[0],))

elif cmd == 'getInstrumentList':
    if len(args) != 1:
        print('getInstrumentList requires 1 args')
        sys.exit(1)
    pp.pprint(client.getInstrumentList(args[0],))

elif cmd == 'getObjectiveList':
    if len(args) != 1:
        print('getObjectiveList requires 1 args')
        sys.exit(1)
    pp.pprint(client.getObjectiveList(args[0],))

elif cmd == 'getInstrumentsForObjective':
    if len(args) != 2:
        print('getInstrumentsForObjective requires 2 args')
        sys.exit(1)
    pp.pprint(client.getInstrumentsForObjective(args[0], args[1],))

elif cmd == 'getInstrumentsForPanel':
    if len(args) != 2:
        print('getInstrumentsForPanel requires 2 args')
        sys.exit(1)
    pp.pprint(client.getInstrumentsForPanel(args[0], args[1],))

elif cmd == 'getCritiqueBinaryInputArch':
    if len(args) != 2:
        print('getCritiqueBinaryInputArch requires 2 args')
        sys.exit(1)
    pp.pprint(client.getCritiqueBinaryInputArch(args[0], eval(args[1]),))

elif cmd == 'getCritiqueDiscreteInputArch':
    if len(args) != 2:
        print('getCritiqueDiscreteInputArch requires 2 args')
        sys.exit(1)
    pp.pprint(client.getCritiqueDiscreteInputArch(args[0], eval(args[1]),))

elif cmd == 'getArchitectureScoreExplanation':
    if len(args) != 2:
        print('getArchitectureScoreExplanation requires 2 args')
        sys.exit(1)
    pp.pprint(client.getArchitectureScoreExplanation(args[0], eval(args[1]),))

elif cmd == 'getPanelScoreExplanation':
    if len(args) != 3:
        print('getPanelScoreExplanation requires 3 args')
        sys.exit(1)
    pp.pprint(client.getPanelScoreExplanation(args[0], eval(args[1]), args[2],))

elif cmd == 'getObjectiveScoreExplanation':
    if len(args) != 3:
        print('getObjectiveScoreExplanation requires 3 args')
        sys.exit(1)
    pp.pprint(client.getObjectiveScoreExplanation(args[0], eval(args[1]), args[2],))

elif cmd == 'isGABinaryInputRunning':
    if len(args) != 0:
        print('isGABinaryInputRunning requires 0 args')
        sys.exit(1)
    pp.pprint(client.isGABinaryInputRunning())

elif cmd == 'startGABinaryInput':
    if len(args) != 3:
        print('startGABinaryInput requires 3 args')
        sys.exit(1)
    pp.pprint(client.startGABinaryInput(args[0], eval(args[1]), args[2],))

elif cmd == 'stopGABinaryInput':
    if len(args) != 1:
        print('stopGABinaryInput requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopGABinaryInput(args[0],))

elif cmd == 'getArchScienceInformationBinaryInput':
    if len(args) != 2:
        print('getArchScienceInformationBinaryInput requires 2 args')
        sys.exit(1)
    pp.pprint(client.getArchScienceInformationBinaryInput(args[0], eval(args[1]),))

elif cmd == 'getArchCostInformationBinaryInput':
    if len(args) != 2:
        print('getArchCostInformationBinaryInput requires 2 args')
        sys.exit(1)
    pp.pprint(client.getArchCostInformationBinaryInput(args[0], eval(args[1]),))

elif cmd == 'getSubscoreDetailsBinaryInput':
    if len(args) != 3:
        print('getSubscoreDetailsBinaryInput requires 3 args')
        sys.exit(1)
    pp.pprint(client.getSubscoreDetailsBinaryInput(args[0], eval(args[1]), args[2],))

elif cmd == 'isGADiscreteInputRunning':
    if len(args) != 0:
        print('isGADiscreteInputRunning requires 0 args')
        sys.exit(1)
    pp.pprint(client.isGADiscreteInputRunning())

elif cmd == 'startGADiscreteInput':
    if len(args) != 3:
        print('startGADiscreteInput requires 3 args')
        sys.exit(1)
    pp.pprint(client.startGADiscreteInput(args[0], eval(args[1]), args[2],))

elif cmd == 'stopGADiscreteInput':
    if len(args) != 1:
        print('stopGADiscreteInput requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopGADiscreteInput(args[0],))

elif cmd == 'getArchScienceInformationDiscreteInput':
    if len(args) != 2:
        print('getArchScienceInformationDiscreteInput requires 2 args')
        sys.exit(1)
    pp.pprint(client.getArchScienceInformationDiscreteInput(args[0], eval(args[1]),))

elif cmd == 'getArchCostInformationDiscreteInput':
    if len(args) != 2:
        print('getArchCostInformationDiscreteInput requires 2 args')
        sys.exit(1)
    pp.pprint(client.getArchCostInformationDiscreteInput(args[0], eval(args[1]),))

elif cmd == 'getSubscoreDetailsDiscreteInput':
    if len(args) != 3:
        print('getSubscoreDetailsDiscreteInput requires 3 args')
        sys.exit(1)
    pp.pprint(client.getSubscoreDetailsDiscreteInput(args[0], eval(args[1]), args[2],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
