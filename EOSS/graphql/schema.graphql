schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}
"whether this query should be cached (Hasura Cloud only)"
directive @cached("measured in seconds" ttl: Int! = 60, "refresh the cache entry" refresh: Boolean! = false) on QUERY
"""
columns and relationships of "Accepted_Value"
"""
type Accepted_Value {
  "An object relationship"
  Group: Group
  "An array relationship"
  Join__Instrument_Attribute_Values("distinct select on columns" distinct_on: [Join__Instrument_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Attribute_Values_order_by!], "filter the rows returned" where: Join__Instrument_Attribute_Values_bool_exp): [Join__Instrument_Attribute_Values!]!
  "An aggregate relationship"
  Join__Instrument_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Attribute_Values_order_by!], "filter the rows returned" where: Join__Instrument_Attribute_Values_bool_exp): Join__Instrument_Attribute_Values_aggregate!
  "An array relationship"
  Join__Launch_Vehicle_Attribute_Values("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_Values_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_Values_bool_exp): [Join__Launch_Vehicle_Attribute_Values!]!
  "An aggregate relationship"
  Join__Launch_Vehicle_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_Values_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_Values_bool_exp): Join__Launch_Vehicle_Attribute_Values_aggregate!
  "An array relationship"
  Join__Measurement_Attribute_Values("distinct select on columns" distinct_on: [Join__Measurement_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Measurement_Attribute_Values_order_by!], "filter the rows returned" where: Join__Measurement_Attribute_Values_bool_exp): [Join__Measurement_Attribute_Values!]!
  "An aggregate relationship"
  Join__Measurement_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Measurement_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Measurement_Attribute_Values_order_by!], "filter the rows returned" where: Join__Measurement_Attribute_Values_bool_exp): Join__Measurement_Attribute_Values_aggregate!
  "An array relationship"
  Join__Mission_Attribute_Values("distinct select on columns" distinct_on: [Join__Mission_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Mission_Attribute_Values_order_by!], "filter the rows returned" where: Join__Mission_Attribute_Values_bool_exp): [Join__Mission_Attribute_Values!]!
  "An aggregate relationship"
  Join__Mission_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Mission_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Mission_Attribute_Values_order_by!], "filter the rows returned" where: Join__Mission_Attribute_Values_bool_exp): Join__Mission_Attribute_Values_aggregate!
  "An array relationship"
  Join__Orbit_Attribute_Values("distinct select on columns" distinct_on: [Join__Orbit_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_Values_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_Values_bool_exp): [Join__Orbit_Attribute_Values!]!
  "An aggregate relationship"
  Join__Orbit_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Orbit_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_Values_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_Values_bool_exp): Join__Orbit_Attribute_Values_aggregate!
  group_id: Int
  id: Int!
  value: String
}
"""
aggregated selection of "Accepted_Value"
"""
type Accepted_Value_aggregate {
  aggregate: Accepted_Value_aggregate_fields
  nodes: [Accepted_Value!]!
}
"""
aggregate fields of "Accepted_Value"
"""
type Accepted_Value_aggregate_fields {
  avg: Accepted_Value_avg_fields
  count(columns: [Accepted_Value_select_column!], distinct: Boolean): Int!
  max: Accepted_Value_max_fields
  min: Accepted_Value_min_fields
  stddev: Accepted_Value_stddev_fields
  stddev_pop: Accepted_Value_stddev_pop_fields
  stddev_samp: Accepted_Value_stddev_samp_fields
  sum: Accepted_Value_sum_fields
  var_pop: Accepted_Value_var_pop_fields
  var_samp: Accepted_Value_var_samp_fields
  variance: Accepted_Value_variance_fields
}
"""
order by aggregate values of table "Accepted_Value"
"""
input Accepted_Value_aggregate_order_by {
  avg: Accepted_Value_avg_order_by
  count: order_by
  max: Accepted_Value_max_order_by
  min: Accepted_Value_min_order_by
  stddev: Accepted_Value_stddev_order_by
  stddev_pop: Accepted_Value_stddev_pop_order_by
  stddev_samp: Accepted_Value_stddev_samp_order_by
  sum: Accepted_Value_sum_order_by
  var_pop: Accepted_Value_var_pop_order_by
  var_samp: Accepted_Value_var_samp_order_by
  variance: Accepted_Value_variance_order_by
}
"""
input type for inserting array relation for remote table "Accepted_Value"
"""
input Accepted_Value_arr_rel_insert_input {
  data: [Accepted_Value_insert_input!]!
  "on conflict condition"
  on_conflict: Accepted_Value_on_conflict
}
"aggregate avg on columns"
type Accepted_Value_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Accepted_Value"
"""
input Accepted_Value_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Accepted_Value". All fields are combined with a logical 'AND'.
"""
input Accepted_Value_bool_exp {
  Group: Group_bool_exp
  Join__Instrument_Attribute_Values: Join__Instrument_Attribute_Values_bool_exp
  Join__Launch_Vehicle_Attribute_Values: Join__Launch_Vehicle_Attribute_Values_bool_exp
  Join__Measurement_Attribute_Values: Join__Measurement_Attribute_Values_bool_exp
  Join__Mission_Attribute_Values: Join__Mission_Attribute_Values_bool_exp
  Join__Orbit_Attribute_Values: Join__Orbit_Attribute_Values_bool_exp
  _and: [Accepted_Value_bool_exp!]
  _not: Accepted_Value_bool_exp
  _or: [Accepted_Value_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  value: String_comparison_exp
}
"""
unique or primary key constraints on table "Accepted_Value"
"""
enum Accepted_Value_constraint {
  "unique or primary key constraint"
  Accepted_Value_pkey
}
"""
input type for incrementing numeric columns in table "Accepted_Value"
"""
input Accepted_Value_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Accepted_Value"
"""
input Accepted_Value_insert_input {
  Group: Group_obj_rel_insert_input
  Join__Instrument_Attribute_Values: Join__Instrument_Attribute_Values_arr_rel_insert_input
  Join__Launch_Vehicle_Attribute_Values: Join__Launch_Vehicle_Attribute_Values_arr_rel_insert_input
  Join__Measurement_Attribute_Values: Join__Measurement_Attribute_Values_arr_rel_insert_input
  Join__Mission_Attribute_Values: Join__Mission_Attribute_Values_arr_rel_insert_input
  Join__Orbit_Attribute_Values: Join__Orbit_Attribute_Values_arr_rel_insert_input
  group_id: Int
  id: Int
  value: String
}
"aggregate max on columns"
type Accepted_Value_max_fields {
  group_id: Int
  id: Int
  value: String
}
"""
order by max() on columns of table "Accepted_Value"
"""
input Accepted_Value_max_order_by {
  group_id: order_by
  id: order_by
  value: order_by
}
"aggregate min on columns"
type Accepted_Value_min_fields {
  group_id: Int
  id: Int
  value: String
}
"""
order by min() on columns of table "Accepted_Value"
"""
input Accepted_Value_min_order_by {
  group_id: order_by
  id: order_by
  value: order_by
}
"""
response of any mutation on the table "Accepted_Value"
"""
type Accepted_Value_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Accepted_Value!]!
}
"""
input type for inserting object relation for remote table "Accepted_Value"
"""
input Accepted_Value_obj_rel_insert_input {
  data: Accepted_Value_insert_input!
  "on conflict condition"
  on_conflict: Accepted_Value_on_conflict
}
"""
on conflict condition type for table "Accepted_Value"
"""
input Accepted_Value_on_conflict {
  constraint: Accepted_Value_constraint!
  update_columns: [Accepted_Value_update_column!]! = []
  where: Accepted_Value_bool_exp
}
"""
Ordering options when selecting data from "Accepted_Value".
"""
input Accepted_Value_order_by {
  Group: Group_order_by
  Join__Instrument_Attribute_Values_aggregate: Join__Instrument_Attribute_Values_aggregate_order_by
  Join__Launch_Vehicle_Attribute_Values_aggregate: Join__Launch_Vehicle_Attribute_Values_aggregate_order_by
  Join__Measurement_Attribute_Values_aggregate: Join__Measurement_Attribute_Values_aggregate_order_by
  Join__Mission_Attribute_Values_aggregate: Join__Mission_Attribute_Values_aggregate_order_by
  Join__Orbit_Attribute_Values_aggregate: Join__Orbit_Attribute_Values_aggregate_order_by
  group_id: order_by
  id: order_by
  value: order_by
}
"primary key columns input for table: Accepted_Value"
input Accepted_Value_pk_columns_input {
  id: Int!
}
"""
select columns of table "Accepted_Value"
"""
enum Accepted_Value_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  value
}
"""
input type for updating data in table "Accepted_Value"
"""
input Accepted_Value_set_input {
  group_id: Int
  id: Int
  value: String
}
"aggregate stddev on columns"
type Accepted_Value_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Accepted_Value"
"""
input Accepted_Value_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Accepted_Value_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Accepted_Value"
"""
input Accepted_Value_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Accepted_Value_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Accepted_Value"
"""
input Accepted_Value_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Accepted_Value_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Accepted_Value"
"""
input Accepted_Value_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Accepted_Value"
"""
enum Accepted_Value_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  value
}
"aggregate var_pop on columns"
type Accepted_Value_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Accepted_Value"
"""
input Accepted_Value_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Accepted_Value_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Accepted_Value"
"""
input Accepted_Value_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Accepted_Value_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Accepted_Value"
"""
input Accepted_Value_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
columns and relationships of "Architecture"
"""
type Architecture {
  "An array relationship"
  ArchitectureCostInformations("distinct select on columns" distinct_on: [ArchitectureCostInformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureCostInformation_order_by!], "filter the rows returned" where: ArchitectureCostInformation_bool_exp): [ArchitectureCostInformation!]!
  "An aggregate relationship"
  ArchitectureCostInformations_aggregate("distinct select on columns" distinct_on: [ArchitectureCostInformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureCostInformation_order_by!], "filter the rows returned" where: ArchitectureCostInformation_bool_exp): ArchitectureCostInformation_aggregate!
  "An array relationship"
  ArchitectureScoreExplanations("distinct select on columns" distinct_on: [ArchitectureScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureScoreExplanation_order_by!], "filter the rows returned" where: ArchitectureScoreExplanation_bool_exp): [ArchitectureScoreExplanation!]!
  "An aggregate relationship"
  ArchitectureScoreExplanations_aggregate("distinct select on columns" distinct_on: [ArchitectureScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureScoreExplanation_order_by!], "filter the rows returned" where: ArchitectureScoreExplanation_bool_exp): ArchitectureScoreExplanation_aggregate!
  "An object relationship"
  Dataset: Dataset
  "An array relationship"
  ObjectiveScoreExplanations("distinct select on columns" distinct_on: [ObjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ObjectiveScoreExplanation_order_by!], "filter the rows returned" where: ObjectiveScoreExplanation_bool_exp): [ObjectiveScoreExplanation!]!
  "An aggregate relationship"
  ObjectiveScoreExplanations_aggregate("distinct select on columns" distinct_on: [ObjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ObjectiveScoreExplanation_order_by!], "filter the rows returned" where: ObjectiveScoreExplanation_bool_exp): ObjectiveScoreExplanation_aggregate!
  "An array relationship"
  PanelScoreExplanations("distinct select on columns" distinct_on: [PanelScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [PanelScoreExplanation_order_by!], "filter the rows returned" where: PanelScoreExplanation_bool_exp): [PanelScoreExplanation!]!
  "An aggregate relationship"
  PanelScoreExplanations_aggregate("distinct select on columns" distinct_on: [PanelScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [PanelScoreExplanation_order_by!], "filter the rows returned" where: PanelScoreExplanation_bool_exp): PanelScoreExplanation_aggregate!
  "An object relationship"
  Problem: Problem
  "An array relationship"
  SubobjectiveScoreExplanations("distinct select on columns" distinct_on: [SubobjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [SubobjectiveScoreExplanation_order_by!], "filter the rows returned" where: SubobjectiveScoreExplanation_bool_exp): [SubobjectiveScoreExplanation!]!
  "An aggregate relationship"
  SubobjectiveScoreExplanations_aggregate("distinct select on columns" distinct_on: [SubobjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [SubobjectiveScoreExplanation_order_by!], "filter the rows returned" where: SubobjectiveScoreExplanation_bool_exp): SubobjectiveScoreExplanation_aggregate!
  "An object relationship"
  auth_user: auth_user
  cost: float8
  critique: String
  data_continuity: float8
  dataset_id: Int
  eval_idx: Int
  eval_status: Boolean
  fairness: float8
  ga: Boolean
  id: Int!
  improve_hv: Boolean
  input: String
  problem_id: Int
  programmatic_risk: float8
  science: float8
  user_id: Int
}
"""
columns and relationships of "ArchitectureBudget"
"""
type ArchitectureBudget {
  "An object relationship"
  ArchitectureCostInformation: ArchitectureCostInformation
  "An object relationship"
  Mission_Attribute: Mission_Attribute
  arch_cost_id: Int
  id: Int!
  mission_attribute_id: Int
  value: float8
}
"""
aggregated selection of "ArchitectureBudget"
"""
type ArchitectureBudget_aggregate {
  aggregate: ArchitectureBudget_aggregate_fields
  nodes: [ArchitectureBudget!]!
}
"""
aggregate fields of "ArchitectureBudget"
"""
type ArchitectureBudget_aggregate_fields {
  avg: ArchitectureBudget_avg_fields
  count(columns: [ArchitectureBudget_select_column!], distinct: Boolean): Int!
  max: ArchitectureBudget_max_fields
  min: ArchitectureBudget_min_fields
  stddev: ArchitectureBudget_stddev_fields
  stddev_pop: ArchitectureBudget_stddev_pop_fields
  stddev_samp: ArchitectureBudget_stddev_samp_fields
  sum: ArchitectureBudget_sum_fields
  var_pop: ArchitectureBudget_var_pop_fields
  var_samp: ArchitectureBudget_var_samp_fields
  variance: ArchitectureBudget_variance_fields
}
"""
order by aggregate values of table "ArchitectureBudget"
"""
input ArchitectureBudget_aggregate_order_by {
  avg: ArchitectureBudget_avg_order_by
  count: order_by
  max: ArchitectureBudget_max_order_by
  min: ArchitectureBudget_min_order_by
  stddev: ArchitectureBudget_stddev_order_by
  stddev_pop: ArchitectureBudget_stddev_pop_order_by
  stddev_samp: ArchitectureBudget_stddev_samp_order_by
  sum: ArchitectureBudget_sum_order_by
  var_pop: ArchitectureBudget_var_pop_order_by
  var_samp: ArchitectureBudget_var_samp_order_by
  variance: ArchitectureBudget_variance_order_by
}
"""
input type for inserting array relation for remote table "ArchitectureBudget"
"""
input ArchitectureBudget_arr_rel_insert_input {
  data: [ArchitectureBudget_insert_input!]!
  "on conflict condition"
  on_conflict: ArchitectureBudget_on_conflict
}
"aggregate avg on columns"
type ArchitectureBudget_avg_fields {
  arch_cost_id: Float
  id: Float
  mission_attribute_id: Float
  value: Float
}
"""
order by avg() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_avg_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"""
Boolean expression to filter rows from the table "ArchitectureBudget". All fields are combined with a logical 'AND'.
"""
input ArchitectureBudget_bool_exp {
  ArchitectureCostInformation: ArchitectureCostInformation_bool_exp
  Mission_Attribute: Mission_Attribute_bool_exp
  _and: [ArchitectureBudget_bool_exp!]
  _not: ArchitectureBudget_bool_exp
  _or: [ArchitectureBudget_bool_exp!]
  arch_cost_id: Int_comparison_exp
  id: Int_comparison_exp
  mission_attribute_id: Int_comparison_exp
  value: float8_comparison_exp
}
"""
unique or primary key constraints on table "ArchitectureBudget"
"""
enum ArchitectureBudget_constraint {
  "unique or primary key constraint"
  ArchitectureBudget_pkey
}
"""
input type for incrementing numeric columns in table "ArchitectureBudget"
"""
input ArchitectureBudget_inc_input {
  arch_cost_id: Int
  id: Int
  mission_attribute_id: Int
  value: float8
}
"""
input type for inserting data into table "ArchitectureBudget"
"""
input ArchitectureBudget_insert_input {
  ArchitectureCostInformation: ArchitectureCostInformation_obj_rel_insert_input
  Mission_Attribute: Mission_Attribute_obj_rel_insert_input
  arch_cost_id: Int
  id: Int
  mission_attribute_id: Int
  value: float8
}
"aggregate max on columns"
type ArchitectureBudget_max_fields {
  arch_cost_id: Int
  id: Int
  mission_attribute_id: Int
  value: float8
}
"""
order by max() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_max_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"aggregate min on columns"
type ArchitectureBudget_min_fields {
  arch_cost_id: Int
  id: Int
  mission_attribute_id: Int
  value: float8
}
"""
order by min() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_min_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"""
response of any mutation on the table "ArchitectureBudget"
"""
type ArchitectureBudget_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [ArchitectureBudget!]!
}
"""
on conflict condition type for table "ArchitectureBudget"
"""
input ArchitectureBudget_on_conflict {
  constraint: ArchitectureBudget_constraint!
  update_columns: [ArchitectureBudget_update_column!]! = []
  where: ArchitectureBudget_bool_exp
}
"""
Ordering options when selecting data from "ArchitectureBudget".
"""
input ArchitectureBudget_order_by {
  ArchitectureCostInformation: ArchitectureCostInformation_order_by
  Mission_Attribute: Mission_Attribute_order_by
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"primary key columns input for table: ArchitectureBudget"
input ArchitectureBudget_pk_columns_input {
  id: Int!
}
"""
select columns of table "ArchitectureBudget"
"""
enum ArchitectureBudget_select_column {
  "column name"
  arch_cost_id
  "column name"
  id
  "column name"
  mission_attribute_id
  "column name"
  value
}
"""
input type for updating data in table "ArchitectureBudget"
"""
input ArchitectureBudget_set_input {
  arch_cost_id: Int
  id: Int
  mission_attribute_id: Int
  value: float8
}
"aggregate stddev on columns"
type ArchitectureBudget_stddev_fields {
  arch_cost_id: Float
  id: Float
  mission_attribute_id: Float
  value: Float
}
"""
order by stddev() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_stddev_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"aggregate stddev_pop on columns"
type ArchitectureBudget_stddev_pop_fields {
  arch_cost_id: Float
  id: Float
  mission_attribute_id: Float
  value: Float
}
"""
order by stddev_pop() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_stddev_pop_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"aggregate stddev_samp on columns"
type ArchitectureBudget_stddev_samp_fields {
  arch_cost_id: Float
  id: Float
  mission_attribute_id: Float
  value: Float
}
"""
order by stddev_samp() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_stddev_samp_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"aggregate sum on columns"
type ArchitectureBudget_sum_fields {
  arch_cost_id: Int
  id: Int
  mission_attribute_id: Int
  value: float8
}
"""
order by sum() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_sum_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"""
update columns of table "ArchitectureBudget"
"""
enum ArchitectureBudget_update_column {
  "column name"
  arch_cost_id
  "column name"
  id
  "column name"
  mission_attribute_id
  "column name"
  value
}
"aggregate var_pop on columns"
type ArchitectureBudget_var_pop_fields {
  arch_cost_id: Float
  id: Float
  mission_attribute_id: Float
  value: Float
}
"""
order by var_pop() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_var_pop_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"aggregate var_samp on columns"
type ArchitectureBudget_var_samp_fields {
  arch_cost_id: Float
  id: Float
  mission_attribute_id: Float
  value: Float
}
"""
order by var_samp() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_var_samp_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"aggregate variance on columns"
type ArchitectureBudget_variance_fields {
  arch_cost_id: Float
  id: Float
  mission_attribute_id: Float
  value: Float
}
"""
order by variance() on columns of table "ArchitectureBudget"
"""
input ArchitectureBudget_variance_order_by {
  arch_cost_id: order_by
  id: order_by
  mission_attribute_id: order_by
  value: order_by
}
"""
columns and relationships of "ArchitectureCostInformation"
"""
type ArchitectureCostInformation {
  "An object relationship"
  Architecture: Architecture
  "An array relationship"
  ArchitectureBudgets("distinct select on columns" distinct_on: [ArchitectureBudget_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureBudget_order_by!], "filter the rows returned" where: ArchitectureBudget_bool_exp): [ArchitectureBudget!]!
  "An aggregate relationship"
  ArchitectureBudgets_aggregate("distinct select on columns" distinct_on: [ArchitectureBudget_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureBudget_order_by!], "filter the rows returned" where: ArchitectureBudget_bool_exp): ArchitectureBudget_aggregate!
  "An array relationship"
  ArchitecturePayloads("distinct select on columns" distinct_on: [ArchitecturePayload_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitecturePayload_order_by!], "filter the rows returned" where: ArchitecturePayload_bool_exp): [ArchitecturePayload!]!
  "An aggregate relationship"
  ArchitecturePayloads_aggregate("distinct select on columns" distinct_on: [ArchitecturePayload_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitecturePayload_order_by!], "filter the rows returned" where: ArchitecturePayload_bool_exp): ArchitecturePayload_aggregate!
  architecture_id: Int
  cost: float8
  id: Int!
  launch_vehicle: String
  mass: float8
  mission_name: String
  others: float8
  power: float8
}
"""
aggregated selection of "ArchitectureCostInformation"
"""
type ArchitectureCostInformation_aggregate {
  aggregate: ArchitectureCostInformation_aggregate_fields
  nodes: [ArchitectureCostInformation!]!
}
"""
aggregate fields of "ArchitectureCostInformation"
"""
type ArchitectureCostInformation_aggregate_fields {
  avg: ArchitectureCostInformation_avg_fields
  count(columns: [ArchitectureCostInformation_select_column!], distinct: Boolean): Int!
  max: ArchitectureCostInformation_max_fields
  min: ArchitectureCostInformation_min_fields
  stddev: ArchitectureCostInformation_stddev_fields
  stddev_pop: ArchitectureCostInformation_stddev_pop_fields
  stddev_samp: ArchitectureCostInformation_stddev_samp_fields
  sum: ArchitectureCostInformation_sum_fields
  var_pop: ArchitectureCostInformation_var_pop_fields
  var_samp: ArchitectureCostInformation_var_samp_fields
  variance: ArchitectureCostInformation_variance_fields
}
"""
order by aggregate values of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_aggregate_order_by {
  avg: ArchitectureCostInformation_avg_order_by
  count: order_by
  max: ArchitectureCostInformation_max_order_by
  min: ArchitectureCostInformation_min_order_by
  stddev: ArchitectureCostInformation_stddev_order_by
  stddev_pop: ArchitectureCostInformation_stddev_pop_order_by
  stddev_samp: ArchitectureCostInformation_stddev_samp_order_by
  sum: ArchitectureCostInformation_sum_order_by
  var_pop: ArchitectureCostInformation_var_pop_order_by
  var_samp: ArchitectureCostInformation_var_samp_order_by
  variance: ArchitectureCostInformation_variance_order_by
}
"""
input type for inserting array relation for remote table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_arr_rel_insert_input {
  data: [ArchitectureCostInformation_insert_input!]!
  "on conflict condition"
  on_conflict: ArchitectureCostInformation_on_conflict
}
"aggregate avg on columns"
type ArchitectureCostInformation_avg_fields {
  architecture_id: Float
  cost: Float
  id: Float
  mass: Float
  others: Float
  power: Float
}
"""
order by avg() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_avg_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  mass: order_by
  others: order_by
  power: order_by
}
"""
Boolean expression to filter rows from the table "ArchitectureCostInformation". All fields are combined with a logical 'AND'.
"""
input ArchitectureCostInformation_bool_exp {
  Architecture: Architecture_bool_exp
  ArchitectureBudgets: ArchitectureBudget_bool_exp
  ArchitecturePayloads: ArchitecturePayload_bool_exp
  _and: [ArchitectureCostInformation_bool_exp!]
  _not: ArchitectureCostInformation_bool_exp
  _or: [ArchitectureCostInformation_bool_exp!]
  architecture_id: Int_comparison_exp
  cost: float8_comparison_exp
  id: Int_comparison_exp
  launch_vehicle: String_comparison_exp
  mass: float8_comparison_exp
  mission_name: String_comparison_exp
  others: float8_comparison_exp
  power: float8_comparison_exp
}
"""
unique or primary key constraints on table "ArchitectureCostInformation"
"""
enum ArchitectureCostInformation_constraint {
  "unique or primary key constraint"
  ArchitectureCostInformation_pkey
}
"""
input type for incrementing numeric columns in table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_inc_input {
  architecture_id: Int
  cost: float8
  id: Int
  mass: float8
  others: float8
  power: float8
}
"""
input type for inserting data into table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_insert_input {
  Architecture: Architecture_obj_rel_insert_input
  ArchitectureBudgets: ArchitectureBudget_arr_rel_insert_input
  ArchitecturePayloads: ArchitecturePayload_arr_rel_insert_input
  architecture_id: Int
  cost: float8
  id: Int
  launch_vehicle: String
  mass: float8
  mission_name: String
  others: float8
  power: float8
}
"aggregate max on columns"
type ArchitectureCostInformation_max_fields {
  architecture_id: Int
  cost: float8
  id: Int
  launch_vehicle: String
  mass: float8
  mission_name: String
  others: float8
  power: float8
}
"""
order by max() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_max_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  launch_vehicle: order_by
  mass: order_by
  mission_name: order_by
  others: order_by
  power: order_by
}
"aggregate min on columns"
type ArchitectureCostInformation_min_fields {
  architecture_id: Int
  cost: float8
  id: Int
  launch_vehicle: String
  mass: float8
  mission_name: String
  others: float8
  power: float8
}
"""
order by min() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_min_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  launch_vehicle: order_by
  mass: order_by
  mission_name: order_by
  others: order_by
  power: order_by
}
"""
response of any mutation on the table "ArchitectureCostInformation"
"""
type ArchitectureCostInformation_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [ArchitectureCostInformation!]!
}
"""
input type for inserting object relation for remote table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_obj_rel_insert_input {
  data: ArchitectureCostInformation_insert_input!
  "on conflict condition"
  on_conflict: ArchitectureCostInformation_on_conflict
}
"""
on conflict condition type for table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_on_conflict {
  constraint: ArchitectureCostInformation_constraint!
  update_columns: [ArchitectureCostInformation_update_column!]! = []
  where: ArchitectureCostInformation_bool_exp
}
"""
Ordering options when selecting data from "ArchitectureCostInformation".
"""
input ArchitectureCostInformation_order_by {
  Architecture: Architecture_order_by
  ArchitectureBudgets_aggregate: ArchitectureBudget_aggregate_order_by
  ArchitecturePayloads_aggregate: ArchitecturePayload_aggregate_order_by
  architecture_id: order_by
  cost: order_by
  id: order_by
  launch_vehicle: order_by
  mass: order_by
  mission_name: order_by
  others: order_by
  power: order_by
}
"primary key columns input for table: ArchitectureCostInformation"
input ArchitectureCostInformation_pk_columns_input {
  id: Int!
}
"""
select columns of table "ArchitectureCostInformation"
"""
enum ArchitectureCostInformation_select_column {
  "column name"
  architecture_id
  "column name"
  cost
  "column name"
  id
  "column name"
  launch_vehicle
  "column name"
  mass
  "column name"
  mission_name
  "column name"
  others
  "column name"
  power
}
"""
input type for updating data in table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_set_input {
  architecture_id: Int
  cost: float8
  id: Int
  launch_vehicle: String
  mass: float8
  mission_name: String
  others: float8
  power: float8
}
"aggregate stddev on columns"
type ArchitectureCostInformation_stddev_fields {
  architecture_id: Float
  cost: Float
  id: Float
  mass: Float
  others: Float
  power: Float
}
"""
order by stddev() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_stddev_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  mass: order_by
  others: order_by
  power: order_by
}
"aggregate stddev_pop on columns"
type ArchitectureCostInformation_stddev_pop_fields {
  architecture_id: Float
  cost: Float
  id: Float
  mass: Float
  others: Float
  power: Float
}
"""
order by stddev_pop() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_stddev_pop_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  mass: order_by
  others: order_by
  power: order_by
}
"aggregate stddev_samp on columns"
type ArchitectureCostInformation_stddev_samp_fields {
  architecture_id: Float
  cost: Float
  id: Float
  mass: Float
  others: Float
  power: Float
}
"""
order by stddev_samp() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_stddev_samp_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  mass: order_by
  others: order_by
  power: order_by
}
"aggregate sum on columns"
type ArchitectureCostInformation_sum_fields {
  architecture_id: Int
  cost: float8
  id: Int
  mass: float8
  others: float8
  power: float8
}
"""
order by sum() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_sum_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  mass: order_by
  others: order_by
  power: order_by
}
"""
update columns of table "ArchitectureCostInformation"
"""
enum ArchitectureCostInformation_update_column {
  "column name"
  architecture_id
  "column name"
  cost
  "column name"
  id
  "column name"
  launch_vehicle
  "column name"
  mass
  "column name"
  mission_name
  "column name"
  others
  "column name"
  power
}
"aggregate var_pop on columns"
type ArchitectureCostInformation_var_pop_fields {
  architecture_id: Float
  cost: Float
  id: Float
  mass: Float
  others: Float
  power: Float
}
"""
order by var_pop() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_var_pop_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  mass: order_by
  others: order_by
  power: order_by
}
"aggregate var_samp on columns"
type ArchitectureCostInformation_var_samp_fields {
  architecture_id: Float
  cost: Float
  id: Float
  mass: Float
  others: Float
  power: Float
}
"""
order by var_samp() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_var_samp_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  mass: order_by
  others: order_by
  power: order_by
}
"aggregate variance on columns"
type ArchitectureCostInformation_variance_fields {
  architecture_id: Float
  cost: Float
  id: Float
  mass: Float
  others: Float
  power: Float
}
"""
order by variance() on columns of table "ArchitectureCostInformation"
"""
input ArchitectureCostInformation_variance_order_by {
  architecture_id: order_by
  cost: order_by
  id: order_by
  mass: order_by
  others: order_by
  power: order_by
}
"""
columns and relationships of "ArchitecturePayload"
"""
type ArchitecturePayload {
  "An object relationship"
  ArchitectureCostInformation: ArchitectureCostInformation
  "An object relationship"
  Instrument: Instrument
  arch_cost_id: Int
  id: Int!
  instrument_id: Int
}
"""
aggregated selection of "ArchitecturePayload"
"""
type ArchitecturePayload_aggregate {
  aggregate: ArchitecturePayload_aggregate_fields
  nodes: [ArchitecturePayload!]!
}
"""
aggregate fields of "ArchitecturePayload"
"""
type ArchitecturePayload_aggregate_fields {
  avg: ArchitecturePayload_avg_fields
  count(columns: [ArchitecturePayload_select_column!], distinct: Boolean): Int!
  max: ArchitecturePayload_max_fields
  min: ArchitecturePayload_min_fields
  stddev: ArchitecturePayload_stddev_fields
  stddev_pop: ArchitecturePayload_stddev_pop_fields
  stddev_samp: ArchitecturePayload_stddev_samp_fields
  sum: ArchitecturePayload_sum_fields
  var_pop: ArchitecturePayload_var_pop_fields
  var_samp: ArchitecturePayload_var_samp_fields
  variance: ArchitecturePayload_variance_fields
}
"""
order by aggregate values of table "ArchitecturePayload"
"""
input ArchitecturePayload_aggregate_order_by {
  avg: ArchitecturePayload_avg_order_by
  count: order_by
  max: ArchitecturePayload_max_order_by
  min: ArchitecturePayload_min_order_by
  stddev: ArchitecturePayload_stddev_order_by
  stddev_pop: ArchitecturePayload_stddev_pop_order_by
  stddev_samp: ArchitecturePayload_stddev_samp_order_by
  sum: ArchitecturePayload_sum_order_by
  var_pop: ArchitecturePayload_var_pop_order_by
  var_samp: ArchitecturePayload_var_samp_order_by
  variance: ArchitecturePayload_variance_order_by
}
"""
input type for inserting array relation for remote table "ArchitecturePayload"
"""
input ArchitecturePayload_arr_rel_insert_input {
  data: [ArchitecturePayload_insert_input!]!
  "on conflict condition"
  on_conflict: ArchitecturePayload_on_conflict
}
"aggregate avg on columns"
type ArchitecturePayload_avg_fields {
  arch_cost_id: Float
  id: Float
  instrument_id: Float
}
"""
order by avg() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_avg_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"""
Boolean expression to filter rows from the table "ArchitecturePayload". All fields are combined with a logical 'AND'.
"""
input ArchitecturePayload_bool_exp {
  ArchitectureCostInformation: ArchitectureCostInformation_bool_exp
  Instrument: Instrument_bool_exp
  _and: [ArchitecturePayload_bool_exp!]
  _not: ArchitecturePayload_bool_exp
  _or: [ArchitecturePayload_bool_exp!]
  arch_cost_id: Int_comparison_exp
  id: Int_comparison_exp
  instrument_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "ArchitecturePayload"
"""
enum ArchitecturePayload_constraint {
  "unique or primary key constraint"
  ArchitecturePayload_pkey
}
"""
input type for incrementing numeric columns in table "ArchitecturePayload"
"""
input ArchitecturePayload_inc_input {
  arch_cost_id: Int
  id: Int
  instrument_id: Int
}
"""
input type for inserting data into table "ArchitecturePayload"
"""
input ArchitecturePayload_insert_input {
  ArchitectureCostInformation: ArchitectureCostInformation_obj_rel_insert_input
  Instrument: Instrument_obj_rel_insert_input
  arch_cost_id: Int
  id: Int
  instrument_id: Int
}
"aggregate max on columns"
type ArchitecturePayload_max_fields {
  arch_cost_id: Int
  id: Int
  instrument_id: Int
}
"""
order by max() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_max_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"aggregate min on columns"
type ArchitecturePayload_min_fields {
  arch_cost_id: Int
  id: Int
  instrument_id: Int
}
"""
order by min() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_min_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"""
response of any mutation on the table "ArchitecturePayload"
"""
type ArchitecturePayload_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [ArchitecturePayload!]!
}
"""
on conflict condition type for table "ArchitecturePayload"
"""
input ArchitecturePayload_on_conflict {
  constraint: ArchitecturePayload_constraint!
  update_columns: [ArchitecturePayload_update_column!]! = []
  where: ArchitecturePayload_bool_exp
}
"""
Ordering options when selecting data from "ArchitecturePayload".
"""
input ArchitecturePayload_order_by {
  ArchitectureCostInformation: ArchitectureCostInformation_order_by
  Instrument: Instrument_order_by
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"primary key columns input for table: ArchitecturePayload"
input ArchitecturePayload_pk_columns_input {
  id: Int!
}
"""
select columns of table "ArchitecturePayload"
"""
enum ArchitecturePayload_select_column {
  "column name"
  arch_cost_id
  "column name"
  id
  "column name"
  instrument_id
}
"""
input type for updating data in table "ArchitecturePayload"
"""
input ArchitecturePayload_set_input {
  arch_cost_id: Int
  id: Int
  instrument_id: Int
}
"aggregate stddev on columns"
type ArchitecturePayload_stddev_fields {
  arch_cost_id: Float
  id: Float
  instrument_id: Float
}
"""
order by stddev() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_stddev_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"aggregate stddev_pop on columns"
type ArchitecturePayload_stddev_pop_fields {
  arch_cost_id: Float
  id: Float
  instrument_id: Float
}
"""
order by stddev_pop() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_stddev_pop_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"aggregate stddev_samp on columns"
type ArchitecturePayload_stddev_samp_fields {
  arch_cost_id: Float
  id: Float
  instrument_id: Float
}
"""
order by stddev_samp() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_stddev_samp_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"aggregate sum on columns"
type ArchitecturePayload_sum_fields {
  arch_cost_id: Int
  id: Int
  instrument_id: Int
}
"""
order by sum() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_sum_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"""
update columns of table "ArchitecturePayload"
"""
enum ArchitecturePayload_update_column {
  "column name"
  arch_cost_id
  "column name"
  id
  "column name"
  instrument_id
}
"aggregate var_pop on columns"
type ArchitecturePayload_var_pop_fields {
  arch_cost_id: Float
  id: Float
  instrument_id: Float
}
"""
order by var_pop() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_var_pop_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"aggregate var_samp on columns"
type ArchitecturePayload_var_samp_fields {
  arch_cost_id: Float
  id: Float
  instrument_id: Float
}
"""
order by var_samp() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_var_samp_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"aggregate variance on columns"
type ArchitecturePayload_variance_fields {
  arch_cost_id: Float
  id: Float
  instrument_id: Float
}
"""
order by variance() on columns of table "ArchitecturePayload"
"""
input ArchitecturePayload_variance_order_by {
  arch_cost_id: order_by
  id: order_by
  instrument_id: order_by
}
"""
columns and relationships of "ArchitectureScoreExplanation"
"""
type ArchitectureScoreExplanation {
  "An object relationship"
  Architecture: Architecture
  "An object relationship"
  Stakeholder_Needs_Panel: Stakeholder_Needs_Panel
  architecture_id: Int
  id: Int!
  panel_id: Int
  satisfaction: float8
}
"""
aggregated selection of "ArchitectureScoreExplanation"
"""
type ArchitectureScoreExplanation_aggregate {
  aggregate: ArchitectureScoreExplanation_aggregate_fields
  nodes: [ArchitectureScoreExplanation!]!
}
"""
aggregate fields of "ArchitectureScoreExplanation"
"""
type ArchitectureScoreExplanation_aggregate_fields {
  avg: ArchitectureScoreExplanation_avg_fields
  count(columns: [ArchitectureScoreExplanation_select_column!], distinct: Boolean): Int!
  max: ArchitectureScoreExplanation_max_fields
  min: ArchitectureScoreExplanation_min_fields
  stddev: ArchitectureScoreExplanation_stddev_fields
  stddev_pop: ArchitectureScoreExplanation_stddev_pop_fields
  stddev_samp: ArchitectureScoreExplanation_stddev_samp_fields
  sum: ArchitectureScoreExplanation_sum_fields
  var_pop: ArchitectureScoreExplanation_var_pop_fields
  var_samp: ArchitectureScoreExplanation_var_samp_fields
  variance: ArchitectureScoreExplanation_variance_fields
}
"""
order by aggregate values of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_aggregate_order_by {
  avg: ArchitectureScoreExplanation_avg_order_by
  count: order_by
  max: ArchitectureScoreExplanation_max_order_by
  min: ArchitectureScoreExplanation_min_order_by
  stddev: ArchitectureScoreExplanation_stddev_order_by
  stddev_pop: ArchitectureScoreExplanation_stddev_pop_order_by
  stddev_samp: ArchitectureScoreExplanation_stddev_samp_order_by
  sum: ArchitectureScoreExplanation_sum_order_by
  var_pop: ArchitectureScoreExplanation_var_pop_order_by
  var_samp: ArchitectureScoreExplanation_var_samp_order_by
  variance: ArchitectureScoreExplanation_variance_order_by
}
"""
input type for inserting array relation for remote table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_arr_rel_insert_input {
  data: [ArchitectureScoreExplanation_insert_input!]!
  "on conflict condition"
  on_conflict: ArchitectureScoreExplanation_on_conflict
}
"aggregate avg on columns"
type ArchitectureScoreExplanation_avg_fields {
  architecture_id: Float
  id: Float
  panel_id: Float
  satisfaction: Float
}
"""
order by avg() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_avg_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"""
Boolean expression to filter rows from the table "ArchitectureScoreExplanation". All fields are combined with a logical 'AND'.
"""
input ArchitectureScoreExplanation_bool_exp {
  Architecture: Architecture_bool_exp
  Stakeholder_Needs_Panel: Stakeholder_Needs_Panel_bool_exp
  _and: [ArchitectureScoreExplanation_bool_exp!]
  _not: ArchitectureScoreExplanation_bool_exp
  _or: [ArchitectureScoreExplanation_bool_exp!]
  architecture_id: Int_comparison_exp
  id: Int_comparison_exp
  panel_id: Int_comparison_exp
  satisfaction: float8_comparison_exp
}
"""
unique or primary key constraints on table "ArchitectureScoreExplanation"
"""
enum ArchitectureScoreExplanation_constraint {
  "unique or primary key constraint"
  ArchitectureScoreExplanation_pkey
}
"""
input type for incrementing numeric columns in table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_inc_input {
  architecture_id: Int
  id: Int
  panel_id: Int
  satisfaction: float8
}
"""
input type for inserting data into table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_insert_input {
  Architecture: Architecture_obj_rel_insert_input
  Stakeholder_Needs_Panel: Stakeholder_Needs_Panel_obj_rel_insert_input
  architecture_id: Int
  id: Int
  panel_id: Int
  satisfaction: float8
}
"aggregate max on columns"
type ArchitectureScoreExplanation_max_fields {
  architecture_id: Int
  id: Int
  panel_id: Int
  satisfaction: float8
}
"""
order by max() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_max_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"aggregate min on columns"
type ArchitectureScoreExplanation_min_fields {
  architecture_id: Int
  id: Int
  panel_id: Int
  satisfaction: float8
}
"""
order by min() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_min_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"""
response of any mutation on the table "ArchitectureScoreExplanation"
"""
type ArchitectureScoreExplanation_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [ArchitectureScoreExplanation!]!
}
"""
on conflict condition type for table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_on_conflict {
  constraint: ArchitectureScoreExplanation_constraint!
  update_columns: [ArchitectureScoreExplanation_update_column!]! = []
  where: ArchitectureScoreExplanation_bool_exp
}
"""
Ordering options when selecting data from "ArchitectureScoreExplanation".
"""
input ArchitectureScoreExplanation_order_by {
  Architecture: Architecture_order_by
  Stakeholder_Needs_Panel: Stakeholder_Needs_Panel_order_by
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"primary key columns input for table: ArchitectureScoreExplanation"
input ArchitectureScoreExplanation_pk_columns_input {
  id: Int!
}
"""
select columns of table "ArchitectureScoreExplanation"
"""
enum ArchitectureScoreExplanation_select_column {
  "column name"
  architecture_id
  "column name"
  id
  "column name"
  panel_id
  "column name"
  satisfaction
}
"""
input type for updating data in table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_set_input {
  architecture_id: Int
  id: Int
  panel_id: Int
  satisfaction: float8
}
"aggregate stddev on columns"
type ArchitectureScoreExplanation_stddev_fields {
  architecture_id: Float
  id: Float
  panel_id: Float
  satisfaction: Float
}
"""
order by stddev() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_stddev_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"aggregate stddev_pop on columns"
type ArchitectureScoreExplanation_stddev_pop_fields {
  architecture_id: Float
  id: Float
  panel_id: Float
  satisfaction: Float
}
"""
order by stddev_pop() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_stddev_pop_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"aggregate stddev_samp on columns"
type ArchitectureScoreExplanation_stddev_samp_fields {
  architecture_id: Float
  id: Float
  panel_id: Float
  satisfaction: Float
}
"""
order by stddev_samp() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_stddev_samp_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"aggregate sum on columns"
type ArchitectureScoreExplanation_sum_fields {
  architecture_id: Int
  id: Int
  panel_id: Int
  satisfaction: float8
}
"""
order by sum() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_sum_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"""
update columns of table "ArchitectureScoreExplanation"
"""
enum ArchitectureScoreExplanation_update_column {
  "column name"
  architecture_id
  "column name"
  id
  "column name"
  panel_id
  "column name"
  satisfaction
}
"aggregate var_pop on columns"
type ArchitectureScoreExplanation_var_pop_fields {
  architecture_id: Float
  id: Float
  panel_id: Float
  satisfaction: Float
}
"""
order by var_pop() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_var_pop_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"aggregate var_samp on columns"
type ArchitectureScoreExplanation_var_samp_fields {
  architecture_id: Float
  id: Float
  panel_id: Float
  satisfaction: Float
}
"""
order by var_samp() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_var_samp_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"aggregate variance on columns"
type ArchitectureScoreExplanation_variance_fields {
  architecture_id: Float
  id: Float
  panel_id: Float
  satisfaction: Float
}
"""
order by variance() on columns of table "ArchitectureScoreExplanation"
"""
input ArchitectureScoreExplanation_variance_order_by {
  architecture_id: order_by
  id: order_by
  panel_id: order_by
  satisfaction: order_by
}
"""
aggregated selection of "Architecture"
"""
type Architecture_aggregate {
  aggregate: Architecture_aggregate_fields
  nodes: [Architecture!]!
}
"""
aggregate fields of "Architecture"
"""
type Architecture_aggregate_fields {
  avg: Architecture_avg_fields
  count(columns: [Architecture_select_column!], distinct: Boolean): Int!
  max: Architecture_max_fields
  min: Architecture_min_fields
  stddev: Architecture_stddev_fields
  stddev_pop: Architecture_stddev_pop_fields
  stddev_samp: Architecture_stddev_samp_fields
  sum: Architecture_sum_fields
  var_pop: Architecture_var_pop_fields
  var_samp: Architecture_var_samp_fields
  variance: Architecture_variance_fields
}
"""
order by aggregate values of table "Architecture"
"""
input Architecture_aggregate_order_by {
  avg: Architecture_avg_order_by
  count: order_by
  max: Architecture_max_order_by
  min: Architecture_min_order_by
  stddev: Architecture_stddev_order_by
  stddev_pop: Architecture_stddev_pop_order_by
  stddev_samp: Architecture_stddev_samp_order_by
  sum: Architecture_sum_order_by
  var_pop: Architecture_var_pop_order_by
  var_samp: Architecture_var_samp_order_by
  variance: Architecture_variance_order_by
}
"""
input type for inserting array relation for remote table "Architecture"
"""
input Architecture_arr_rel_insert_input {
  data: [Architecture_insert_input!]!
  "on conflict condition"
  on_conflict: Architecture_on_conflict
}
"aggregate avg on columns"
type Architecture_avg_fields {
  cost: Float
  data_continuity: Float
  dataset_id: Float
  eval_idx: Float
  fairness: Float
  id: Float
  problem_id: Float
  programmatic_risk: Float
  science: Float
  user_id: Float
}
"""
order by avg() on columns of table "Architecture"
"""
input Architecture_avg_order_by {
  cost: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"""
Boolean expression to filter rows from the table "Architecture". All fields are combined with a logical 'AND'.
"""
input Architecture_bool_exp {
  ArchitectureCostInformations: ArchitectureCostInformation_bool_exp
  ArchitectureScoreExplanations: ArchitectureScoreExplanation_bool_exp
  Dataset: Dataset_bool_exp
  ObjectiveScoreExplanations: ObjectiveScoreExplanation_bool_exp
  PanelScoreExplanations: PanelScoreExplanation_bool_exp
  Problem: Problem_bool_exp
  SubobjectiveScoreExplanations: SubobjectiveScoreExplanation_bool_exp
  _and: [Architecture_bool_exp!]
  _not: Architecture_bool_exp
  _or: [Architecture_bool_exp!]
  auth_user: auth_user_bool_exp
  cost: float8_comparison_exp
  critique: String_comparison_exp
  data_continuity: float8_comparison_exp
  dataset_id: Int_comparison_exp
  eval_idx: Int_comparison_exp
  eval_status: Boolean_comparison_exp
  fairness: float8_comparison_exp
  ga: Boolean_comparison_exp
  id: Int_comparison_exp
  improve_hv: Boolean_comparison_exp
  input: String_comparison_exp
  problem_id: Int_comparison_exp
  programmatic_risk: float8_comparison_exp
  science: float8_comparison_exp
  user_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Architecture"
"""
enum Architecture_constraint {
  "unique or primary key constraint"
  Architecture_pkey
}
"""
input type for incrementing numeric columns in table "Architecture"
"""
input Architecture_inc_input {
  cost: float8
  data_continuity: float8
  dataset_id: Int
  eval_idx: Int
  fairness: float8
  id: Int
  problem_id: Int
  programmatic_risk: float8
  science: float8
  user_id: Int
}
"""
input type for inserting data into table "Architecture"
"""
input Architecture_insert_input {
  ArchitectureCostInformations: ArchitectureCostInformation_arr_rel_insert_input
  ArchitectureScoreExplanations: ArchitectureScoreExplanation_arr_rel_insert_input
  Dataset: Dataset_obj_rel_insert_input
  ObjectiveScoreExplanations: ObjectiveScoreExplanation_arr_rel_insert_input
  PanelScoreExplanations: PanelScoreExplanation_arr_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  SubobjectiveScoreExplanations: SubobjectiveScoreExplanation_arr_rel_insert_input
  auth_user: auth_user_obj_rel_insert_input
  cost: float8
  critique: String
  data_continuity: float8
  dataset_id: Int
  eval_idx: Int
  eval_status: Boolean
  fairness: float8
  ga: Boolean
  id: Int
  improve_hv: Boolean
  input: String
  problem_id: Int
  programmatic_risk: float8
  science: float8
  user_id: Int
}
"aggregate max on columns"
type Architecture_max_fields {
  cost: float8
  critique: String
  data_continuity: float8
  dataset_id: Int
  eval_idx: Int
  fairness: float8
  id: Int
  input: String
  problem_id: Int
  programmatic_risk: float8
  science: float8
  user_id: Int
}
"""
order by max() on columns of table "Architecture"
"""
input Architecture_max_order_by {
  cost: order_by
  critique: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  input: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"aggregate min on columns"
type Architecture_min_fields {
  cost: float8
  critique: String
  data_continuity: float8
  dataset_id: Int
  eval_idx: Int
  fairness: float8
  id: Int
  input: String
  problem_id: Int
  programmatic_risk: float8
  science: float8
  user_id: Int
}
"""
order by min() on columns of table "Architecture"
"""
input Architecture_min_order_by {
  cost: order_by
  critique: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  input: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"""
response of any mutation on the table "Architecture"
"""
type Architecture_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Architecture!]!
}
"""
input type for inserting object relation for remote table "Architecture"
"""
input Architecture_obj_rel_insert_input {
  data: Architecture_insert_input!
  "on conflict condition"
  on_conflict: Architecture_on_conflict
}
"""
on conflict condition type for table "Architecture"
"""
input Architecture_on_conflict {
  constraint: Architecture_constraint!
  update_columns: [Architecture_update_column!]! = []
  where: Architecture_bool_exp
}
"""
Ordering options when selecting data from "Architecture".
"""
input Architecture_order_by {
  ArchitectureCostInformations_aggregate: ArchitectureCostInformation_aggregate_order_by
  ArchitectureScoreExplanations_aggregate: ArchitectureScoreExplanation_aggregate_order_by
  Dataset: Dataset_order_by
  ObjectiveScoreExplanations_aggregate: ObjectiveScoreExplanation_aggregate_order_by
  PanelScoreExplanations_aggregate: PanelScoreExplanation_aggregate_order_by
  Problem: Problem_order_by
  SubobjectiveScoreExplanations_aggregate: SubobjectiveScoreExplanation_aggregate_order_by
  auth_user: auth_user_order_by
  cost: order_by
  critique: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  eval_status: order_by
  fairness: order_by
  ga: order_by
  id: order_by
  improve_hv: order_by
  input: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"primary key columns input for table: Architecture"
input Architecture_pk_columns_input {
  id: Int!
}
"""
select columns of table "Architecture"
"""
enum Architecture_select_column {
  "column name"
  cost
  "column name"
  critique
  "column name"
  data_continuity
  "column name"
  dataset_id
  "column name"
  eval_idx
  "column name"
  eval_status
  "column name"
  fairness
  "column name"
  ga
  "column name"
  id
  "column name"
  improve_hv
  "column name"
  input
  "column name"
  problem_id
  "column name"
  programmatic_risk
  "column name"
  science
  "column name"
  user_id
}
"""
input type for updating data in table "Architecture"
"""
input Architecture_set_input {
  cost: float8
  critique: String
  data_continuity: float8
  dataset_id: Int
  eval_idx: Int
  eval_status: Boolean
  fairness: float8
  ga: Boolean
  id: Int
  improve_hv: Boolean
  input: String
  problem_id: Int
  programmatic_risk: float8
  science: float8
  user_id: Int
}
"aggregate stddev on columns"
type Architecture_stddev_fields {
  cost: Float
  data_continuity: Float
  dataset_id: Float
  eval_idx: Float
  fairness: Float
  id: Float
  problem_id: Float
  programmatic_risk: Float
  science: Float
  user_id: Float
}
"""
order by stddev() on columns of table "Architecture"
"""
input Architecture_stddev_order_by {
  cost: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"aggregate stddev_pop on columns"
type Architecture_stddev_pop_fields {
  cost: Float
  data_continuity: Float
  dataset_id: Float
  eval_idx: Float
  fairness: Float
  id: Float
  problem_id: Float
  programmatic_risk: Float
  science: Float
  user_id: Float
}
"""
order by stddev_pop() on columns of table "Architecture"
"""
input Architecture_stddev_pop_order_by {
  cost: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"aggregate stddev_samp on columns"
type Architecture_stddev_samp_fields {
  cost: Float
  data_continuity: Float
  dataset_id: Float
  eval_idx: Float
  fairness: Float
  id: Float
  problem_id: Float
  programmatic_risk: Float
  science: Float
  user_id: Float
}
"""
order by stddev_samp() on columns of table "Architecture"
"""
input Architecture_stddev_samp_order_by {
  cost: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"aggregate sum on columns"
type Architecture_sum_fields {
  cost: float8
  data_continuity: float8
  dataset_id: Int
  eval_idx: Int
  fairness: float8
  id: Int
  problem_id: Int
  programmatic_risk: float8
  science: float8
  user_id: Int
}
"""
order by sum() on columns of table "Architecture"
"""
input Architecture_sum_order_by {
  cost: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"""
update columns of table "Architecture"
"""
enum Architecture_update_column {
  "column name"
  cost
  "column name"
  critique
  "column name"
  data_continuity
  "column name"
  dataset_id
  "column name"
  eval_idx
  "column name"
  eval_status
  "column name"
  fairness
  "column name"
  ga
  "column name"
  id
  "column name"
  improve_hv
  "column name"
  input
  "column name"
  problem_id
  "column name"
  programmatic_risk
  "column name"
  science
  "column name"
  user_id
}
"aggregate var_pop on columns"
type Architecture_var_pop_fields {
  cost: Float
  data_continuity: Float
  dataset_id: Float
  eval_idx: Float
  fairness: Float
  id: Float
  problem_id: Float
  programmatic_risk: Float
  science: Float
  user_id: Float
}
"""
order by var_pop() on columns of table "Architecture"
"""
input Architecture_var_pop_order_by {
  cost: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"aggregate var_samp on columns"
type Architecture_var_samp_fields {
  cost: Float
  data_continuity: Float
  dataset_id: Float
  eval_idx: Float
  fairness: Float
  id: Float
  problem_id: Float
  programmatic_risk: Float
  science: Float
  user_id: Float
}
"""
order by var_samp() on columns of table "Architecture"
"""
input Architecture_var_samp_order_by {
  cost: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"aggregate variance on columns"
type Architecture_variance_fields {
  cost: Float
  data_continuity: Float
  dataset_id: Float
  eval_idx: Float
  fairness: Float
  id: Float
  problem_id: Float
  programmatic_risk: Float
  science: Float
  user_id: Float
}
"""
order by variance() on columns of table "Architecture"
"""
input Architecture_variance_order_by {
  cost: order_by
  data_continuity: order_by
  dataset_id: order_by
  eval_idx: order_by
  fairness: order_by
  id: order_by
  problem_id: order_by
  programmatic_risk: order_by
  science: order_by
  user_id: order_by
}
"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}
"""
columns and relationships of "Dataset"
"""
type Dataset {
  "An array relationship"
  Architectures("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): [Architecture!]!
  "An aggregate relationship"
  Architectures_aggregate("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): Architecture_aggregate!
  "An object relationship"
  Group: Group
  "An object relationship"
  Problem: Problem
  "An object relationship"
  auth_user: auth_user
  group_id: Int
  id: Int!
  name: String
  problem_id: Int
  user_id: Int
}
"""
aggregated selection of "Dataset"
"""
type Dataset_aggregate {
  aggregate: Dataset_aggregate_fields
  nodes: [Dataset!]!
}
"""
aggregate fields of "Dataset"
"""
type Dataset_aggregate_fields {
  avg: Dataset_avg_fields
  count(columns: [Dataset_select_column!], distinct: Boolean): Int!
  max: Dataset_max_fields
  min: Dataset_min_fields
  stddev: Dataset_stddev_fields
  stddev_pop: Dataset_stddev_pop_fields
  stddev_samp: Dataset_stddev_samp_fields
  sum: Dataset_sum_fields
  var_pop: Dataset_var_pop_fields
  var_samp: Dataset_var_samp_fields
  variance: Dataset_variance_fields
}
"""
order by aggregate values of table "Dataset"
"""
input Dataset_aggregate_order_by {
  avg: Dataset_avg_order_by
  count: order_by
  max: Dataset_max_order_by
  min: Dataset_min_order_by
  stddev: Dataset_stddev_order_by
  stddev_pop: Dataset_stddev_pop_order_by
  stddev_samp: Dataset_stddev_samp_order_by
  sum: Dataset_sum_order_by
  var_pop: Dataset_var_pop_order_by
  var_samp: Dataset_var_samp_order_by
  variance: Dataset_variance_order_by
}
"""
input type for inserting array relation for remote table "Dataset"
"""
input Dataset_arr_rel_insert_input {
  data: [Dataset_insert_input!]!
  "on conflict condition"
  on_conflict: Dataset_on_conflict
}
"aggregate avg on columns"
type Dataset_avg_fields {
  group_id: Float
  id: Float
  problem_id: Float
  user_id: Float
}
"""
order by avg() on columns of table "Dataset"
"""
input Dataset_avg_order_by {
  group_id: order_by
  id: order_by
  problem_id: order_by
  user_id: order_by
}
"""
Boolean expression to filter rows from the table "Dataset". All fields are combined with a logical 'AND'.
"""
input Dataset_bool_exp {
  Architectures: Architecture_bool_exp
  Group: Group_bool_exp
  Problem: Problem_bool_exp
  _and: [Dataset_bool_exp!]
  _not: Dataset_bool_exp
  _or: [Dataset_bool_exp!]
  auth_user: auth_user_bool_exp
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  problem_id: Int_comparison_exp
  user_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Dataset"
"""
enum Dataset_constraint {
  "unique or primary key constraint"
  Dataset_pkey
}
"""
input type for incrementing numeric columns in table "Dataset"
"""
input Dataset_inc_input {
  group_id: Int
  id: Int
  problem_id: Int
  user_id: Int
}
"""
input type for inserting data into table "Dataset"
"""
input Dataset_insert_input {
  Architectures: Architecture_arr_rel_insert_input
  Group: Group_obj_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  auth_user: auth_user_obj_rel_insert_input
  group_id: Int
  id: Int
  name: String
  problem_id: Int
  user_id: Int
}
"aggregate max on columns"
type Dataset_max_fields {
  group_id: Int
  id: Int
  name: String
  problem_id: Int
  user_id: Int
}
"""
order by max() on columns of table "Dataset"
"""
input Dataset_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  problem_id: order_by
  user_id: order_by
}
"aggregate min on columns"
type Dataset_min_fields {
  group_id: Int
  id: Int
  name: String
  problem_id: Int
  user_id: Int
}
"""
order by min() on columns of table "Dataset"
"""
input Dataset_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  problem_id: order_by
  user_id: order_by
}
"""
response of any mutation on the table "Dataset"
"""
type Dataset_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Dataset!]!
}
"""
input type for inserting object relation for remote table "Dataset"
"""
input Dataset_obj_rel_insert_input {
  data: Dataset_insert_input!
  "on conflict condition"
  on_conflict: Dataset_on_conflict
}
"""
on conflict condition type for table "Dataset"
"""
input Dataset_on_conflict {
  constraint: Dataset_constraint!
  update_columns: [Dataset_update_column!]! = []
  where: Dataset_bool_exp
}
"""
Ordering options when selecting data from "Dataset".
"""
input Dataset_order_by {
  Architectures_aggregate: Architecture_aggregate_order_by
  Group: Group_order_by
  Problem: Problem_order_by
  auth_user: auth_user_order_by
  group_id: order_by
  id: order_by
  name: order_by
  problem_id: order_by
  user_id: order_by
}
"primary key columns input for table: Dataset"
input Dataset_pk_columns_input {
  id: Int!
}
"""
select columns of table "Dataset"
"""
enum Dataset_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  problem_id
  "column name"
  user_id
}
"""
input type for updating data in table "Dataset"
"""
input Dataset_set_input {
  group_id: Int
  id: Int
  name: String
  problem_id: Int
  user_id: Int
}
"aggregate stddev on columns"
type Dataset_stddev_fields {
  group_id: Float
  id: Float
  problem_id: Float
  user_id: Float
}
"""
order by stddev() on columns of table "Dataset"
"""
input Dataset_stddev_order_by {
  group_id: order_by
  id: order_by
  problem_id: order_by
  user_id: order_by
}
"aggregate stddev_pop on columns"
type Dataset_stddev_pop_fields {
  group_id: Float
  id: Float
  problem_id: Float
  user_id: Float
}
"""
order by stddev_pop() on columns of table "Dataset"
"""
input Dataset_stddev_pop_order_by {
  group_id: order_by
  id: order_by
  problem_id: order_by
  user_id: order_by
}
"aggregate stddev_samp on columns"
type Dataset_stddev_samp_fields {
  group_id: Float
  id: Float
  problem_id: Float
  user_id: Float
}
"""
order by stddev_samp() on columns of table "Dataset"
"""
input Dataset_stddev_samp_order_by {
  group_id: order_by
  id: order_by
  problem_id: order_by
  user_id: order_by
}
"aggregate sum on columns"
type Dataset_sum_fields {
  group_id: Int
  id: Int
  problem_id: Int
  user_id: Int
}
"""
order by sum() on columns of table "Dataset"
"""
input Dataset_sum_order_by {
  group_id: order_by
  id: order_by
  problem_id: order_by
  user_id: order_by
}
"""
update columns of table "Dataset"
"""
enum Dataset_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  problem_id
  "column name"
  user_id
}
"aggregate var_pop on columns"
type Dataset_var_pop_fields {
  group_id: Float
  id: Float
  problem_id: Float
  user_id: Float
}
"""
order by var_pop() on columns of table "Dataset"
"""
input Dataset_var_pop_order_by {
  group_id: order_by
  id: order_by
  problem_id: order_by
  user_id: order_by
}
"aggregate var_samp on columns"
type Dataset_var_samp_fields {
  group_id: Float
  id: Float
  problem_id: Float
  user_id: Float
}
"""
order by var_samp() on columns of table "Dataset"
"""
input Dataset_var_samp_order_by {
  group_id: order_by
  id: order_by
  problem_id: order_by
  user_id: order_by
}
"aggregate variance on columns"
type Dataset_variance_fields {
  group_id: Float
  id: Float
  problem_id: Float
  user_id: Float
}
"""
order by variance() on columns of table "Dataset"
"""
input Dataset_variance_order_by {
  group_id: order_by
  id: order_by
  problem_id: order_by
  user_id: order_by
}
"""
columns and relationships of "EDL_edlcontext"
"""
type EDL_edlcontext {
  current_mat_file: String!
  current_mat_file_for_print: String!
  current_scorecard: String!
  current_scorecard_file: String!
  "An object relationship"
  daphne_context_userinformation: daphne_context_userinformation!
  id: Int!
  user_information_id: Int!
}
"""
aggregated selection of "EDL_edlcontext"
"""
type EDL_edlcontext_aggregate {
  aggregate: EDL_edlcontext_aggregate_fields
  nodes: [EDL_edlcontext!]!
}
"""
aggregate fields of "EDL_edlcontext"
"""
type EDL_edlcontext_aggregate_fields {
  avg: EDL_edlcontext_avg_fields
  count(columns: [EDL_edlcontext_select_column!], distinct: Boolean): Int!
  max: EDL_edlcontext_max_fields
  min: EDL_edlcontext_min_fields
  stddev: EDL_edlcontext_stddev_fields
  stddev_pop: EDL_edlcontext_stddev_pop_fields
  stddev_samp: EDL_edlcontext_stddev_samp_fields
  sum: EDL_edlcontext_sum_fields
  var_pop: EDL_edlcontext_var_pop_fields
  var_samp: EDL_edlcontext_var_samp_fields
  variance: EDL_edlcontext_variance_fields
}
"aggregate avg on columns"
type EDL_edlcontext_avg_fields {
  id: Float
  user_information_id: Float
}
"""
Boolean expression to filter rows from the table "EDL_edlcontext". All fields are combined with a logical 'AND'.
"""
input EDL_edlcontext_bool_exp {
  _and: [EDL_edlcontext_bool_exp!]
  _not: EDL_edlcontext_bool_exp
  _or: [EDL_edlcontext_bool_exp!]
  current_mat_file: String_comparison_exp
  current_mat_file_for_print: String_comparison_exp
  current_scorecard: String_comparison_exp
  current_scorecard_file: String_comparison_exp
  daphne_context_userinformation: daphne_context_userinformation_bool_exp
  id: Int_comparison_exp
  user_information_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "EDL_edlcontext"
"""
enum EDL_edlcontext_constraint {
  "unique or primary key constraint"
  EDL_edlcontext_pkey
  "unique or primary key constraint"
  EDL_edlcontext_user_information_id_key
}
"""
input type for incrementing numeric columns in table "EDL_edlcontext"
"""
input EDL_edlcontext_inc_input {
  id: Int
  user_information_id: Int
}
"""
input type for inserting data into table "EDL_edlcontext"
"""
input EDL_edlcontext_insert_input {
  current_mat_file: String
  current_mat_file_for_print: String
  current_scorecard: String
  current_scorecard_file: String
  daphne_context_userinformation: daphne_context_userinformation_obj_rel_insert_input
  id: Int
  user_information_id: Int
}
"aggregate max on columns"
type EDL_edlcontext_max_fields {
  current_mat_file: String
  current_mat_file_for_print: String
  current_scorecard: String
  current_scorecard_file: String
  id: Int
  user_information_id: Int
}
"aggregate min on columns"
type EDL_edlcontext_min_fields {
  current_mat_file: String
  current_mat_file_for_print: String
  current_scorecard: String
  current_scorecard_file: String
  id: Int
  user_information_id: Int
}
"""
response of any mutation on the table "EDL_edlcontext"
"""
type EDL_edlcontext_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [EDL_edlcontext!]!
}
"""
input type for inserting object relation for remote table "EDL_edlcontext"
"""
input EDL_edlcontext_obj_rel_insert_input {
  data: EDL_edlcontext_insert_input!
  "on conflict condition"
  on_conflict: EDL_edlcontext_on_conflict
}
"""
on conflict condition type for table "EDL_edlcontext"
"""
input EDL_edlcontext_on_conflict {
  constraint: EDL_edlcontext_constraint!
  update_columns: [EDL_edlcontext_update_column!]! = []
  where: EDL_edlcontext_bool_exp
}
"""
Ordering options when selecting data from "EDL_edlcontext".
"""
input EDL_edlcontext_order_by {
  current_mat_file: order_by
  current_mat_file_for_print: order_by
  current_scorecard: order_by
  current_scorecard_file: order_by
  daphne_context_userinformation: daphne_context_userinformation_order_by
  id: order_by
  user_information_id: order_by
}
"primary key columns input for table: EDL_edlcontext"
input EDL_edlcontext_pk_columns_input {
  id: Int!
}
"""
select columns of table "EDL_edlcontext"
"""
enum EDL_edlcontext_select_column {
  "column name"
  current_mat_file
  "column name"
  current_mat_file_for_print
  "column name"
  current_scorecard
  "column name"
  current_scorecard_file
  "column name"
  id
  "column name"
  user_information_id
}
"""
input type for updating data in table "EDL_edlcontext"
"""
input EDL_edlcontext_set_input {
  current_mat_file: String
  current_mat_file_for_print: String
  current_scorecard: String
  current_scorecard_file: String
  id: Int
  user_information_id: Int
}
"aggregate stddev on columns"
type EDL_edlcontext_stddev_fields {
  id: Float
  user_information_id: Float
}
"aggregate stddev_pop on columns"
type EDL_edlcontext_stddev_pop_fields {
  id: Float
  user_information_id: Float
}
"aggregate stddev_samp on columns"
type EDL_edlcontext_stddev_samp_fields {
  id: Float
  user_information_id: Float
}
"aggregate sum on columns"
type EDL_edlcontext_sum_fields {
  id: Int
  user_information_id: Int
}
"""
update columns of table "EDL_edlcontext"
"""
enum EDL_edlcontext_update_column {
  "column name"
  current_mat_file
  "column name"
  current_mat_file_for_print
  "column name"
  current_scorecard
  "column name"
  current_scorecard_file
  "column name"
  id
  "column name"
  user_information_id
}
"aggregate var_pop on columns"
type EDL_edlcontext_var_pop_fields {
  id: Float
  user_information_id: Float
}
"aggregate var_samp on columns"
type EDL_edlcontext_var_samp_fields {
  id: Float
  user_information_id: Float
}
"aggregate variance on columns"
type EDL_edlcontext_variance_fields {
  id: Float
  user_information_id: Float
}
"""
columns and relationships of "EOSS_activecontext"
"""
type EOSS_activecontext {
  "An object relationship"
  EOSS_eosscontext: EOSS_eosscontext!
  check_for_diversity: Boolean!
  eosscontext_id: Int!
  id: Int!
  show_arch_suggestions: Boolean!
  show_background_search_feedback: Boolean!
}
"""
aggregated selection of "EOSS_activecontext"
"""
type EOSS_activecontext_aggregate {
  aggregate: EOSS_activecontext_aggregate_fields
  nodes: [EOSS_activecontext!]!
}
"""
aggregate fields of "EOSS_activecontext"
"""
type EOSS_activecontext_aggregate_fields {
  avg: EOSS_activecontext_avg_fields
  count(columns: [EOSS_activecontext_select_column!], distinct: Boolean): Int!
  max: EOSS_activecontext_max_fields
  min: EOSS_activecontext_min_fields
  stddev: EOSS_activecontext_stddev_fields
  stddev_pop: EOSS_activecontext_stddev_pop_fields
  stddev_samp: EOSS_activecontext_stddev_samp_fields
  sum: EOSS_activecontext_sum_fields
  var_pop: EOSS_activecontext_var_pop_fields
  var_samp: EOSS_activecontext_var_samp_fields
  variance: EOSS_activecontext_variance_fields
}
"aggregate avg on columns"
type EOSS_activecontext_avg_fields {
  eosscontext_id: Float
  id: Float
}
"""
Boolean expression to filter rows from the table "EOSS_activecontext". All fields are combined with a logical 'AND'.
"""
input EOSS_activecontext_bool_exp {
  EOSS_eosscontext: EOSS_eosscontext_bool_exp
  _and: [EOSS_activecontext_bool_exp!]
  _not: EOSS_activecontext_bool_exp
  _or: [EOSS_activecontext_bool_exp!]
  check_for_diversity: Boolean_comparison_exp
  eosscontext_id: Int_comparison_exp
  id: Int_comparison_exp
  show_arch_suggestions: Boolean_comparison_exp
  show_background_search_feedback: Boolean_comparison_exp
}
"""
unique or primary key constraints on table "EOSS_activecontext"
"""
enum EOSS_activecontext_constraint {
  "unique or primary key constraint"
  EOSS_activecontext_eosscontext_id_key
  "unique or primary key constraint"
  EOSS_activecontext_pkey
}
"""
input type for incrementing numeric columns in table "EOSS_activecontext"
"""
input EOSS_activecontext_inc_input {
  eosscontext_id: Int
  id: Int
}
"""
input type for inserting data into table "EOSS_activecontext"
"""
input EOSS_activecontext_insert_input {
  EOSS_eosscontext: EOSS_eosscontext_obj_rel_insert_input
  check_for_diversity: Boolean
  eosscontext_id: Int
  id: Int
  show_arch_suggestions: Boolean
  show_background_search_feedback: Boolean
}
"aggregate max on columns"
type EOSS_activecontext_max_fields {
  eosscontext_id: Int
  id: Int
}
"aggregate min on columns"
type EOSS_activecontext_min_fields {
  eosscontext_id: Int
  id: Int
}
"""
response of any mutation on the table "EOSS_activecontext"
"""
type EOSS_activecontext_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [EOSS_activecontext!]!
}
"""
input type for inserting object relation for remote table "EOSS_activecontext"
"""
input EOSS_activecontext_obj_rel_insert_input {
  data: EOSS_activecontext_insert_input!
  "on conflict condition"
  on_conflict: EOSS_activecontext_on_conflict
}
"""
on conflict condition type for table "EOSS_activecontext"
"""
input EOSS_activecontext_on_conflict {
  constraint: EOSS_activecontext_constraint!
  update_columns: [EOSS_activecontext_update_column!]! = []
  where: EOSS_activecontext_bool_exp
}
"""
Ordering options when selecting data from "EOSS_activecontext".
"""
input EOSS_activecontext_order_by {
  EOSS_eosscontext: EOSS_eosscontext_order_by
  check_for_diversity: order_by
  eosscontext_id: order_by
  id: order_by
  show_arch_suggestions: order_by
  show_background_search_feedback: order_by
}
"primary key columns input for table: EOSS_activecontext"
input EOSS_activecontext_pk_columns_input {
  id: Int!
}
"""
select columns of table "EOSS_activecontext"
"""
enum EOSS_activecontext_select_column {
  "column name"
  check_for_diversity
  "column name"
  eosscontext_id
  "column name"
  id
  "column name"
  show_arch_suggestions
  "column name"
  show_background_search_feedback
}
"""
input type for updating data in table "EOSS_activecontext"
"""
input EOSS_activecontext_set_input {
  check_for_diversity: Boolean
  eosscontext_id: Int
  id: Int
  show_arch_suggestions: Boolean
  show_background_search_feedback: Boolean
}
"aggregate stddev on columns"
type EOSS_activecontext_stddev_fields {
  eosscontext_id: Float
  id: Float
}
"aggregate stddev_pop on columns"
type EOSS_activecontext_stddev_pop_fields {
  eosscontext_id: Float
  id: Float
}
"aggregate stddev_samp on columns"
type EOSS_activecontext_stddev_samp_fields {
  eosscontext_id: Float
  id: Float
}
"aggregate sum on columns"
type EOSS_activecontext_sum_fields {
  eosscontext_id: Int
  id: Int
}
"""
update columns of table "EOSS_activecontext"
"""
enum EOSS_activecontext_update_column {
  "column name"
  check_for_diversity
  "column name"
  eosscontext_id
  "column name"
  id
  "column name"
  show_arch_suggestions
  "column name"
  show_background_search_feedback
}
"aggregate var_pop on columns"
type EOSS_activecontext_var_pop_fields {
  eosscontext_id: Float
  id: Float
}
"aggregate var_samp on columns"
type EOSS_activecontext_var_samp_fields {
  eosscontext_id: Float
  id: Float
}
"aggregate variance on columns"
type EOSS_activecontext_variance_fields {
  eosscontext_id: Float
  id: Float
}
"""
columns and relationships of "EOSS_engineercontext"
"""
type EOSS_engineercontext {
  "An object relationship"
  EOSS_eossdialoguecontext: EOSS_eossdialoguecontext!
  eossdialoguecontext_id: Int!
  id: Int!
  instrument_parameter: String
  vassar_instrument: String
  vassar_measurement: String
}
"""
aggregated selection of "EOSS_engineercontext"
"""
type EOSS_engineercontext_aggregate {
  aggregate: EOSS_engineercontext_aggregate_fields
  nodes: [EOSS_engineercontext!]!
}
"""
aggregate fields of "EOSS_engineercontext"
"""
type EOSS_engineercontext_aggregate_fields {
  avg: EOSS_engineercontext_avg_fields
  count(columns: [EOSS_engineercontext_select_column!], distinct: Boolean): Int!
  max: EOSS_engineercontext_max_fields
  min: EOSS_engineercontext_min_fields
  stddev: EOSS_engineercontext_stddev_fields
  stddev_pop: EOSS_engineercontext_stddev_pop_fields
  stddev_samp: EOSS_engineercontext_stddev_samp_fields
  sum: EOSS_engineercontext_sum_fields
  var_pop: EOSS_engineercontext_var_pop_fields
  var_samp: EOSS_engineercontext_var_samp_fields
  variance: EOSS_engineercontext_variance_fields
}
"aggregate avg on columns"
type EOSS_engineercontext_avg_fields {
  eossdialoguecontext_id: Float
  id: Float
}
"""
Boolean expression to filter rows from the table "EOSS_engineercontext". All fields are combined with a logical 'AND'.
"""
input EOSS_engineercontext_bool_exp {
  EOSS_eossdialoguecontext: EOSS_eossdialoguecontext_bool_exp
  _and: [EOSS_engineercontext_bool_exp!]
  _not: EOSS_engineercontext_bool_exp
  _or: [EOSS_engineercontext_bool_exp!]
  eossdialoguecontext_id: Int_comparison_exp
  id: Int_comparison_exp
  instrument_parameter: String_comparison_exp
  vassar_instrument: String_comparison_exp
  vassar_measurement: String_comparison_exp
}
"""
unique or primary key constraints on table "EOSS_engineercontext"
"""
enum EOSS_engineercontext_constraint {
  "unique or primary key constraint"
  EOSS_engineercontext_eossdialoguecontext_id_key
  "unique or primary key constraint"
  EOSS_engineercontext_pkey
}
"""
input type for incrementing numeric columns in table "EOSS_engineercontext"
"""
input EOSS_engineercontext_inc_input {
  eossdialoguecontext_id: Int
  id: Int
}
"""
input type for inserting data into table "EOSS_engineercontext"
"""
input EOSS_engineercontext_insert_input {
  EOSS_eossdialoguecontext: EOSS_eossdialoguecontext_obj_rel_insert_input
  eossdialoguecontext_id: Int
  id: Int
  instrument_parameter: String
  vassar_instrument: String
  vassar_measurement: String
}
"aggregate max on columns"
type EOSS_engineercontext_max_fields {
  eossdialoguecontext_id: Int
  id: Int
  instrument_parameter: String
  vassar_instrument: String
  vassar_measurement: String
}
"aggregate min on columns"
type EOSS_engineercontext_min_fields {
  eossdialoguecontext_id: Int
  id: Int
  instrument_parameter: String
  vassar_instrument: String
  vassar_measurement: String
}
"""
response of any mutation on the table "EOSS_engineercontext"
"""
type EOSS_engineercontext_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [EOSS_engineercontext!]!
}
"""
input type for inserting object relation for remote table "EOSS_engineercontext"
"""
input EOSS_engineercontext_obj_rel_insert_input {
  data: EOSS_engineercontext_insert_input!
  "on conflict condition"
  on_conflict: EOSS_engineercontext_on_conflict
}
"""
on conflict condition type for table "EOSS_engineercontext"
"""
input EOSS_engineercontext_on_conflict {
  constraint: EOSS_engineercontext_constraint!
  update_columns: [EOSS_engineercontext_update_column!]! = []
  where: EOSS_engineercontext_bool_exp
}
"""
Ordering options when selecting data from "EOSS_engineercontext".
"""
input EOSS_engineercontext_order_by {
  EOSS_eossdialoguecontext: EOSS_eossdialoguecontext_order_by
  eossdialoguecontext_id: order_by
  id: order_by
  instrument_parameter: order_by
  vassar_instrument: order_by
  vassar_measurement: order_by
}
"primary key columns input for table: EOSS_engineercontext"
input EOSS_engineercontext_pk_columns_input {
  id: Int!
}
"""
select columns of table "EOSS_engineercontext"
"""
enum EOSS_engineercontext_select_column {
  "column name"
  eossdialoguecontext_id
  "column name"
  id
  "column name"
  instrument_parameter
  "column name"
  vassar_instrument
  "column name"
  vassar_measurement
}
"""
input type for updating data in table "EOSS_engineercontext"
"""
input EOSS_engineercontext_set_input {
  eossdialoguecontext_id: Int
  id: Int
  instrument_parameter: String
  vassar_instrument: String
  vassar_measurement: String
}
"aggregate stddev on columns"
type EOSS_engineercontext_stddev_fields {
  eossdialoguecontext_id: Float
  id: Float
}
"aggregate stddev_pop on columns"
type EOSS_engineercontext_stddev_pop_fields {
  eossdialoguecontext_id: Float
  id: Float
}
"aggregate stddev_samp on columns"
type EOSS_engineercontext_stddev_samp_fields {
  eossdialoguecontext_id: Float
  id: Float
}
"aggregate sum on columns"
type EOSS_engineercontext_sum_fields {
  eossdialoguecontext_id: Int
  id: Int
}
"""
update columns of table "EOSS_engineercontext"
"""
enum EOSS_engineercontext_update_column {
  "column name"
  eossdialoguecontext_id
  "column name"
  id
  "column name"
  instrument_parameter
  "column name"
  vassar_instrument
  "column name"
  vassar_measurement
}
"aggregate var_pop on columns"
type EOSS_engineercontext_var_pop_fields {
  eossdialoguecontext_id: Float
  id: Float
}
"aggregate var_samp on columns"
type EOSS_engineercontext_var_samp_fields {
  eossdialoguecontext_id: Float
  id: Float
}
"aggregate variance on columns"
type EOSS_engineercontext_variance_fields {
  eossdialoguecontext_id: Float
  id: Float
}
"""
columns and relationships of "EOSS_eosscontext"
"""
type EOSS_eosscontext {
  "An object relationship"
  EOSS_activecontext: EOSS_activecontext
  added_archs_count: Int!
  "An object relationship"
  daphne_context_userinformation: daphne_context_userinformation!
  dataset_id: Int!
  ga_information("JSON select path" path: String): jsonb!
  ga_request_queue_url: String
  ga_response_queue_url: String
  group_id: Int!
  id: Int!
  last_arch_id: Int!
  problem_id: Int!
  selected_arch_id: Int!
  user_information_id: Int!
  vassar_information("JSON select path" path: String): jsonb!
  vassar_request_queue_url: String
  vassar_response_queue_url: String
}
"""
aggregated selection of "EOSS_eosscontext"
"""
type EOSS_eosscontext_aggregate {
  aggregate: EOSS_eosscontext_aggregate_fields
  nodes: [EOSS_eosscontext!]!
}
"""
aggregate fields of "EOSS_eosscontext"
"""
type EOSS_eosscontext_aggregate_fields {
  avg: EOSS_eosscontext_avg_fields
  count(columns: [EOSS_eosscontext_select_column!], distinct: Boolean): Int!
  max: EOSS_eosscontext_max_fields
  min: EOSS_eosscontext_min_fields
  stddev: EOSS_eosscontext_stddev_fields
  stddev_pop: EOSS_eosscontext_stddev_pop_fields
  stddev_samp: EOSS_eosscontext_stddev_samp_fields
  sum: EOSS_eosscontext_sum_fields
  var_pop: EOSS_eosscontext_var_pop_fields
  var_samp: EOSS_eosscontext_var_samp_fields
  variance: EOSS_eosscontext_variance_fields
}
"append existing jsonb value of filtered columns with new jsonb value"
input EOSS_eosscontext_append_input {
  ga_information: jsonb
  vassar_information: jsonb
}
"aggregate avg on columns"
type EOSS_eosscontext_avg_fields {
  added_archs_count: Float
  dataset_id: Float
  group_id: Float
  id: Float
  last_arch_id: Float
  problem_id: Float
  selected_arch_id: Float
  user_information_id: Float
}
"""
Boolean expression to filter rows from the table "EOSS_eosscontext". All fields are combined with a logical 'AND'.
"""
input EOSS_eosscontext_bool_exp {
  EOSS_activecontext: EOSS_activecontext_bool_exp
  _and: [EOSS_eosscontext_bool_exp!]
  _not: EOSS_eosscontext_bool_exp
  _or: [EOSS_eosscontext_bool_exp!]
  added_archs_count: Int_comparison_exp
  daphne_context_userinformation: daphne_context_userinformation_bool_exp
  dataset_id: Int_comparison_exp
  ga_information: jsonb_comparison_exp
  ga_request_queue_url: String_comparison_exp
  ga_response_queue_url: String_comparison_exp
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  last_arch_id: Int_comparison_exp
  problem_id: Int_comparison_exp
  selected_arch_id: Int_comparison_exp
  user_information_id: Int_comparison_exp
  vassar_information: jsonb_comparison_exp
  vassar_request_queue_url: String_comparison_exp
  vassar_response_queue_url: String_comparison_exp
}
"""
unique or primary key constraints on table "EOSS_eosscontext"
"""
enum EOSS_eosscontext_constraint {
  "unique or primary key constraint"
  EOSS_eosscontext_pkey
  "unique or primary key constraint"
  EOSS_eosscontext_user_information_id_key
}
"delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
input EOSS_eosscontext_delete_at_path_input {
  ga_information: [String!]
  vassar_information: [String!]
}
"delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
input EOSS_eosscontext_delete_elem_input {
  ga_information: Int
  vassar_information: Int
}
"delete key/value pair or string element. key/value pairs are matched based on their key value"
input EOSS_eosscontext_delete_key_input {
  ga_information: String
  vassar_information: String
}
"""
input type for incrementing numeric columns in table "EOSS_eosscontext"
"""
input EOSS_eosscontext_inc_input {
  added_archs_count: Int
  dataset_id: Int
  group_id: Int
  id: Int
  last_arch_id: Int
  problem_id: Int
  selected_arch_id: Int
  user_information_id: Int
}
"""
input type for inserting data into table "EOSS_eosscontext"
"""
input EOSS_eosscontext_insert_input {
  EOSS_activecontext: EOSS_activecontext_obj_rel_insert_input
  added_archs_count: Int
  daphne_context_userinformation: daphne_context_userinformation_obj_rel_insert_input
  dataset_id: Int
  ga_information: jsonb
  ga_request_queue_url: String
  ga_response_queue_url: String
  group_id: Int
  id: Int
  last_arch_id: Int
  problem_id: Int
  selected_arch_id: Int
  user_information_id: Int
  vassar_information: jsonb
  vassar_request_queue_url: String
  vassar_response_queue_url: String
}
"aggregate max on columns"
type EOSS_eosscontext_max_fields {
  added_archs_count: Int
  dataset_id: Int
  ga_request_queue_url: String
  ga_response_queue_url: String
  group_id: Int
  id: Int
  last_arch_id: Int
  problem_id: Int
  selected_arch_id: Int
  user_information_id: Int
  vassar_request_queue_url: String
  vassar_response_queue_url: String
}
"aggregate min on columns"
type EOSS_eosscontext_min_fields {
  added_archs_count: Int
  dataset_id: Int
  ga_request_queue_url: String
  ga_response_queue_url: String
  group_id: Int
  id: Int
  last_arch_id: Int
  problem_id: Int
  selected_arch_id: Int
  user_information_id: Int
  vassar_request_queue_url: String
  vassar_response_queue_url: String
}
"""
response of any mutation on the table "EOSS_eosscontext"
"""
type EOSS_eosscontext_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [EOSS_eosscontext!]!
}
"""
input type for inserting object relation for remote table "EOSS_eosscontext"
"""
input EOSS_eosscontext_obj_rel_insert_input {
  data: EOSS_eosscontext_insert_input!
  "on conflict condition"
  on_conflict: EOSS_eosscontext_on_conflict
}
"""
on conflict condition type for table "EOSS_eosscontext"
"""
input EOSS_eosscontext_on_conflict {
  constraint: EOSS_eosscontext_constraint!
  update_columns: [EOSS_eosscontext_update_column!]! = []
  where: EOSS_eosscontext_bool_exp
}
"""
Ordering options when selecting data from "EOSS_eosscontext".
"""
input EOSS_eosscontext_order_by {
  EOSS_activecontext: EOSS_activecontext_order_by
  added_archs_count: order_by
  daphne_context_userinformation: daphne_context_userinformation_order_by
  dataset_id: order_by
  ga_information: order_by
  ga_request_queue_url: order_by
  ga_response_queue_url: order_by
  group_id: order_by
  id: order_by
  last_arch_id: order_by
  problem_id: order_by
  selected_arch_id: order_by
  user_information_id: order_by
  vassar_information: order_by
  vassar_request_queue_url: order_by
  vassar_response_queue_url: order_by
}
"primary key columns input for table: EOSS_eosscontext"
input EOSS_eosscontext_pk_columns_input {
  id: Int!
}
"prepend existing jsonb value of filtered columns with new jsonb value"
input EOSS_eosscontext_prepend_input {
  ga_information: jsonb
  vassar_information: jsonb
}
"""
select columns of table "EOSS_eosscontext"
"""
enum EOSS_eosscontext_select_column {
  "column name"
  added_archs_count
  "column name"
  dataset_id
  "column name"
  ga_information
  "column name"
  ga_request_queue_url
  "column name"
  ga_response_queue_url
  "column name"
  group_id
  "column name"
  id
  "column name"
  last_arch_id
  "column name"
  problem_id
  "column name"
  selected_arch_id
  "column name"
  user_information_id
  "column name"
  vassar_information
  "column name"
  vassar_request_queue_url
  "column name"
  vassar_response_queue_url
}
"""
input type for updating data in table "EOSS_eosscontext"
"""
input EOSS_eosscontext_set_input {
  added_archs_count: Int
  dataset_id: Int
  ga_information: jsonb
  ga_request_queue_url: String
  ga_response_queue_url: String
  group_id: Int
  id: Int
  last_arch_id: Int
  problem_id: Int
  selected_arch_id: Int
  user_information_id: Int
  vassar_information: jsonb
  vassar_request_queue_url: String
  vassar_response_queue_url: String
}
"aggregate stddev on columns"
type EOSS_eosscontext_stddev_fields {
  added_archs_count: Float
  dataset_id: Float
  group_id: Float
  id: Float
  last_arch_id: Float
  problem_id: Float
  selected_arch_id: Float
  user_information_id: Float
}
"aggregate stddev_pop on columns"
type EOSS_eosscontext_stddev_pop_fields {
  added_archs_count: Float
  dataset_id: Float
  group_id: Float
  id: Float
  last_arch_id: Float
  problem_id: Float
  selected_arch_id: Float
  user_information_id: Float
}
"aggregate stddev_samp on columns"
type EOSS_eosscontext_stddev_samp_fields {
  added_archs_count: Float
  dataset_id: Float
  group_id: Float
  id: Float
  last_arch_id: Float
  problem_id: Float
  selected_arch_id: Float
  user_information_id: Float
}
"aggregate sum on columns"
type EOSS_eosscontext_sum_fields {
  added_archs_count: Int
  dataset_id: Int
  group_id: Int
  id: Int
  last_arch_id: Int
  problem_id: Int
  selected_arch_id: Int
  user_information_id: Int
}
"""
update columns of table "EOSS_eosscontext"
"""
enum EOSS_eosscontext_update_column {
  "column name"
  added_archs_count
  "column name"
  dataset_id
  "column name"
  ga_information
  "column name"
  ga_request_queue_url
  "column name"
  ga_response_queue_url
  "column name"
  group_id
  "column name"
  id
  "column name"
  last_arch_id
  "column name"
  problem_id
  "column name"
  selected_arch_id
  "column name"
  user_information_id
  "column name"
  vassar_information
  "column name"
  vassar_request_queue_url
  "column name"
  vassar_response_queue_url
}
"aggregate var_pop on columns"
type EOSS_eosscontext_var_pop_fields {
  added_archs_count: Float
  dataset_id: Float
  group_id: Float
  id: Float
  last_arch_id: Float
  problem_id: Float
  selected_arch_id: Float
  user_information_id: Float
}
"aggregate var_samp on columns"
type EOSS_eosscontext_var_samp_fields {
  added_archs_count: Float
  dataset_id: Float
  group_id: Float
  id: Float
  last_arch_id: Float
  problem_id: Float
  selected_arch_id: Float
  user_information_id: Float
}
"aggregate variance on columns"
type EOSS_eosscontext_variance_fields {
  added_archs_count: Float
  dataset_id: Float
  group_id: Float
  id: Float
  last_arch_id: Float
  problem_id: Float
  selected_arch_id: Float
  user_information_id: Float
}
"""
columns and relationships of "EOSS_eossdialoguecontext"
"""
type EOSS_eossdialoguecontext {
  "An object relationship"
  EOSS_engineercontext: EOSS_engineercontext
  "An object relationship"
  daphne_context_dialoguecontext: daphne_context_dialoguecontext!
  dialoguecontext_id: Int!
  id: Int!
}
"""
aggregated selection of "EOSS_eossdialoguecontext"
"""
type EOSS_eossdialoguecontext_aggregate {
  aggregate: EOSS_eossdialoguecontext_aggregate_fields
  nodes: [EOSS_eossdialoguecontext!]!
}
"""
aggregate fields of "EOSS_eossdialoguecontext"
"""
type EOSS_eossdialoguecontext_aggregate_fields {
  avg: EOSS_eossdialoguecontext_avg_fields
  count(columns: [EOSS_eossdialoguecontext_select_column!], distinct: Boolean): Int!
  max: EOSS_eossdialoguecontext_max_fields
  min: EOSS_eossdialoguecontext_min_fields
  stddev: EOSS_eossdialoguecontext_stddev_fields
  stddev_pop: EOSS_eossdialoguecontext_stddev_pop_fields
  stddev_samp: EOSS_eossdialoguecontext_stddev_samp_fields
  sum: EOSS_eossdialoguecontext_sum_fields
  var_pop: EOSS_eossdialoguecontext_var_pop_fields
  var_samp: EOSS_eossdialoguecontext_var_samp_fields
  variance: EOSS_eossdialoguecontext_variance_fields
}
"aggregate avg on columns"
type EOSS_eossdialoguecontext_avg_fields {
  dialoguecontext_id: Float
  id: Float
}
"""
Boolean expression to filter rows from the table "EOSS_eossdialoguecontext". All fields are combined with a logical 'AND'.
"""
input EOSS_eossdialoguecontext_bool_exp {
  EOSS_engineercontext: EOSS_engineercontext_bool_exp
  _and: [EOSS_eossdialoguecontext_bool_exp!]
  _not: EOSS_eossdialoguecontext_bool_exp
  _or: [EOSS_eossdialoguecontext_bool_exp!]
  daphne_context_dialoguecontext: daphne_context_dialoguecontext_bool_exp
  dialoguecontext_id: Int_comparison_exp
  id: Int_comparison_exp
}
"""
unique or primary key constraints on table "EOSS_eossdialoguecontext"
"""
enum EOSS_eossdialoguecontext_constraint {
  "unique or primary key constraint"
  EOSS_eossdialoguecontext_dialoguecontext_id_key
  "unique or primary key constraint"
  EOSS_eossdialoguecontext_pkey
}
"""
input type for incrementing numeric columns in table "EOSS_eossdialoguecontext"
"""
input EOSS_eossdialoguecontext_inc_input {
  dialoguecontext_id: Int
  id: Int
}
"""
input type for inserting data into table "EOSS_eossdialoguecontext"
"""
input EOSS_eossdialoguecontext_insert_input {
  EOSS_engineercontext: EOSS_engineercontext_obj_rel_insert_input
  daphne_context_dialoguecontext: daphne_context_dialoguecontext_obj_rel_insert_input
  dialoguecontext_id: Int
  id: Int
}
"aggregate max on columns"
type EOSS_eossdialoguecontext_max_fields {
  dialoguecontext_id: Int
  id: Int
}
"aggregate min on columns"
type EOSS_eossdialoguecontext_min_fields {
  dialoguecontext_id: Int
  id: Int
}
"""
response of any mutation on the table "EOSS_eossdialoguecontext"
"""
type EOSS_eossdialoguecontext_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [EOSS_eossdialoguecontext!]!
}
"""
input type for inserting object relation for remote table "EOSS_eossdialoguecontext"
"""
input EOSS_eossdialoguecontext_obj_rel_insert_input {
  data: EOSS_eossdialoguecontext_insert_input!
  "on conflict condition"
  on_conflict: EOSS_eossdialoguecontext_on_conflict
}
"""
on conflict condition type for table "EOSS_eossdialoguecontext"
"""
input EOSS_eossdialoguecontext_on_conflict {
  constraint: EOSS_eossdialoguecontext_constraint!
  update_columns: [EOSS_eossdialoguecontext_update_column!]! = []
  where: EOSS_eossdialoguecontext_bool_exp
}
"""
Ordering options when selecting data from "EOSS_eossdialoguecontext".
"""
input EOSS_eossdialoguecontext_order_by {
  EOSS_engineercontext: EOSS_engineercontext_order_by
  daphne_context_dialoguecontext: daphne_context_dialoguecontext_order_by
  dialoguecontext_id: order_by
  id: order_by
}
"primary key columns input for table: EOSS_eossdialoguecontext"
input EOSS_eossdialoguecontext_pk_columns_input {
  id: Int!
}
"""
select columns of table "EOSS_eossdialoguecontext"
"""
enum EOSS_eossdialoguecontext_select_column {
  "column name"
  dialoguecontext_id
  "column name"
  id
}
"""
input type for updating data in table "EOSS_eossdialoguecontext"
"""
input EOSS_eossdialoguecontext_set_input {
  dialoguecontext_id: Int
  id: Int
}
"aggregate stddev on columns"
type EOSS_eossdialoguecontext_stddev_fields {
  dialoguecontext_id: Float
  id: Float
}
"aggregate stddev_pop on columns"
type EOSS_eossdialoguecontext_stddev_pop_fields {
  dialoguecontext_id: Float
  id: Float
}
"aggregate stddev_samp on columns"
type EOSS_eossdialoguecontext_stddev_samp_fields {
  dialoguecontext_id: Float
  id: Float
}
"aggregate sum on columns"
type EOSS_eossdialoguecontext_sum_fields {
  dialoguecontext_id: Int
  id: Int
}
"""
update columns of table "EOSS_eossdialoguecontext"
"""
enum EOSS_eossdialoguecontext_update_column {
  "column name"
  dialoguecontext_id
  "column name"
  id
}
"aggregate var_pop on columns"
type EOSS_eossdialoguecontext_var_pop_fields {
  dialoguecontext_id: Float
  id: Float
}
"aggregate var_samp on columns"
type EOSS_eossdialoguecontext_var_samp_fields {
  dialoguecontext_id: Float
  id: Float
}
"aggregate variance on columns"
type EOSS_eossdialoguecontext_variance_fields {
  dialoguecontext_id: Float
  id: Float
}
scalar Float
"""
columns and relationships of "Fuzzy_Attribute"
"""
type Fuzzy_Attribute {
  "An array relationship"
  Fuzzy_Values("distinct select on columns" distinct_on: [Fuzzy_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Value_order_by!], "filter the rows returned" where: Fuzzy_Value_bool_exp): [Fuzzy_Value!]!
  "An aggregate relationship"
  Fuzzy_Values_aggregate("distinct select on columns" distinct_on: [Fuzzy_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Value_order_by!], "filter the rows returned" where: Fuzzy_Value_bool_exp): Fuzzy_Value_aggregate!
  "An object relationship"
  Problem: Problem
  id: Int!
  name: String
  parameter: String
  problem_id: Int
  unit: String
}
"""
aggregated selection of "Fuzzy_Attribute"
"""
type Fuzzy_Attribute_aggregate {
  aggregate: Fuzzy_Attribute_aggregate_fields
  nodes: [Fuzzy_Attribute!]!
}
"""
aggregate fields of "Fuzzy_Attribute"
"""
type Fuzzy_Attribute_aggregate_fields {
  avg: Fuzzy_Attribute_avg_fields
  count(columns: [Fuzzy_Attribute_select_column!], distinct: Boolean): Int!
  max: Fuzzy_Attribute_max_fields
  min: Fuzzy_Attribute_min_fields
  stddev: Fuzzy_Attribute_stddev_fields
  stddev_pop: Fuzzy_Attribute_stddev_pop_fields
  stddev_samp: Fuzzy_Attribute_stddev_samp_fields
  sum: Fuzzy_Attribute_sum_fields
  var_pop: Fuzzy_Attribute_var_pop_fields
  var_samp: Fuzzy_Attribute_var_samp_fields
  variance: Fuzzy_Attribute_variance_fields
}
"""
order by aggregate values of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_aggregate_order_by {
  avg: Fuzzy_Attribute_avg_order_by
  count: order_by
  max: Fuzzy_Attribute_max_order_by
  min: Fuzzy_Attribute_min_order_by
  stddev: Fuzzy_Attribute_stddev_order_by
  stddev_pop: Fuzzy_Attribute_stddev_pop_order_by
  stddev_samp: Fuzzy_Attribute_stddev_samp_order_by
  sum: Fuzzy_Attribute_sum_order_by
  var_pop: Fuzzy_Attribute_var_pop_order_by
  var_samp: Fuzzy_Attribute_var_samp_order_by
  variance: Fuzzy_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_arr_rel_insert_input {
  data: [Fuzzy_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Fuzzy_Attribute_on_conflict
}
"aggregate avg on columns"
type Fuzzy_Attribute_avg_fields {
  id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_avg_order_by {
  id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "Fuzzy_Attribute". All fields are combined with a logical 'AND'.
"""
input Fuzzy_Attribute_bool_exp {
  Fuzzy_Values: Fuzzy_Value_bool_exp
  Problem: Problem_bool_exp
  _and: [Fuzzy_Attribute_bool_exp!]
  _not: Fuzzy_Attribute_bool_exp
  _or: [Fuzzy_Attribute_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
  parameter: String_comparison_exp
  problem_id: Int_comparison_exp
  unit: String_comparison_exp
}
"""
unique or primary key constraints on table "Fuzzy_Attribute"
"""
enum Fuzzy_Attribute_constraint {
  "unique or primary key constraint"
  Fuzzy_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_inc_input {
  id: Int
  problem_id: Int
}
"""
input type for inserting data into table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_insert_input {
  Fuzzy_Values: Fuzzy_Value_arr_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  id: Int
  name: String
  parameter: String
  problem_id: Int
  unit: String
}
"aggregate max on columns"
type Fuzzy_Attribute_max_fields {
  id: Int
  name: String
  parameter: String
  problem_id: Int
  unit: String
}
"""
order by max() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_max_order_by {
  id: order_by
  name: order_by
  parameter: order_by
  problem_id: order_by
  unit: order_by
}
"aggregate min on columns"
type Fuzzy_Attribute_min_fields {
  id: Int
  name: String
  parameter: String
  problem_id: Int
  unit: String
}
"""
order by min() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_min_order_by {
  id: order_by
  name: order_by
  parameter: order_by
  problem_id: order_by
  unit: order_by
}
"""
response of any mutation on the table "Fuzzy_Attribute"
"""
type Fuzzy_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Fuzzy_Attribute!]!
}
"""
input type for inserting object relation for remote table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_obj_rel_insert_input {
  data: Fuzzy_Attribute_insert_input!
  "on conflict condition"
  on_conflict: Fuzzy_Attribute_on_conflict
}
"""
on conflict condition type for table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_on_conflict {
  constraint: Fuzzy_Attribute_constraint!
  update_columns: [Fuzzy_Attribute_update_column!]! = []
  where: Fuzzy_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Fuzzy_Attribute".
"""
input Fuzzy_Attribute_order_by {
  Fuzzy_Values_aggregate: Fuzzy_Value_aggregate_order_by
  Problem: Problem_order_by
  id: order_by
  name: order_by
  parameter: order_by
  problem_id: order_by
  unit: order_by
}
"primary key columns input for table: Fuzzy_Attribute"
input Fuzzy_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Fuzzy_Attribute"
"""
enum Fuzzy_Attribute_select_column {
  "column name"
  id
  "column name"
  name
  "column name"
  parameter
  "column name"
  problem_id
  "column name"
  unit
}
"""
input type for updating data in table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_set_input {
  id: Int
  name: String
  parameter: String
  problem_id: Int
  unit: String
}
"aggregate stddev on columns"
type Fuzzy_Attribute_stddev_fields {
  id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_stddev_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type Fuzzy_Attribute_stddev_pop_fields {
  id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_stddev_pop_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type Fuzzy_Attribute_stddev_samp_fields {
  id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_stddev_samp_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type Fuzzy_Attribute_sum_fields {
  id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_sum_order_by {
  id: order_by
  problem_id: order_by
}
"""
update columns of table "Fuzzy_Attribute"
"""
enum Fuzzy_Attribute_update_column {
  "column name"
  id
  "column name"
  name
  "column name"
  parameter
  "column name"
  problem_id
  "column name"
  unit
}
"aggregate var_pop on columns"
type Fuzzy_Attribute_var_pop_fields {
  id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_var_pop_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type Fuzzy_Attribute_var_samp_fields {
  id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_var_samp_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type Fuzzy_Attribute_variance_fields {
  id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "Fuzzy_Attribute"
"""
input Fuzzy_Attribute_variance_order_by {
  id: order_by
  problem_id: order_by
}
"""
columns and relationships of "Fuzzy_Value"
"""
type Fuzzy_Value {
  "An object relationship"
  Fuzzy_Attribute: Fuzzy_Attribute
  fuzzy_attribute_id: Int
  id: Int!
  maximum: float8
  mean: float8
  minimum: float8
  value: String
}
"""
aggregated selection of "Fuzzy_Value"
"""
type Fuzzy_Value_aggregate {
  aggregate: Fuzzy_Value_aggregate_fields
  nodes: [Fuzzy_Value!]!
}
"""
aggregate fields of "Fuzzy_Value"
"""
type Fuzzy_Value_aggregate_fields {
  avg: Fuzzy_Value_avg_fields
  count(columns: [Fuzzy_Value_select_column!], distinct: Boolean): Int!
  max: Fuzzy_Value_max_fields
  min: Fuzzy_Value_min_fields
  stddev: Fuzzy_Value_stddev_fields
  stddev_pop: Fuzzy_Value_stddev_pop_fields
  stddev_samp: Fuzzy_Value_stddev_samp_fields
  sum: Fuzzy_Value_sum_fields
  var_pop: Fuzzy_Value_var_pop_fields
  var_samp: Fuzzy_Value_var_samp_fields
  variance: Fuzzy_Value_variance_fields
}
"""
order by aggregate values of table "Fuzzy_Value"
"""
input Fuzzy_Value_aggregate_order_by {
  avg: Fuzzy_Value_avg_order_by
  count: order_by
  max: Fuzzy_Value_max_order_by
  min: Fuzzy_Value_min_order_by
  stddev: Fuzzy_Value_stddev_order_by
  stddev_pop: Fuzzy_Value_stddev_pop_order_by
  stddev_samp: Fuzzy_Value_stddev_samp_order_by
  sum: Fuzzy_Value_sum_order_by
  var_pop: Fuzzy_Value_var_pop_order_by
  var_samp: Fuzzy_Value_var_samp_order_by
  variance: Fuzzy_Value_variance_order_by
}
"""
input type for inserting array relation for remote table "Fuzzy_Value"
"""
input Fuzzy_Value_arr_rel_insert_input {
  data: [Fuzzy_Value_insert_input!]!
  "on conflict condition"
  on_conflict: Fuzzy_Value_on_conflict
}
"aggregate avg on columns"
type Fuzzy_Value_avg_fields {
  fuzzy_attribute_id: Float
  id: Float
  maximum: Float
  mean: Float
  minimum: Float
}
"""
order by avg() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_avg_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
}
"""
Boolean expression to filter rows from the table "Fuzzy_Value". All fields are combined with a logical 'AND'.
"""
input Fuzzy_Value_bool_exp {
  Fuzzy_Attribute: Fuzzy_Attribute_bool_exp
  _and: [Fuzzy_Value_bool_exp!]
  _not: Fuzzy_Value_bool_exp
  _or: [Fuzzy_Value_bool_exp!]
  fuzzy_attribute_id: Int_comparison_exp
  id: Int_comparison_exp
  maximum: float8_comparison_exp
  mean: float8_comparison_exp
  minimum: float8_comparison_exp
  value: String_comparison_exp
}
"""
unique or primary key constraints on table "Fuzzy_Value"
"""
enum Fuzzy_Value_constraint {
  "unique or primary key constraint"
  Fuzzy_Value_pkey
}
"""
input type for incrementing numeric columns in table "Fuzzy_Value"
"""
input Fuzzy_Value_inc_input {
  fuzzy_attribute_id: Int
  id: Int
  maximum: float8
  mean: float8
  minimum: float8
}
"""
input type for inserting data into table "Fuzzy_Value"
"""
input Fuzzy_Value_insert_input {
  Fuzzy_Attribute: Fuzzy_Attribute_obj_rel_insert_input
  fuzzy_attribute_id: Int
  id: Int
  maximum: float8
  mean: float8
  minimum: float8
  value: String
}
"aggregate max on columns"
type Fuzzy_Value_max_fields {
  fuzzy_attribute_id: Int
  id: Int
  maximum: float8
  mean: float8
  minimum: float8
  value: String
}
"""
order by max() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_max_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
  value: order_by
}
"aggregate min on columns"
type Fuzzy_Value_min_fields {
  fuzzy_attribute_id: Int
  id: Int
  maximum: float8
  mean: float8
  minimum: float8
  value: String
}
"""
order by min() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_min_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
  value: order_by
}
"""
response of any mutation on the table "Fuzzy_Value"
"""
type Fuzzy_Value_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Fuzzy_Value!]!
}
"""
on conflict condition type for table "Fuzzy_Value"
"""
input Fuzzy_Value_on_conflict {
  constraint: Fuzzy_Value_constraint!
  update_columns: [Fuzzy_Value_update_column!]! = []
  where: Fuzzy_Value_bool_exp
}
"""
Ordering options when selecting data from "Fuzzy_Value".
"""
input Fuzzy_Value_order_by {
  Fuzzy_Attribute: Fuzzy_Attribute_order_by
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
  value: order_by
}
"primary key columns input for table: Fuzzy_Value"
input Fuzzy_Value_pk_columns_input {
  id: Int!
}
"""
select columns of table "Fuzzy_Value"
"""
enum Fuzzy_Value_select_column {
  "column name"
  fuzzy_attribute_id
  "column name"
  id
  "column name"
  maximum
  "column name"
  mean
  "column name"
  minimum
  "column name"
  value
}
"""
input type for updating data in table "Fuzzy_Value"
"""
input Fuzzy_Value_set_input {
  fuzzy_attribute_id: Int
  id: Int
  maximum: float8
  mean: float8
  minimum: float8
  value: String
}
"aggregate stddev on columns"
type Fuzzy_Value_stddev_fields {
  fuzzy_attribute_id: Float
  id: Float
  maximum: Float
  mean: Float
  minimum: Float
}
"""
order by stddev() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_stddev_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
}
"aggregate stddev_pop on columns"
type Fuzzy_Value_stddev_pop_fields {
  fuzzy_attribute_id: Float
  id: Float
  maximum: Float
  mean: Float
  minimum: Float
}
"""
order by stddev_pop() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_stddev_pop_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
}
"aggregate stddev_samp on columns"
type Fuzzy_Value_stddev_samp_fields {
  fuzzy_attribute_id: Float
  id: Float
  maximum: Float
  mean: Float
  minimum: Float
}
"""
order by stddev_samp() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_stddev_samp_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
}
"aggregate sum on columns"
type Fuzzy_Value_sum_fields {
  fuzzy_attribute_id: Int
  id: Int
  maximum: float8
  mean: float8
  minimum: float8
}
"""
order by sum() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_sum_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
}
"""
update columns of table "Fuzzy_Value"
"""
enum Fuzzy_Value_update_column {
  "column name"
  fuzzy_attribute_id
  "column name"
  id
  "column name"
  maximum
  "column name"
  mean
  "column name"
  minimum
  "column name"
  value
}
"aggregate var_pop on columns"
type Fuzzy_Value_var_pop_fields {
  fuzzy_attribute_id: Float
  id: Float
  maximum: Float
  mean: Float
  minimum: Float
}
"""
order by var_pop() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_var_pop_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
}
"aggregate var_samp on columns"
type Fuzzy_Value_var_samp_fields {
  fuzzy_attribute_id: Float
  id: Float
  maximum: Float
  mean: Float
  minimum: Float
}
"""
order by var_samp() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_var_samp_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
}
"aggregate variance on columns"
type Fuzzy_Value_variance_fields {
  fuzzy_attribute_id: Float
  id: Float
  maximum: Float
  mean: Float
  minimum: Float
}
"""
order by variance() on columns of table "Fuzzy_Value"
"""
input Fuzzy_Value_variance_order_by {
  fuzzy_attribute_id: order_by
  id: order_by
  maximum: order_by
  mean: order_by
  minimum: order_by
}
"""
columns and relationships of "Group"
"""
type Group {
  "An array relationship"
  Accepted_Values("distinct select on columns" distinct_on: [Accepted_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Accepted_Value_order_by!], "filter the rows returned" where: Accepted_Value_bool_exp): [Accepted_Value!]!
  "An aggregate relationship"
  Accepted_Values_aggregate("distinct select on columns" distinct_on: [Accepted_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Accepted_Value_order_by!], "filter the rows returned" where: Accepted_Value_bool_exp): Accepted_Value_aggregate!
  "An array relationship"
  Datasets("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): [Dataset!]!
  "An aggregate relationship"
  Datasets_aggregate("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): Dataset_aggregate!
  "An array relationship"
  Instrument_Attributes("distinct select on columns" distinct_on: [Instrument_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_Attribute_order_by!], "filter the rows returned" where: Instrument_Attribute_bool_exp): [Instrument_Attribute!]!
  "An aggregate relationship"
  Instrument_Attributes_aggregate("distinct select on columns" distinct_on: [Instrument_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_Attribute_order_by!], "filter the rows returned" where: Instrument_Attribute_bool_exp): Instrument_Attribute_aggregate!
  "An array relationship"
  Instruments("distinct select on columns" distinct_on: [Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_order_by!], "filter the rows returned" where: Instrument_bool_exp): [Instrument!]!
  "An aggregate relationship"
  Instruments_aggregate("distinct select on columns" distinct_on: [Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_order_by!], "filter the rows returned" where: Instrument_bool_exp): Instrument_aggregate!
  "An array relationship"
  Join__AuthUser_Groups("distinct select on columns" distinct_on: [Join__AuthUser_Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__AuthUser_Group_order_by!], "filter the rows returned" where: Join__AuthUser_Group_bool_exp): [Join__AuthUser_Group!]!
  "An aggregate relationship"
  Join__AuthUser_Groups_aggregate("distinct select on columns" distinct_on: [Join__AuthUser_Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__AuthUser_Group_order_by!], "filter the rows returned" where: Join__AuthUser_Group_bool_exp): Join__AuthUser_Group_aggregate!
  "An array relationship"
  Join__Instrument_Capabilities("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): [Join__Instrument_Capability!]!
  "An aggregate relationship"
  Join__Instrument_Capabilities_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): Join__Instrument_Capability_aggregate!
  "An array relationship"
  Join__Instrument_Characteristics("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): [Join__Instrument_Characteristic!]!
  "An aggregate relationship"
  Join__Instrument_Characteristics_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): Join__Instrument_Characteristic_aggregate!
  "An array relationship"
  Join__Launch_Vehicle_Attributes("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): [Join__Launch_Vehicle_Attribute!]!
  "An aggregate relationship"
  Join__Launch_Vehicle_Attributes_aggregate("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): Join__Launch_Vehicle_Attribute_aggregate!
  "An array relationship"
  Join__Orbit_Attributes("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): [Join__Orbit_Attribute!]!
  "An aggregate relationship"
  Join__Orbit_Attributes_aggregate("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): Join__Orbit_Attribute_aggregate!
  "An array relationship"
  Launch_Vehicle_Attributes("distinct select on columns" distinct_on: [Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Launch_Vehicle_Attribute_bool_exp): [Launch_Vehicle_Attribute!]!
  "An aggregate relationship"
  Launch_Vehicle_Attributes_aggregate("distinct select on columns" distinct_on: [Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Launch_Vehicle_Attribute_bool_exp): Launch_Vehicle_Attribute_aggregate!
  "An array relationship"
  Launch_Vehicles("distinct select on columns" distinct_on: [Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_order_by!], "filter the rows returned" where: Launch_Vehicle_bool_exp): [Launch_Vehicle!]!
  "An aggregate relationship"
  Launch_Vehicles_aggregate("distinct select on columns" distinct_on: [Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_order_by!], "filter the rows returned" where: Launch_Vehicle_bool_exp): Launch_Vehicle_aggregate!
  "An array relationship"
  Measurement_Attributes("distinct select on columns" distinct_on: [Measurement_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_Attribute_order_by!], "filter the rows returned" where: Measurement_Attribute_bool_exp): [Measurement_Attribute!]!
  "An aggregate relationship"
  Measurement_Attributes_aggregate("distinct select on columns" distinct_on: [Measurement_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_Attribute_order_by!], "filter the rows returned" where: Measurement_Attribute_bool_exp): Measurement_Attribute_aggregate!
  "An array relationship"
  Measurements("distinct select on columns" distinct_on: [Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_order_by!], "filter the rows returned" where: Measurement_bool_exp): [Measurement!]!
  "An aggregate relationship"
  Measurements_aggregate("distinct select on columns" distinct_on: [Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_order_by!], "filter the rows returned" where: Measurement_bool_exp): Measurement_aggregate!
  "An array relationship"
  Orbit_Attributes("distinct select on columns" distinct_on: [Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_Attribute_order_by!], "filter the rows returned" where: Orbit_Attribute_bool_exp): [Orbit_Attribute!]!
  "An aggregate relationship"
  Orbit_Attributes_aggregate("distinct select on columns" distinct_on: [Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_Attribute_order_by!], "filter the rows returned" where: Orbit_Attribute_bool_exp): Orbit_Attribute_aggregate!
  "An array relationship"
  Orbits("distinct select on columns" distinct_on: [Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_order_by!], "filter the rows returned" where: Orbit_bool_exp): [Orbit!]!
  "An aggregate relationship"
  Orbits_aggregate("distinct select on columns" distinct_on: [Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_order_by!], "filter the rows returned" where: Orbit_bool_exp): Orbit_aggregate!
  "An array relationship"
  Problems("distinct select on columns" distinct_on: [Problem_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Problem_order_by!], "filter the rows returned" where: Problem_bool_exp): [Problem!]!
  "An aggregate relationship"
  Problems_aggregate("distinct select on columns" distinct_on: [Problem_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Problem_order_by!], "filter the rows returned" where: Problem_bool_exp): Problem_aggregate!
  id: Int!
  name: String
}
"""
aggregated selection of "Group"
"""
type Group_aggregate {
  aggregate: Group_aggregate_fields
  nodes: [Group!]!
}
"""
aggregate fields of "Group"
"""
type Group_aggregate_fields {
  avg: Group_avg_fields
  count(columns: [Group_select_column!], distinct: Boolean): Int!
  max: Group_max_fields
  min: Group_min_fields
  stddev: Group_stddev_fields
  stddev_pop: Group_stddev_pop_fields
  stddev_samp: Group_stddev_samp_fields
  sum: Group_sum_fields
  var_pop: Group_var_pop_fields
  var_samp: Group_var_samp_fields
  variance: Group_variance_fields
}
"aggregate avg on columns"
type Group_avg_fields {
  id: Float
}
"""
Boolean expression to filter rows from the table "Group". All fields are combined with a logical 'AND'.
"""
input Group_bool_exp {
  Accepted_Values: Accepted_Value_bool_exp
  Datasets: Dataset_bool_exp
  Instrument_Attributes: Instrument_Attribute_bool_exp
  Instruments: Instrument_bool_exp
  Join__AuthUser_Groups: Join__AuthUser_Group_bool_exp
  Join__Instrument_Capabilities: Join__Instrument_Capability_bool_exp
  Join__Instrument_Characteristics: Join__Instrument_Characteristic_bool_exp
  Join__Launch_Vehicle_Attributes: Join__Launch_Vehicle_Attribute_bool_exp
  Join__Orbit_Attributes: Join__Orbit_Attribute_bool_exp
  Launch_Vehicle_Attributes: Launch_Vehicle_Attribute_bool_exp
  Launch_Vehicles: Launch_Vehicle_bool_exp
  Measurement_Attributes: Measurement_Attribute_bool_exp
  Measurements: Measurement_bool_exp
  Orbit_Attributes: Orbit_Attribute_bool_exp
  Orbits: Orbit_bool_exp
  Problems: Problem_bool_exp
  _and: [Group_bool_exp!]
  _not: Group_bool_exp
  _or: [Group_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
}
"""
unique or primary key constraints on table "Group"
"""
enum Group_constraint {
  "unique or primary key constraint"
  Group_pkey
}
"""
input type for incrementing numeric columns in table "Group"
"""
input Group_inc_input {
  id: Int
}
"""
input type for inserting data into table "Group"
"""
input Group_insert_input {
  Accepted_Values: Accepted_Value_arr_rel_insert_input
  Datasets: Dataset_arr_rel_insert_input
  Instrument_Attributes: Instrument_Attribute_arr_rel_insert_input
  Instruments: Instrument_arr_rel_insert_input
  Join__AuthUser_Groups: Join__AuthUser_Group_arr_rel_insert_input
  Join__Instrument_Capabilities: Join__Instrument_Capability_arr_rel_insert_input
  Join__Instrument_Characteristics: Join__Instrument_Characteristic_arr_rel_insert_input
  Join__Launch_Vehicle_Attributes: Join__Launch_Vehicle_Attribute_arr_rel_insert_input
  Join__Orbit_Attributes: Join__Orbit_Attribute_arr_rel_insert_input
  Launch_Vehicle_Attributes: Launch_Vehicle_Attribute_arr_rel_insert_input
  Launch_Vehicles: Launch_Vehicle_arr_rel_insert_input
  Measurement_Attributes: Measurement_Attribute_arr_rel_insert_input
  Measurements: Measurement_arr_rel_insert_input
  Orbit_Attributes: Orbit_Attribute_arr_rel_insert_input
  Orbits: Orbit_arr_rel_insert_input
  Problems: Problem_arr_rel_insert_input
  id: Int
  name: String
}
"aggregate max on columns"
type Group_max_fields {
  id: Int
  name: String
}
"aggregate min on columns"
type Group_min_fields {
  id: Int
  name: String
}
"""
response of any mutation on the table "Group"
"""
type Group_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Group!]!
}
"""
input type for inserting object relation for remote table "Group"
"""
input Group_obj_rel_insert_input {
  data: Group_insert_input!
  "on conflict condition"
  on_conflict: Group_on_conflict
}
"""
on conflict condition type for table "Group"
"""
input Group_on_conflict {
  constraint: Group_constraint!
  update_columns: [Group_update_column!]! = []
  where: Group_bool_exp
}
"""
Ordering options when selecting data from "Group".
"""
input Group_order_by {
  Accepted_Values_aggregate: Accepted_Value_aggregate_order_by
  Datasets_aggregate: Dataset_aggregate_order_by
  Instrument_Attributes_aggregate: Instrument_Attribute_aggregate_order_by
  Instruments_aggregate: Instrument_aggregate_order_by
  Join__AuthUser_Groups_aggregate: Join__AuthUser_Group_aggregate_order_by
  Join__Instrument_Capabilities_aggregate: Join__Instrument_Capability_aggregate_order_by
  Join__Instrument_Characteristics_aggregate: Join__Instrument_Characteristic_aggregate_order_by
  Join__Launch_Vehicle_Attributes_aggregate: Join__Launch_Vehicle_Attribute_aggregate_order_by
  Join__Orbit_Attributes_aggregate: Join__Orbit_Attribute_aggregate_order_by
  Launch_Vehicle_Attributes_aggregate: Launch_Vehicle_Attribute_aggregate_order_by
  Launch_Vehicles_aggregate: Launch_Vehicle_aggregate_order_by
  Measurement_Attributes_aggregate: Measurement_Attribute_aggregate_order_by
  Measurements_aggregate: Measurement_aggregate_order_by
  Orbit_Attributes_aggregate: Orbit_Attribute_aggregate_order_by
  Orbits_aggregate: Orbit_aggregate_order_by
  Problems_aggregate: Problem_aggregate_order_by
  id: order_by
  name: order_by
}
"primary key columns input for table: Group"
input Group_pk_columns_input {
  id: Int!
}
"""
select columns of table "Group"
"""
enum Group_select_column {
  "column name"
  id
  "column name"
  name
}
"""
input type for updating data in table "Group"
"""
input Group_set_input {
  id: Int
  name: String
}
"aggregate stddev on columns"
type Group_stddev_fields {
  id: Float
}
"aggregate stddev_pop on columns"
type Group_stddev_pop_fields {
  id: Float
}
"aggregate stddev_samp on columns"
type Group_stddev_samp_fields {
  id: Float
}
"aggregate sum on columns"
type Group_sum_fields {
  id: Int
}
"""
update columns of table "Group"
"""
enum Group_update_column {
  "column name"
  id
  "column name"
  name
}
"aggregate var_pop on columns"
type Group_var_pop_fields {
  id: Float
}
"aggregate var_samp on columns"
type Group_var_samp_fields {
  id: Float
}
"aggregate variance on columns"
type Group_variance_fields {
  id: Float
}
"""
columns and relationships of "Inheritence_Attribute"
"""
type Inheritence_Attribute {
  "An object relationship"
  Problem: Problem
  copySlotName1: String
  copySlotName2: String
  copySlotType1: String
  id: Int!
  matchingSlotName1: String
  matchingSlotName2: String
  matchingSlotType1: String
  module: String
  problem_id: Int
  template1: String
  template2: String
}
"""
aggregated selection of "Inheritence_Attribute"
"""
type Inheritence_Attribute_aggregate {
  aggregate: Inheritence_Attribute_aggregate_fields
  nodes: [Inheritence_Attribute!]!
}
"""
aggregate fields of "Inheritence_Attribute"
"""
type Inheritence_Attribute_aggregate_fields {
  avg: Inheritence_Attribute_avg_fields
  count(columns: [Inheritence_Attribute_select_column!], distinct: Boolean): Int!
  max: Inheritence_Attribute_max_fields
  min: Inheritence_Attribute_min_fields
  stddev: Inheritence_Attribute_stddev_fields
  stddev_pop: Inheritence_Attribute_stddev_pop_fields
  stddev_samp: Inheritence_Attribute_stddev_samp_fields
  sum: Inheritence_Attribute_sum_fields
  var_pop: Inheritence_Attribute_var_pop_fields
  var_samp: Inheritence_Attribute_var_samp_fields
  variance: Inheritence_Attribute_variance_fields
}
"""
order by aggregate values of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_aggregate_order_by {
  avg: Inheritence_Attribute_avg_order_by
  count: order_by
  max: Inheritence_Attribute_max_order_by
  min: Inheritence_Attribute_min_order_by
  stddev: Inheritence_Attribute_stddev_order_by
  stddev_pop: Inheritence_Attribute_stddev_pop_order_by
  stddev_samp: Inheritence_Attribute_stddev_samp_order_by
  sum: Inheritence_Attribute_sum_order_by
  var_pop: Inheritence_Attribute_var_pop_order_by
  var_samp: Inheritence_Attribute_var_samp_order_by
  variance: Inheritence_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Inheritence_Attribute"
"""
input Inheritence_Attribute_arr_rel_insert_input {
  data: [Inheritence_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Inheritence_Attribute_on_conflict
}
"aggregate avg on columns"
type Inheritence_Attribute_avg_fields {
  id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_avg_order_by {
  id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "Inheritence_Attribute". All fields are combined with a logical 'AND'.
"""
input Inheritence_Attribute_bool_exp {
  Problem: Problem_bool_exp
  _and: [Inheritence_Attribute_bool_exp!]
  _not: Inheritence_Attribute_bool_exp
  _or: [Inheritence_Attribute_bool_exp!]
  copySlotName1: String_comparison_exp
  copySlotName2: String_comparison_exp
  copySlotType1: String_comparison_exp
  id: Int_comparison_exp
  matchingSlotName1: String_comparison_exp
  matchingSlotName2: String_comparison_exp
  matchingSlotType1: String_comparison_exp
  module: String_comparison_exp
  problem_id: Int_comparison_exp
  template1: String_comparison_exp
  template2: String_comparison_exp
}
"""
unique or primary key constraints on table "Inheritence_Attribute"
"""
enum Inheritence_Attribute_constraint {
  "unique or primary key constraint"
  Inheritence_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Inheritence_Attribute"
"""
input Inheritence_Attribute_inc_input {
  id: Int
  problem_id: Int
}
"""
input type for inserting data into table "Inheritence_Attribute"
"""
input Inheritence_Attribute_insert_input {
  Problem: Problem_obj_rel_insert_input
  copySlotName1: String
  copySlotName2: String
  copySlotType1: String
  id: Int
  matchingSlotName1: String
  matchingSlotName2: String
  matchingSlotType1: String
  module: String
  problem_id: Int
  template1: String
  template2: String
}
"aggregate max on columns"
type Inheritence_Attribute_max_fields {
  copySlotName1: String
  copySlotName2: String
  copySlotType1: String
  id: Int
  matchingSlotName1: String
  matchingSlotName2: String
  matchingSlotType1: String
  module: String
  problem_id: Int
  template1: String
  template2: String
}
"""
order by max() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_max_order_by {
  copySlotName1: order_by
  copySlotName2: order_by
  copySlotType1: order_by
  id: order_by
  matchingSlotName1: order_by
  matchingSlotName2: order_by
  matchingSlotType1: order_by
  module: order_by
  problem_id: order_by
  template1: order_by
  template2: order_by
}
"aggregate min on columns"
type Inheritence_Attribute_min_fields {
  copySlotName1: String
  copySlotName2: String
  copySlotType1: String
  id: Int
  matchingSlotName1: String
  matchingSlotName2: String
  matchingSlotType1: String
  module: String
  problem_id: Int
  template1: String
  template2: String
}
"""
order by min() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_min_order_by {
  copySlotName1: order_by
  copySlotName2: order_by
  copySlotType1: order_by
  id: order_by
  matchingSlotName1: order_by
  matchingSlotName2: order_by
  matchingSlotType1: order_by
  module: order_by
  problem_id: order_by
  template1: order_by
  template2: order_by
}
"""
response of any mutation on the table "Inheritence_Attribute"
"""
type Inheritence_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Inheritence_Attribute!]!
}
"""
on conflict condition type for table "Inheritence_Attribute"
"""
input Inheritence_Attribute_on_conflict {
  constraint: Inheritence_Attribute_constraint!
  update_columns: [Inheritence_Attribute_update_column!]! = []
  where: Inheritence_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Inheritence_Attribute".
"""
input Inheritence_Attribute_order_by {
  Problem: Problem_order_by
  copySlotName1: order_by
  copySlotName2: order_by
  copySlotType1: order_by
  id: order_by
  matchingSlotName1: order_by
  matchingSlotName2: order_by
  matchingSlotType1: order_by
  module: order_by
  problem_id: order_by
  template1: order_by
  template2: order_by
}
"primary key columns input for table: Inheritence_Attribute"
input Inheritence_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Inheritence_Attribute"
"""
enum Inheritence_Attribute_select_column {
  "column name"
  copySlotName1
  "column name"
  copySlotName2
  "column name"
  copySlotType1
  "column name"
  id
  "column name"
  matchingSlotName1
  "column name"
  matchingSlotName2
  "column name"
  matchingSlotType1
  "column name"
  module
  "column name"
  problem_id
  "column name"
  template1
  "column name"
  template2
}
"""
input type for updating data in table "Inheritence_Attribute"
"""
input Inheritence_Attribute_set_input {
  copySlotName1: String
  copySlotName2: String
  copySlotType1: String
  id: Int
  matchingSlotName1: String
  matchingSlotName2: String
  matchingSlotType1: String
  module: String
  problem_id: Int
  template1: String
  template2: String
}
"aggregate stddev on columns"
type Inheritence_Attribute_stddev_fields {
  id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_stddev_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type Inheritence_Attribute_stddev_pop_fields {
  id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_stddev_pop_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type Inheritence_Attribute_stddev_samp_fields {
  id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_stddev_samp_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type Inheritence_Attribute_sum_fields {
  id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_sum_order_by {
  id: order_by
  problem_id: order_by
}
"""
update columns of table "Inheritence_Attribute"
"""
enum Inheritence_Attribute_update_column {
  "column name"
  copySlotName1
  "column name"
  copySlotName2
  "column name"
  copySlotType1
  "column name"
  id
  "column name"
  matchingSlotName1
  "column name"
  matchingSlotName2
  "column name"
  matchingSlotType1
  "column name"
  module
  "column name"
  problem_id
  "column name"
  template1
  "column name"
  template2
}
"aggregate var_pop on columns"
type Inheritence_Attribute_var_pop_fields {
  id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_var_pop_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type Inheritence_Attribute_var_samp_fields {
  id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_var_samp_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type Inheritence_Attribute_variance_fields {
  id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "Inheritence_Attribute"
"""
input Inheritence_Attribute_variance_order_by {
  id: order_by
  problem_id: order_by
}
"""
columns and relationships of "Instrument"
"""
type Instrument {
  "An array relationship"
  ArchitecturePayloads("distinct select on columns" distinct_on: [ArchitecturePayload_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitecturePayload_order_by!], "filter the rows returned" where: ArchitecturePayload_bool_exp): [ArchitecturePayload!]!
  "An aggregate relationship"
  ArchitecturePayloads_aggregate("distinct select on columns" distinct_on: [ArchitecturePayload_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitecturePayload_order_by!], "filter the rows returned" where: ArchitecturePayload_bool_exp): ArchitecturePayload_aggregate!
  "An object relationship"
  Group: Group
  "An array relationship"
  Join__Instrument_Capabilities("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): [Join__Instrument_Capability!]!
  "An aggregate relationship"
  Join__Instrument_Capabilities_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): Join__Instrument_Capability_aggregate!
  "An array relationship"
  Join__Instrument_Characteristics("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): [Join__Instrument_Characteristic!]!
  "An aggregate relationship"
  Join__Instrument_Characteristics_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): Join__Instrument_Characteristic_aggregate!
  "An array relationship"
  Join__Instrument_Measurements("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): [Join__Instrument_Measurement!]!
  "An aggregate relationship"
  Join__Instrument_Measurements_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): Join__Instrument_Measurement_aggregate!
  "An array relationship"
  Join__Problem_Instruments("distinct select on columns" distinct_on: [Join__Problem_Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Instrument_order_by!], "filter the rows returned" where: Join__Problem_Instrument_bool_exp): [Join__Problem_Instrument!]!
  "An aggregate relationship"
  Join__Problem_Instruments_aggregate("distinct select on columns" distinct_on: [Join__Problem_Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Instrument_order_by!], "filter the rows returned" where: Join__Problem_Instrument_bool_exp): Join__Problem_Instrument_aggregate!
  group_id: Int
  id: Int!
  name: String
}
"""
columns and relationships of "Instrument_Attribute"
"""
type Instrument_Attribute {
  "An object relationship"
  Group: Group
  "An array relationship"
  Join__Instrument_Attribute_Values("distinct select on columns" distinct_on: [Join__Instrument_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Attribute_Values_order_by!], "filter the rows returned" where: Join__Instrument_Attribute_Values_bool_exp): [Join__Instrument_Attribute_Values!]!
  "An aggregate relationship"
  Join__Instrument_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Attribute_Values_order_by!], "filter the rows returned" where: Join__Instrument_Attribute_Values_bool_exp): Join__Instrument_Attribute_Values_aggregate!
  "An array relationship"
  Join__Instrument_Characteristics("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): [Join__Instrument_Characteristic!]!
  "An aggregate relationship"
  Join__Instrument_Characteristics_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): Join__Instrument_Characteristic_aggregate!
  group_id: Int
  id: Int!
  name: String
  slot_type: String
  type: String
}
"""
aggregated selection of "Instrument_Attribute"
"""
type Instrument_Attribute_aggregate {
  aggregate: Instrument_Attribute_aggregate_fields
  nodes: [Instrument_Attribute!]!
}
"""
aggregate fields of "Instrument_Attribute"
"""
type Instrument_Attribute_aggregate_fields {
  avg: Instrument_Attribute_avg_fields
  count(columns: [Instrument_Attribute_select_column!], distinct: Boolean): Int!
  max: Instrument_Attribute_max_fields
  min: Instrument_Attribute_min_fields
  stddev: Instrument_Attribute_stddev_fields
  stddev_pop: Instrument_Attribute_stddev_pop_fields
  stddev_samp: Instrument_Attribute_stddev_samp_fields
  sum: Instrument_Attribute_sum_fields
  var_pop: Instrument_Attribute_var_pop_fields
  var_samp: Instrument_Attribute_var_samp_fields
  variance: Instrument_Attribute_variance_fields
}
"""
order by aggregate values of table "Instrument_Attribute"
"""
input Instrument_Attribute_aggregate_order_by {
  avg: Instrument_Attribute_avg_order_by
  count: order_by
  max: Instrument_Attribute_max_order_by
  min: Instrument_Attribute_min_order_by
  stddev: Instrument_Attribute_stddev_order_by
  stddev_pop: Instrument_Attribute_stddev_pop_order_by
  stddev_samp: Instrument_Attribute_stddev_samp_order_by
  sum: Instrument_Attribute_sum_order_by
  var_pop: Instrument_Attribute_var_pop_order_by
  var_samp: Instrument_Attribute_var_samp_order_by
  variance: Instrument_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Instrument_Attribute"
"""
input Instrument_Attribute_arr_rel_insert_input {
  data: [Instrument_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Instrument_Attribute_on_conflict
}
"aggregate avg on columns"
type Instrument_Attribute_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Instrument_Attribute". All fields are combined with a logical 'AND'.
"""
input Instrument_Attribute_bool_exp {
  Group: Group_bool_exp
  Join__Instrument_Attribute_Values: Join__Instrument_Attribute_Values_bool_exp
  Join__Instrument_Characteristics: Join__Instrument_Characteristic_bool_exp
  _and: [Instrument_Attribute_bool_exp!]
  _not: Instrument_Attribute_bool_exp
  _or: [Instrument_Attribute_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  slot_type: String_comparison_exp
  type: String_comparison_exp
}
"""
unique or primary key constraints on table "Instrument_Attribute"
"""
enum Instrument_Attribute_constraint {
  "unique or primary key constraint"
  Instrument_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Instrument_Attribute"
"""
input Instrument_Attribute_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Instrument_Attribute"
"""
input Instrument_Attribute_insert_input {
  Group: Group_obj_rel_insert_input
  Join__Instrument_Attribute_Values: Join__Instrument_Attribute_Values_arr_rel_insert_input
  Join__Instrument_Characteristics: Join__Instrument_Characteristic_arr_rel_insert_input
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"aggregate max on columns"
type Instrument_Attribute_max_fields {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"""
order by max() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"aggregate min on columns"
type Instrument_Attribute_min_fields {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"""
order by min() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"""
response of any mutation on the table "Instrument_Attribute"
"""
type Instrument_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Instrument_Attribute!]!
}
"""
input type for inserting object relation for remote table "Instrument_Attribute"
"""
input Instrument_Attribute_obj_rel_insert_input {
  data: Instrument_Attribute_insert_input!
  "on conflict condition"
  on_conflict: Instrument_Attribute_on_conflict
}
"""
on conflict condition type for table "Instrument_Attribute"
"""
input Instrument_Attribute_on_conflict {
  constraint: Instrument_Attribute_constraint!
  update_columns: [Instrument_Attribute_update_column!]! = []
  where: Instrument_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Instrument_Attribute".
"""
input Instrument_Attribute_order_by {
  Group: Group_order_by
  Join__Instrument_Attribute_Values_aggregate: Join__Instrument_Attribute_Values_aggregate_order_by
  Join__Instrument_Characteristics_aggregate: Join__Instrument_Characteristic_aggregate_order_by
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"primary key columns input for table: Instrument_Attribute"
input Instrument_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Instrument_Attribute"
"""
enum Instrument_Attribute_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  slot_type
  "column name"
  type
}
"""
input type for updating data in table "Instrument_Attribute"
"""
input Instrument_Attribute_set_input {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"aggregate stddev on columns"
type Instrument_Attribute_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Instrument_Attribute_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Instrument_Attribute_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Instrument_Attribute_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Instrument_Attribute"
"""
enum Instrument_Attribute_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  slot_type
  "column name"
  type
}
"aggregate var_pop on columns"
type Instrument_Attribute_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Instrument_Attribute_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Instrument_Attribute_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Instrument_Attribute"
"""
input Instrument_Attribute_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
aggregated selection of "Instrument"
"""
type Instrument_aggregate {
  aggregate: Instrument_aggregate_fields
  nodes: [Instrument!]!
}
"""
aggregate fields of "Instrument"
"""
type Instrument_aggregate_fields {
  avg: Instrument_avg_fields
  count(columns: [Instrument_select_column!], distinct: Boolean): Int!
  max: Instrument_max_fields
  min: Instrument_min_fields
  stddev: Instrument_stddev_fields
  stddev_pop: Instrument_stddev_pop_fields
  stddev_samp: Instrument_stddev_samp_fields
  sum: Instrument_sum_fields
  var_pop: Instrument_var_pop_fields
  var_samp: Instrument_var_samp_fields
  variance: Instrument_variance_fields
}
"""
order by aggregate values of table "Instrument"
"""
input Instrument_aggregate_order_by {
  avg: Instrument_avg_order_by
  count: order_by
  max: Instrument_max_order_by
  min: Instrument_min_order_by
  stddev: Instrument_stddev_order_by
  stddev_pop: Instrument_stddev_pop_order_by
  stddev_samp: Instrument_stddev_samp_order_by
  sum: Instrument_sum_order_by
  var_pop: Instrument_var_pop_order_by
  var_samp: Instrument_var_samp_order_by
  variance: Instrument_variance_order_by
}
"""
input type for inserting array relation for remote table "Instrument"
"""
input Instrument_arr_rel_insert_input {
  data: [Instrument_insert_input!]!
  "on conflict condition"
  on_conflict: Instrument_on_conflict
}
"aggregate avg on columns"
type Instrument_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Instrument"
"""
input Instrument_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Instrument". All fields are combined with a logical 'AND'.
"""
input Instrument_bool_exp {
  ArchitecturePayloads: ArchitecturePayload_bool_exp
  Group: Group_bool_exp
  Join__Instrument_Capabilities: Join__Instrument_Capability_bool_exp
  Join__Instrument_Characteristics: Join__Instrument_Characteristic_bool_exp
  Join__Instrument_Measurements: Join__Instrument_Measurement_bool_exp
  Join__Problem_Instruments: Join__Problem_Instrument_bool_exp
  _and: [Instrument_bool_exp!]
  _not: Instrument_bool_exp
  _or: [Instrument_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}
"""
unique or primary key constraints on table "Instrument"
"""
enum Instrument_constraint {
  "unique or primary key constraint"
  Instrument_pkey
}
"""
input type for incrementing numeric columns in table "Instrument"
"""
input Instrument_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Instrument"
"""
input Instrument_insert_input {
  ArchitecturePayloads: ArchitecturePayload_arr_rel_insert_input
  Group: Group_obj_rel_insert_input
  Join__Instrument_Capabilities: Join__Instrument_Capability_arr_rel_insert_input
  Join__Instrument_Characteristics: Join__Instrument_Characteristic_arr_rel_insert_input
  Join__Instrument_Measurements: Join__Instrument_Measurement_arr_rel_insert_input
  Join__Problem_Instruments: Join__Problem_Instrument_arr_rel_insert_input
  group_id: Int
  id: Int
  name: String
}
"aggregate max on columns"
type Instrument_max_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by max() on columns of table "Instrument"
"""
input Instrument_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"aggregate min on columns"
type Instrument_min_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by min() on columns of table "Instrument"
"""
input Instrument_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"""
response of any mutation on the table "Instrument"
"""
type Instrument_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Instrument!]!
}
"""
input type for inserting object relation for remote table "Instrument"
"""
input Instrument_obj_rel_insert_input {
  data: Instrument_insert_input!
  "on conflict condition"
  on_conflict: Instrument_on_conflict
}
"""
on conflict condition type for table "Instrument"
"""
input Instrument_on_conflict {
  constraint: Instrument_constraint!
  update_columns: [Instrument_update_column!]! = []
  where: Instrument_bool_exp
}
"""
Ordering options when selecting data from "Instrument".
"""
input Instrument_order_by {
  ArchitecturePayloads_aggregate: ArchitecturePayload_aggregate_order_by
  Group: Group_order_by
  Join__Instrument_Capabilities_aggregate: Join__Instrument_Capability_aggregate_order_by
  Join__Instrument_Characteristics_aggregate: Join__Instrument_Characteristic_aggregate_order_by
  Join__Instrument_Measurements_aggregate: Join__Instrument_Measurement_aggregate_order_by
  Join__Problem_Instruments_aggregate: Join__Problem_Instrument_aggregate_order_by
  group_id: order_by
  id: order_by
  name: order_by
}
"primary key columns input for table: Instrument"
input Instrument_pk_columns_input {
  id: Int!
}
"""
select columns of table "Instrument"
"""
enum Instrument_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
}
"""
input type for updating data in table "Instrument"
"""
input Instrument_set_input {
  group_id: Int
  id: Int
  name: String
}
"aggregate stddev on columns"
type Instrument_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Instrument"
"""
input Instrument_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Instrument_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Instrument"
"""
input Instrument_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Instrument_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Instrument"
"""
input Instrument_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Instrument_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Instrument"
"""
input Instrument_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Instrument"
"""
enum Instrument_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
}
"aggregate var_pop on columns"
type Instrument_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Instrument"
"""
input Instrument_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Instrument_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Instrument"
"""
input Instrument_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Instrument_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Instrument"
"""
input Instrument_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}
"""
columns and relationships of "Join__AuthUser_Group"
"""
type Join__AuthUser_Group {
  "An object relationship"
  Group: Group
  admin: Boolean
  "An object relationship"
  auth_user: auth_user
  group_id: Int
  id: Int!
  user_id: Int
}
"""
aggregated selection of "Join__AuthUser_Group"
"""
type Join__AuthUser_Group_aggregate {
  aggregate: Join__AuthUser_Group_aggregate_fields
  nodes: [Join__AuthUser_Group!]!
}
"""
aggregate fields of "Join__AuthUser_Group"
"""
type Join__AuthUser_Group_aggregate_fields {
  avg: Join__AuthUser_Group_avg_fields
  count(columns: [Join__AuthUser_Group_select_column!], distinct: Boolean): Int!
  max: Join__AuthUser_Group_max_fields
  min: Join__AuthUser_Group_min_fields
  stddev: Join__AuthUser_Group_stddev_fields
  stddev_pop: Join__AuthUser_Group_stddev_pop_fields
  stddev_samp: Join__AuthUser_Group_stddev_samp_fields
  sum: Join__AuthUser_Group_sum_fields
  var_pop: Join__AuthUser_Group_var_pop_fields
  var_samp: Join__AuthUser_Group_var_samp_fields
  variance: Join__AuthUser_Group_variance_fields
}
"""
order by aggregate values of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_aggregate_order_by {
  avg: Join__AuthUser_Group_avg_order_by
  count: order_by
  max: Join__AuthUser_Group_max_order_by
  min: Join__AuthUser_Group_min_order_by
  stddev: Join__AuthUser_Group_stddev_order_by
  stddev_pop: Join__AuthUser_Group_stddev_pop_order_by
  stddev_samp: Join__AuthUser_Group_stddev_samp_order_by
  sum: Join__AuthUser_Group_sum_order_by
  var_pop: Join__AuthUser_Group_var_pop_order_by
  var_samp: Join__AuthUser_Group_var_samp_order_by
  variance: Join__AuthUser_Group_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_arr_rel_insert_input {
  data: [Join__AuthUser_Group_insert_input!]!
  "on conflict condition"
  on_conflict: Join__AuthUser_Group_on_conflict
}
"aggregate avg on columns"
type Join__AuthUser_Group_avg_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by avg() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_avg_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__AuthUser_Group". All fields are combined with a logical 'AND'.
"""
input Join__AuthUser_Group_bool_exp {
  Group: Group_bool_exp
  _and: [Join__AuthUser_Group_bool_exp!]
  _not: Join__AuthUser_Group_bool_exp
  _or: [Join__AuthUser_Group_bool_exp!]
  admin: Boolean_comparison_exp
  auth_user: auth_user_bool_exp
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  user_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__AuthUser_Group"
"""
enum Join__AuthUser_Group_constraint {
  "unique or primary key constraint"
  Join__AuthUser_Group_pkey
}
"""
input type for incrementing numeric columns in table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_inc_input {
  group_id: Int
  id: Int
  user_id: Int
}
"""
input type for inserting data into table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_insert_input {
  Group: Group_obj_rel_insert_input
  admin: Boolean
  auth_user: auth_user_obj_rel_insert_input
  group_id: Int
  id: Int
  user_id: Int
}
"aggregate max on columns"
type Join__AuthUser_Group_max_fields {
  group_id: Int
  id: Int
  user_id: Int
}
"""
order by max() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_max_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate min on columns"
type Join__AuthUser_Group_min_fields {
  group_id: Int
  id: Int
  user_id: Int
}
"""
order by min() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_min_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"""
response of any mutation on the table "Join__AuthUser_Group"
"""
type Join__AuthUser_Group_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__AuthUser_Group!]!
}
"""
on conflict condition type for table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_on_conflict {
  constraint: Join__AuthUser_Group_constraint!
  update_columns: [Join__AuthUser_Group_update_column!]! = []
  where: Join__AuthUser_Group_bool_exp
}
"""
Ordering options when selecting data from "Join__AuthUser_Group".
"""
input Join__AuthUser_Group_order_by {
  Group: Group_order_by
  admin: order_by
  auth_user: auth_user_order_by
  group_id: order_by
  id: order_by
  user_id: order_by
}
"primary key columns input for table: Join__AuthUser_Group"
input Join__AuthUser_Group_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__AuthUser_Group"
"""
enum Join__AuthUser_Group_select_column {
  "column name"
  admin
  "column name"
  group_id
  "column name"
  id
  "column name"
  user_id
}
"""
input type for updating data in table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_set_input {
  admin: Boolean
  group_id: Int
  id: Int
  user_id: Int
}
"aggregate stddev on columns"
type Join__AuthUser_Group_stddev_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by stddev() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_stddev_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate stddev_pop on columns"
type Join__AuthUser_Group_stddev_pop_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by stddev_pop() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_stddev_pop_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate stddev_samp on columns"
type Join__AuthUser_Group_stddev_samp_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by stddev_samp() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_stddev_samp_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate sum on columns"
type Join__AuthUser_Group_sum_fields {
  group_id: Int
  id: Int
  user_id: Int
}
"""
order by sum() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_sum_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"""
update columns of table "Join__AuthUser_Group"
"""
enum Join__AuthUser_Group_update_column {
  "column name"
  admin
  "column name"
  group_id
  "column name"
  id
  "column name"
  user_id
}
"aggregate var_pop on columns"
type Join__AuthUser_Group_var_pop_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by var_pop() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_var_pop_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate var_samp on columns"
type Join__AuthUser_Group_var_samp_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by var_samp() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_var_samp_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate variance on columns"
type Join__AuthUser_Group_variance_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by variance() on columns of table "Join__AuthUser_Group"
"""
input Join__AuthUser_Group_variance_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"""
columns and relationships of "Join__Case_Attribute"
"""
type Join__Case_Attribute {
  "An object relationship"
  Measurement_Attribute: Measurement_Attribute
  "An object relationship"
  Requirement_Rule_Case: Requirement_Rule_Case
  id: Int!
  measurement_attribute_id: Int
  operation: String
  rule_id: Int
  value: String
}
"""
aggregated selection of "Join__Case_Attribute"
"""
type Join__Case_Attribute_aggregate {
  aggregate: Join__Case_Attribute_aggregate_fields
  nodes: [Join__Case_Attribute!]!
}
"""
aggregate fields of "Join__Case_Attribute"
"""
type Join__Case_Attribute_aggregate_fields {
  avg: Join__Case_Attribute_avg_fields
  count(columns: [Join__Case_Attribute_select_column!], distinct: Boolean): Int!
  max: Join__Case_Attribute_max_fields
  min: Join__Case_Attribute_min_fields
  stddev: Join__Case_Attribute_stddev_fields
  stddev_pop: Join__Case_Attribute_stddev_pop_fields
  stddev_samp: Join__Case_Attribute_stddev_samp_fields
  sum: Join__Case_Attribute_sum_fields
  var_pop: Join__Case_Attribute_var_pop_fields
  var_samp: Join__Case_Attribute_var_samp_fields
  variance: Join__Case_Attribute_variance_fields
}
"""
order by aggregate values of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_aggregate_order_by {
  avg: Join__Case_Attribute_avg_order_by
  count: order_by
  max: Join__Case_Attribute_max_order_by
  min: Join__Case_Attribute_min_order_by
  stddev: Join__Case_Attribute_stddev_order_by
  stddev_pop: Join__Case_Attribute_stddev_pop_order_by
  stddev_samp: Join__Case_Attribute_stddev_samp_order_by
  sum: Join__Case_Attribute_sum_order_by
  var_pop: Join__Case_Attribute_var_pop_order_by
  var_samp: Join__Case_Attribute_var_samp_order_by
  variance: Join__Case_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Case_Attribute"
"""
input Join__Case_Attribute_arr_rel_insert_input {
  data: [Join__Case_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Case_Attribute_on_conflict
}
"aggregate avg on columns"
type Join__Case_Attribute_avg_fields {
  id: Float
  measurement_attribute_id: Float
  rule_id: Float
}
"""
order by avg() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_avg_order_by {
  id: order_by
  measurement_attribute_id: order_by
  rule_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Case_Attribute". All fields are combined with a logical 'AND'.
"""
input Join__Case_Attribute_bool_exp {
  Measurement_Attribute: Measurement_Attribute_bool_exp
  Requirement_Rule_Case: Requirement_Rule_Case_bool_exp
  _and: [Join__Case_Attribute_bool_exp!]
  _not: Join__Case_Attribute_bool_exp
  _or: [Join__Case_Attribute_bool_exp!]
  id: Int_comparison_exp
  measurement_attribute_id: Int_comparison_exp
  operation: String_comparison_exp
  rule_id: Int_comparison_exp
  value: String_comparison_exp
}
"""
unique or primary key constraints on table "Join__Case_Attribute"
"""
enum Join__Case_Attribute_constraint {
  "unique or primary key constraint"
  Join__Case_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Join__Case_Attribute"
"""
input Join__Case_Attribute_inc_input {
  id: Int
  measurement_attribute_id: Int
  rule_id: Int
}
"""
input type for inserting data into table "Join__Case_Attribute"
"""
input Join__Case_Attribute_insert_input {
  Measurement_Attribute: Measurement_Attribute_obj_rel_insert_input
  Requirement_Rule_Case: Requirement_Rule_Case_obj_rel_insert_input
  id: Int
  measurement_attribute_id: Int
  operation: String
  rule_id: Int
  value: String
}
"aggregate max on columns"
type Join__Case_Attribute_max_fields {
  id: Int
  measurement_attribute_id: Int
  operation: String
  rule_id: Int
  value: String
}
"""
order by max() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_max_order_by {
  id: order_by
  measurement_attribute_id: order_by
  operation: order_by
  rule_id: order_by
  value: order_by
}
"aggregate min on columns"
type Join__Case_Attribute_min_fields {
  id: Int
  measurement_attribute_id: Int
  operation: String
  rule_id: Int
  value: String
}
"""
order by min() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_min_order_by {
  id: order_by
  measurement_attribute_id: order_by
  operation: order_by
  rule_id: order_by
  value: order_by
}
"""
response of any mutation on the table "Join__Case_Attribute"
"""
type Join__Case_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Case_Attribute!]!
}
"""
on conflict condition type for table "Join__Case_Attribute"
"""
input Join__Case_Attribute_on_conflict {
  constraint: Join__Case_Attribute_constraint!
  update_columns: [Join__Case_Attribute_update_column!]! = []
  where: Join__Case_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Join__Case_Attribute".
"""
input Join__Case_Attribute_order_by {
  Measurement_Attribute: Measurement_Attribute_order_by
  Requirement_Rule_Case: Requirement_Rule_Case_order_by
  id: order_by
  measurement_attribute_id: order_by
  operation: order_by
  rule_id: order_by
  value: order_by
}
"primary key columns input for table: Join__Case_Attribute"
input Join__Case_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Case_Attribute"
"""
enum Join__Case_Attribute_select_column {
  "column name"
  id
  "column name"
  measurement_attribute_id
  "column name"
  operation
  "column name"
  rule_id
  "column name"
  value
}
"""
input type for updating data in table "Join__Case_Attribute"
"""
input Join__Case_Attribute_set_input {
  id: Int
  measurement_attribute_id: Int
  operation: String
  rule_id: Int
  value: String
}
"aggregate stddev on columns"
type Join__Case_Attribute_stddev_fields {
  id: Float
  measurement_attribute_id: Float
  rule_id: Float
}
"""
order by stddev() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_stddev_order_by {
  id: order_by
  measurement_attribute_id: order_by
  rule_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Case_Attribute_stddev_pop_fields {
  id: Float
  measurement_attribute_id: Float
  rule_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_stddev_pop_order_by {
  id: order_by
  measurement_attribute_id: order_by
  rule_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Case_Attribute_stddev_samp_fields {
  id: Float
  measurement_attribute_id: Float
  rule_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_stddev_samp_order_by {
  id: order_by
  measurement_attribute_id: order_by
  rule_id: order_by
}
"aggregate sum on columns"
type Join__Case_Attribute_sum_fields {
  id: Int
  measurement_attribute_id: Int
  rule_id: Int
}
"""
order by sum() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_sum_order_by {
  id: order_by
  measurement_attribute_id: order_by
  rule_id: order_by
}
"""
update columns of table "Join__Case_Attribute"
"""
enum Join__Case_Attribute_update_column {
  "column name"
  id
  "column name"
  measurement_attribute_id
  "column name"
  operation
  "column name"
  rule_id
  "column name"
  value
}
"aggregate var_pop on columns"
type Join__Case_Attribute_var_pop_fields {
  id: Float
  measurement_attribute_id: Float
  rule_id: Float
}
"""
order by var_pop() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_var_pop_order_by {
  id: order_by
  measurement_attribute_id: order_by
  rule_id: order_by
}
"aggregate var_samp on columns"
type Join__Case_Attribute_var_samp_fields {
  id: Float
  measurement_attribute_id: Float
  rule_id: Float
}
"""
order by var_samp() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_var_samp_order_by {
  id: order_by
  measurement_attribute_id: order_by
  rule_id: order_by
}
"aggregate variance on columns"
type Join__Case_Attribute_variance_fields {
  id: Float
  measurement_attribute_id: Float
  rule_id: Float
}
"""
order by variance() on columns of table "Join__Case_Attribute"
"""
input Join__Case_Attribute_variance_order_by {
  id: order_by
  measurement_attribute_id: order_by
  rule_id: order_by
}
"""
columns and relationships of "Join__Instrument_Attribute_Values"
"""
type Join__Instrument_Attribute_Values {
  "An object relationship"
  Accepted_Value: Accepted_Value
  "An object relationship"
  Instrument_Attribute: Instrument_Attribute
  attribute_id: Int
  id: Int!
  value_id: Int
}
"""
aggregated selection of "Join__Instrument_Attribute_Values"
"""
type Join__Instrument_Attribute_Values_aggregate {
  aggregate: Join__Instrument_Attribute_Values_aggregate_fields
  nodes: [Join__Instrument_Attribute_Values!]!
}
"""
aggregate fields of "Join__Instrument_Attribute_Values"
"""
type Join__Instrument_Attribute_Values_aggregate_fields {
  avg: Join__Instrument_Attribute_Values_avg_fields
  count(columns: [Join__Instrument_Attribute_Values_select_column!], distinct: Boolean): Int!
  max: Join__Instrument_Attribute_Values_max_fields
  min: Join__Instrument_Attribute_Values_min_fields
  stddev: Join__Instrument_Attribute_Values_stddev_fields
  stddev_pop: Join__Instrument_Attribute_Values_stddev_pop_fields
  stddev_samp: Join__Instrument_Attribute_Values_stddev_samp_fields
  sum: Join__Instrument_Attribute_Values_sum_fields
  var_pop: Join__Instrument_Attribute_Values_var_pop_fields
  var_samp: Join__Instrument_Attribute_Values_var_samp_fields
  variance: Join__Instrument_Attribute_Values_variance_fields
}
"""
order by aggregate values of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_aggregate_order_by {
  avg: Join__Instrument_Attribute_Values_avg_order_by
  count: order_by
  max: Join__Instrument_Attribute_Values_max_order_by
  min: Join__Instrument_Attribute_Values_min_order_by
  stddev: Join__Instrument_Attribute_Values_stddev_order_by
  stddev_pop: Join__Instrument_Attribute_Values_stddev_pop_order_by
  stddev_samp: Join__Instrument_Attribute_Values_stddev_samp_order_by
  sum: Join__Instrument_Attribute_Values_sum_order_by
  var_pop: Join__Instrument_Attribute_Values_var_pop_order_by
  var_samp: Join__Instrument_Attribute_Values_var_samp_order_by
  variance: Join__Instrument_Attribute_Values_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_arr_rel_insert_input {
  data: [Join__Instrument_Attribute_Values_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Instrument_Attribute_Values_on_conflict
}
"aggregate avg on columns"
type Join__Instrument_Attribute_Values_avg_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by avg() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_avg_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Instrument_Attribute_Values". All fields are combined with a logical 'AND'.
"""
input Join__Instrument_Attribute_Values_bool_exp {
  Accepted_Value: Accepted_Value_bool_exp
  Instrument_Attribute: Instrument_Attribute_bool_exp
  _and: [Join__Instrument_Attribute_Values_bool_exp!]
  _not: Join__Instrument_Attribute_Values_bool_exp
  _or: [Join__Instrument_Attribute_Values_bool_exp!]
  attribute_id: Int_comparison_exp
  id: Int_comparison_exp
  value_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__Instrument_Attribute_Values"
"""
enum Join__Instrument_Attribute_Values_constraint {
  "unique or primary key constraint"
  Join__Instrument_Attribute_Values_pkey
}
"""
input type for incrementing numeric columns in table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_inc_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
input type for inserting data into table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_insert_input {
  Accepted_Value: Accepted_Value_obj_rel_insert_input
  Instrument_Attribute: Instrument_Attribute_obj_rel_insert_input
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate max on columns"
type Join__Instrument_Attribute_Values_max_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by max() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_max_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate min on columns"
type Join__Instrument_Attribute_Values_min_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by min() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_min_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
response of any mutation on the table "Join__Instrument_Attribute_Values"
"""
type Join__Instrument_Attribute_Values_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Instrument_Attribute_Values!]!
}
"""
on conflict condition type for table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_on_conflict {
  constraint: Join__Instrument_Attribute_Values_constraint!
  update_columns: [Join__Instrument_Attribute_Values_update_column!]! = []
  where: Join__Instrument_Attribute_Values_bool_exp
}
"""
Ordering options when selecting data from "Join__Instrument_Attribute_Values".
"""
input Join__Instrument_Attribute_Values_order_by {
  Accepted_Value: Accepted_Value_order_by
  Instrument_Attribute: Instrument_Attribute_order_by
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"primary key columns input for table: Join__Instrument_Attribute_Values"
input Join__Instrument_Attribute_Values_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Instrument_Attribute_Values"
"""
enum Join__Instrument_Attribute_Values_select_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"""
input type for updating data in table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_set_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate stddev on columns"
type Join__Instrument_Attribute_Values_stddev_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_stddev_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Instrument_Attribute_Values_stddev_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_stddev_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Instrument_Attribute_Values_stddev_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_stddev_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate sum on columns"
type Join__Instrument_Attribute_Values_sum_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by sum() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_sum_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
update columns of table "Join__Instrument_Attribute_Values"
"""
enum Join__Instrument_Attribute_Values_update_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"aggregate var_pop on columns"
type Join__Instrument_Attribute_Values_var_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_pop() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_var_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate var_samp on columns"
type Join__Instrument_Attribute_Values_var_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_samp() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_var_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate variance on columns"
type Join__Instrument_Attribute_Values_variance_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by variance() on columns of table "Join__Instrument_Attribute_Values"
"""
input Join__Instrument_Attribute_Values_variance_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
columns and relationships of "Join__Instrument_Capability"
"""
type Join__Instrument_Capability {
  "An object relationship"
  Group: Group
  "An object relationship"
  Instrument: Instrument
  "An object relationship"
  Measurement: Measurement
  "An object relationship"
  Measurement_Attribute: Measurement_Attribute
  "An object relationship"
  Requirement_Rule_Case: Requirement_Rule_Case
  descriptor: String
  group_id: Int
  id: Int!
  instrument_id: Int
  measurement_attribute_id: Int
  measurement_id: Int
  requirement_rule_case_id: Int
  value: String
}
"""
aggregated selection of "Join__Instrument_Capability"
"""
type Join__Instrument_Capability_aggregate {
  aggregate: Join__Instrument_Capability_aggregate_fields
  nodes: [Join__Instrument_Capability!]!
}
"""
aggregate fields of "Join__Instrument_Capability"
"""
type Join__Instrument_Capability_aggregate_fields {
  avg: Join__Instrument_Capability_avg_fields
  count(columns: [Join__Instrument_Capability_select_column!], distinct: Boolean): Int!
  max: Join__Instrument_Capability_max_fields
  min: Join__Instrument_Capability_min_fields
  stddev: Join__Instrument_Capability_stddev_fields
  stddev_pop: Join__Instrument_Capability_stddev_pop_fields
  stddev_samp: Join__Instrument_Capability_stddev_samp_fields
  sum: Join__Instrument_Capability_sum_fields
  var_pop: Join__Instrument_Capability_var_pop_fields
  var_samp: Join__Instrument_Capability_var_samp_fields
  variance: Join__Instrument_Capability_variance_fields
}
"""
order by aggregate values of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_aggregate_order_by {
  avg: Join__Instrument_Capability_avg_order_by
  count: order_by
  max: Join__Instrument_Capability_max_order_by
  min: Join__Instrument_Capability_min_order_by
  stddev: Join__Instrument_Capability_stddev_order_by
  stddev_pop: Join__Instrument_Capability_stddev_pop_order_by
  stddev_samp: Join__Instrument_Capability_stddev_samp_order_by
  sum: Join__Instrument_Capability_sum_order_by
  var_pop: Join__Instrument_Capability_var_pop_order_by
  var_samp: Join__Instrument_Capability_var_samp_order_by
  variance: Join__Instrument_Capability_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_arr_rel_insert_input {
  data: [Join__Instrument_Capability_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Instrument_Capability_on_conflict
}
"aggregate avg on columns"
type Join__Instrument_Capability_avg_fields {
  group_id: Float
  id: Float
  instrument_id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  requirement_rule_case_id: Float
}
"""
order by avg() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_avg_order_by {
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Instrument_Capability". All fields are combined with a logical 'AND'.
"""
input Join__Instrument_Capability_bool_exp {
  Group: Group_bool_exp
  Instrument: Instrument_bool_exp
  Measurement: Measurement_bool_exp
  Measurement_Attribute: Measurement_Attribute_bool_exp
  Requirement_Rule_Case: Requirement_Rule_Case_bool_exp
  _and: [Join__Instrument_Capability_bool_exp!]
  _not: Join__Instrument_Capability_bool_exp
  _or: [Join__Instrument_Capability_bool_exp!]
  descriptor: String_comparison_exp
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  instrument_id: Int_comparison_exp
  measurement_attribute_id: Int_comparison_exp
  measurement_id: Int_comparison_exp
  requirement_rule_case_id: Int_comparison_exp
  value: String_comparison_exp
}
"""
unique or primary key constraints on table "Join__Instrument_Capability"
"""
enum Join__Instrument_Capability_constraint {
  "unique or primary key constraint"
  Join__Instrument_Capability_pkey
}
"""
input type for incrementing numeric columns in table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_inc_input {
  group_id: Int
  id: Int
  instrument_id: Int
  measurement_attribute_id: Int
  measurement_id: Int
  requirement_rule_case_id: Int
}
"""
input type for inserting data into table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_insert_input {
  Group: Group_obj_rel_insert_input
  Instrument: Instrument_obj_rel_insert_input
  Measurement: Measurement_obj_rel_insert_input
  Measurement_Attribute: Measurement_Attribute_obj_rel_insert_input
  Requirement_Rule_Case: Requirement_Rule_Case_obj_rel_insert_input
  descriptor: String
  group_id: Int
  id: Int
  instrument_id: Int
  measurement_attribute_id: Int
  measurement_id: Int
  requirement_rule_case_id: Int
  value: String
}
"aggregate max on columns"
type Join__Instrument_Capability_max_fields {
  descriptor: String
  group_id: Int
  id: Int
  instrument_id: Int
  measurement_attribute_id: Int
  measurement_id: Int
  requirement_rule_case_id: Int
  value: String
}
"""
order by max() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_max_order_by {
  descriptor: order_by
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
  value: order_by
}
"aggregate min on columns"
type Join__Instrument_Capability_min_fields {
  descriptor: String
  group_id: Int
  id: Int
  instrument_id: Int
  measurement_attribute_id: Int
  measurement_id: Int
  requirement_rule_case_id: Int
  value: String
}
"""
order by min() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_min_order_by {
  descriptor: order_by
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
  value: order_by
}
"""
response of any mutation on the table "Join__Instrument_Capability"
"""
type Join__Instrument_Capability_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Instrument_Capability!]!
}
"""
on conflict condition type for table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_on_conflict {
  constraint: Join__Instrument_Capability_constraint!
  update_columns: [Join__Instrument_Capability_update_column!]! = []
  where: Join__Instrument_Capability_bool_exp
}
"""
Ordering options when selecting data from "Join__Instrument_Capability".
"""
input Join__Instrument_Capability_order_by {
  Group: Group_order_by
  Instrument: Instrument_order_by
  Measurement: Measurement_order_by
  Measurement_Attribute: Measurement_Attribute_order_by
  Requirement_Rule_Case: Requirement_Rule_Case_order_by
  descriptor: order_by
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
  value: order_by
}
"primary key columns input for table: Join__Instrument_Capability"
input Join__Instrument_Capability_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Instrument_Capability"
"""
enum Join__Instrument_Capability_select_column {
  "column name"
  descriptor
  "column name"
  group_id
  "column name"
  id
  "column name"
  instrument_id
  "column name"
  measurement_attribute_id
  "column name"
  measurement_id
  "column name"
  requirement_rule_case_id
  "column name"
  value
}
"""
input type for updating data in table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_set_input {
  descriptor: String
  group_id: Int
  id: Int
  instrument_id: Int
  measurement_attribute_id: Int
  measurement_id: Int
  requirement_rule_case_id: Int
  value: String
}
"aggregate stddev on columns"
type Join__Instrument_Capability_stddev_fields {
  group_id: Float
  id: Float
  instrument_id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  requirement_rule_case_id: Float
}
"""
order by stddev() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_stddev_order_by {
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Instrument_Capability_stddev_pop_fields {
  group_id: Float
  id: Float
  instrument_id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  requirement_rule_case_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_stddev_pop_order_by {
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Instrument_Capability_stddev_samp_fields {
  group_id: Float
  id: Float
  instrument_id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  requirement_rule_case_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_stddev_samp_order_by {
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
}
"aggregate sum on columns"
type Join__Instrument_Capability_sum_fields {
  group_id: Int
  id: Int
  instrument_id: Int
  measurement_attribute_id: Int
  measurement_id: Int
  requirement_rule_case_id: Int
}
"""
order by sum() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_sum_order_by {
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
}
"""
update columns of table "Join__Instrument_Capability"
"""
enum Join__Instrument_Capability_update_column {
  "column name"
  descriptor
  "column name"
  group_id
  "column name"
  id
  "column name"
  instrument_id
  "column name"
  measurement_attribute_id
  "column name"
  measurement_id
  "column name"
  requirement_rule_case_id
  "column name"
  value
}
"aggregate var_pop on columns"
type Join__Instrument_Capability_var_pop_fields {
  group_id: Float
  id: Float
  instrument_id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  requirement_rule_case_id: Float
}
"""
order by var_pop() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_var_pop_order_by {
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
}
"aggregate var_samp on columns"
type Join__Instrument_Capability_var_samp_fields {
  group_id: Float
  id: Float
  instrument_id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  requirement_rule_case_id: Float
}
"""
order by var_samp() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_var_samp_order_by {
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
}
"aggregate variance on columns"
type Join__Instrument_Capability_variance_fields {
  group_id: Float
  id: Float
  instrument_id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  requirement_rule_case_id: Float
}
"""
order by variance() on columns of table "Join__Instrument_Capability"
"""
input Join__Instrument_Capability_variance_order_by {
  group_id: order_by
  id: order_by
  instrument_id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  requirement_rule_case_id: order_by
}
"""
columns and relationships of "Join__Instrument_Characteristic"
"""
type Join__Instrument_Characteristic {
  "An object relationship"
  Group: Group
  "An object relationship"
  Instrument: Instrument
  "An object relationship"
  Instrument_Attribute: Instrument_Attribute
  "An object relationship"
  Problem: Problem
  group_id: Int
  id: Int!
  instrument_attribute_id: Int
  instrument_id: Int
  problem_id: Int
  value: String
}
"""
aggregated selection of "Join__Instrument_Characteristic"
"""
type Join__Instrument_Characteristic_aggregate {
  aggregate: Join__Instrument_Characteristic_aggregate_fields
  nodes: [Join__Instrument_Characteristic!]!
}
"""
aggregate fields of "Join__Instrument_Characteristic"
"""
type Join__Instrument_Characteristic_aggregate_fields {
  avg: Join__Instrument_Characteristic_avg_fields
  count(columns: [Join__Instrument_Characteristic_select_column!], distinct: Boolean): Int!
  max: Join__Instrument_Characteristic_max_fields
  min: Join__Instrument_Characteristic_min_fields
  stddev: Join__Instrument_Characteristic_stddev_fields
  stddev_pop: Join__Instrument_Characteristic_stddev_pop_fields
  stddev_samp: Join__Instrument_Characteristic_stddev_samp_fields
  sum: Join__Instrument_Characteristic_sum_fields
  var_pop: Join__Instrument_Characteristic_var_pop_fields
  var_samp: Join__Instrument_Characteristic_var_samp_fields
  variance: Join__Instrument_Characteristic_variance_fields
}
"""
order by aggregate values of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_aggregate_order_by {
  avg: Join__Instrument_Characteristic_avg_order_by
  count: order_by
  max: Join__Instrument_Characteristic_max_order_by
  min: Join__Instrument_Characteristic_min_order_by
  stddev: Join__Instrument_Characteristic_stddev_order_by
  stddev_pop: Join__Instrument_Characteristic_stddev_pop_order_by
  stddev_samp: Join__Instrument_Characteristic_stddev_samp_order_by
  sum: Join__Instrument_Characteristic_sum_order_by
  var_pop: Join__Instrument_Characteristic_var_pop_order_by
  var_samp: Join__Instrument_Characteristic_var_samp_order_by
  variance: Join__Instrument_Characteristic_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_arr_rel_insert_input {
  data: [Join__Instrument_Characteristic_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Instrument_Characteristic_on_conflict
}
"aggregate avg on columns"
type Join__Instrument_Characteristic_avg_fields {
  group_id: Float
  id: Float
  instrument_attribute_id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_avg_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Instrument_Characteristic". All fields are combined with a logical 'AND'.
"""
input Join__Instrument_Characteristic_bool_exp {
  Group: Group_bool_exp
  Instrument: Instrument_bool_exp
  Instrument_Attribute: Instrument_Attribute_bool_exp
  Problem: Problem_bool_exp
  _and: [Join__Instrument_Characteristic_bool_exp!]
  _not: Join__Instrument_Characteristic_bool_exp
  _or: [Join__Instrument_Characteristic_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  instrument_attribute_id: Int_comparison_exp
  instrument_id: Int_comparison_exp
  problem_id: Int_comparison_exp
  value: String_comparison_exp
}
"""
unique or primary key constraints on table "Join__Instrument_Characteristic"
"""
enum Join__Instrument_Characteristic_constraint {
  "unique or primary key constraint"
  Join__Instrument_Characteristic_pkey
}
"""
input type for incrementing numeric columns in table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_inc_input {
  group_id: Int
  id: Int
  instrument_attribute_id: Int
  instrument_id: Int
  problem_id: Int
}
"""
input type for inserting data into table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_insert_input {
  Group: Group_obj_rel_insert_input
  Instrument: Instrument_obj_rel_insert_input
  Instrument_Attribute: Instrument_Attribute_obj_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  group_id: Int
  id: Int
  instrument_attribute_id: Int
  instrument_id: Int
  problem_id: Int
  value: String
}
"aggregate max on columns"
type Join__Instrument_Characteristic_max_fields {
  group_id: Int
  id: Int
  instrument_attribute_id: Int
  instrument_id: Int
  problem_id: Int
  value: String
}
"""
order by max() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_max_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
  value: order_by
}
"aggregate min on columns"
type Join__Instrument_Characteristic_min_fields {
  group_id: Int
  id: Int
  instrument_attribute_id: Int
  instrument_id: Int
  problem_id: Int
  value: String
}
"""
order by min() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_min_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
  value: order_by
}
"""
response of any mutation on the table "Join__Instrument_Characteristic"
"""
type Join__Instrument_Characteristic_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Instrument_Characteristic!]!
}
"""
on conflict condition type for table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_on_conflict {
  constraint: Join__Instrument_Characteristic_constraint!
  update_columns: [Join__Instrument_Characteristic_update_column!]! = []
  where: Join__Instrument_Characteristic_bool_exp
}
"""
Ordering options when selecting data from "Join__Instrument_Characteristic".
"""
input Join__Instrument_Characteristic_order_by {
  Group: Group_order_by
  Instrument: Instrument_order_by
  Instrument_Attribute: Instrument_Attribute_order_by
  Problem: Problem_order_by
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
  value: order_by
}
"primary key columns input for table: Join__Instrument_Characteristic"
input Join__Instrument_Characteristic_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Instrument_Characteristic"
"""
enum Join__Instrument_Characteristic_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  instrument_attribute_id
  "column name"
  instrument_id
  "column name"
  problem_id
  "column name"
  value
}
"""
input type for updating data in table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_set_input {
  group_id: Int
  id: Int
  instrument_attribute_id: Int
  instrument_id: Int
  problem_id: Int
  value: String
}
"aggregate stddev on columns"
type Join__Instrument_Characteristic_stddev_fields {
  group_id: Float
  id: Float
  instrument_attribute_id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_stddev_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Instrument_Characteristic_stddev_pop_fields {
  group_id: Float
  id: Float
  instrument_attribute_id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_stddev_pop_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Instrument_Characteristic_stddev_samp_fields {
  group_id: Float
  id: Float
  instrument_attribute_id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_stddev_samp_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type Join__Instrument_Characteristic_sum_fields {
  group_id: Int
  id: Int
  instrument_attribute_id: Int
  instrument_id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_sum_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"""
update columns of table "Join__Instrument_Characteristic"
"""
enum Join__Instrument_Characteristic_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  instrument_attribute_id
  "column name"
  instrument_id
  "column name"
  problem_id
  "column name"
  value
}
"aggregate var_pop on columns"
type Join__Instrument_Characteristic_var_pop_fields {
  group_id: Float
  id: Float
  instrument_attribute_id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_var_pop_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type Join__Instrument_Characteristic_var_samp_fields {
  group_id: Float
  id: Float
  instrument_attribute_id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_var_samp_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type Join__Instrument_Characteristic_variance_fields {
  group_id: Float
  id: Float
  instrument_attribute_id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "Join__Instrument_Characteristic"
"""
input Join__Instrument_Characteristic_variance_order_by {
  group_id: order_by
  id: order_by
  instrument_attribute_id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"""
columns and relationships of "Join__Instrument_Measurement"
"""
type Join__Instrument_Measurement {
  "An object relationship"
  Instrument: Instrument
  "An object relationship"
  Measurement: Measurement
  "An object relationship"
  Problem: Problem
  id: Int!
  instrument_id: Int
  measurement_id: Int
  problem_id: Int
}
"""
aggregated selection of "Join__Instrument_Measurement"
"""
type Join__Instrument_Measurement_aggregate {
  aggregate: Join__Instrument_Measurement_aggregate_fields
  nodes: [Join__Instrument_Measurement!]!
}
"""
aggregate fields of "Join__Instrument_Measurement"
"""
type Join__Instrument_Measurement_aggregate_fields {
  avg: Join__Instrument_Measurement_avg_fields
  count(columns: [Join__Instrument_Measurement_select_column!], distinct: Boolean): Int!
  max: Join__Instrument_Measurement_max_fields
  min: Join__Instrument_Measurement_min_fields
  stddev: Join__Instrument_Measurement_stddev_fields
  stddev_pop: Join__Instrument_Measurement_stddev_pop_fields
  stddev_samp: Join__Instrument_Measurement_stddev_samp_fields
  sum: Join__Instrument_Measurement_sum_fields
  var_pop: Join__Instrument_Measurement_var_pop_fields
  var_samp: Join__Instrument_Measurement_var_samp_fields
  variance: Join__Instrument_Measurement_variance_fields
}
"""
order by aggregate values of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_aggregate_order_by {
  avg: Join__Instrument_Measurement_avg_order_by
  count: order_by
  max: Join__Instrument_Measurement_max_order_by
  min: Join__Instrument_Measurement_min_order_by
  stddev: Join__Instrument_Measurement_stddev_order_by
  stddev_pop: Join__Instrument_Measurement_stddev_pop_order_by
  stddev_samp: Join__Instrument_Measurement_stddev_samp_order_by
  sum: Join__Instrument_Measurement_sum_order_by
  var_pop: Join__Instrument_Measurement_var_pop_order_by
  var_samp: Join__Instrument_Measurement_var_samp_order_by
  variance: Join__Instrument_Measurement_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_arr_rel_insert_input {
  data: [Join__Instrument_Measurement_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Instrument_Measurement_on_conflict
}
"aggregate avg on columns"
type Join__Instrument_Measurement_avg_fields {
  id: Float
  instrument_id: Float
  measurement_id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_avg_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Instrument_Measurement". All fields are combined with a logical 'AND'.
"""
input Join__Instrument_Measurement_bool_exp {
  Instrument: Instrument_bool_exp
  Measurement: Measurement_bool_exp
  Problem: Problem_bool_exp
  _and: [Join__Instrument_Measurement_bool_exp!]
  _not: Join__Instrument_Measurement_bool_exp
  _or: [Join__Instrument_Measurement_bool_exp!]
  id: Int_comparison_exp
  instrument_id: Int_comparison_exp
  measurement_id: Int_comparison_exp
  problem_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__Instrument_Measurement"
"""
enum Join__Instrument_Measurement_constraint {
  "unique or primary key constraint"
  Join__Instrument_Measurement_pkey
}
"""
input type for incrementing numeric columns in table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_inc_input {
  id: Int
  instrument_id: Int
  measurement_id: Int
  problem_id: Int
}
"""
input type for inserting data into table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_insert_input {
  Instrument: Instrument_obj_rel_insert_input
  Measurement: Measurement_obj_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  id: Int
  instrument_id: Int
  measurement_id: Int
  problem_id: Int
}
"aggregate max on columns"
type Join__Instrument_Measurement_max_fields {
  id: Int
  instrument_id: Int
  measurement_id: Int
  problem_id: Int
}
"""
order by max() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_max_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"aggregate min on columns"
type Join__Instrument_Measurement_min_fields {
  id: Int
  instrument_id: Int
  measurement_id: Int
  problem_id: Int
}
"""
order by min() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_min_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"""
response of any mutation on the table "Join__Instrument_Measurement"
"""
type Join__Instrument_Measurement_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Instrument_Measurement!]!
}
"""
on conflict condition type for table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_on_conflict {
  constraint: Join__Instrument_Measurement_constraint!
  update_columns: [Join__Instrument_Measurement_update_column!]! = []
  where: Join__Instrument_Measurement_bool_exp
}
"""
Ordering options when selecting data from "Join__Instrument_Measurement".
"""
input Join__Instrument_Measurement_order_by {
  Instrument: Instrument_order_by
  Measurement: Measurement_order_by
  Problem: Problem_order_by
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"primary key columns input for table: Join__Instrument_Measurement"
input Join__Instrument_Measurement_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Instrument_Measurement"
"""
enum Join__Instrument_Measurement_select_column {
  "column name"
  id
  "column name"
  instrument_id
  "column name"
  measurement_id
  "column name"
  problem_id
}
"""
input type for updating data in table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_set_input {
  id: Int
  instrument_id: Int
  measurement_id: Int
  problem_id: Int
}
"aggregate stddev on columns"
type Join__Instrument_Measurement_stddev_fields {
  id: Float
  instrument_id: Float
  measurement_id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_stddev_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Instrument_Measurement_stddev_pop_fields {
  id: Float
  instrument_id: Float
  measurement_id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_stddev_pop_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Instrument_Measurement_stddev_samp_fields {
  id: Float
  instrument_id: Float
  measurement_id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_stddev_samp_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type Join__Instrument_Measurement_sum_fields {
  id: Int
  instrument_id: Int
  measurement_id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_sum_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"""
update columns of table "Join__Instrument_Measurement"
"""
enum Join__Instrument_Measurement_update_column {
  "column name"
  id
  "column name"
  instrument_id
  "column name"
  measurement_id
  "column name"
  problem_id
}
"aggregate var_pop on columns"
type Join__Instrument_Measurement_var_pop_fields {
  id: Float
  instrument_id: Float
  measurement_id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_var_pop_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type Join__Instrument_Measurement_var_samp_fields {
  id: Float
  instrument_id: Float
  measurement_id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_var_samp_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type Join__Instrument_Measurement_variance_fields {
  id: Float
  instrument_id: Float
  measurement_id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "Join__Instrument_Measurement"
"""
input Join__Instrument_Measurement_variance_order_by {
  id: order_by
  instrument_id: order_by
  measurement_id: order_by
  problem_id: order_by
}
"""
columns and relationships of "Join__Launch_Vehicle_Attribute"
"""
type Join__Launch_Vehicle_Attribute {
  "An object relationship"
  Group: Group
  "An object relationship"
  Launch_Vehicle: Launch_Vehicle
  "An object relationship"
  Launch_Vehicle_Attribute: Launch_Vehicle_Attribute
  group_id: Int
  id: Int!
  launch_vehicle_attribute_id: Int
  launch_vehicle_id: Int
  value: String
}
"""
columns and relationships of "Join__Launch_Vehicle_Attribute_Values"
"""
type Join__Launch_Vehicle_Attribute_Values {
  "An object relationship"
  Accepted_Value: Accepted_Value
  "An object relationship"
  Launch_Vehicle_Attribute: Launch_Vehicle_Attribute
  attribute_id: Int
  id: Int!
  value_id: Int
}
"""
aggregated selection of "Join__Launch_Vehicle_Attribute_Values"
"""
type Join__Launch_Vehicle_Attribute_Values_aggregate {
  aggregate: Join__Launch_Vehicle_Attribute_Values_aggregate_fields
  nodes: [Join__Launch_Vehicle_Attribute_Values!]!
}
"""
aggregate fields of "Join__Launch_Vehicle_Attribute_Values"
"""
type Join__Launch_Vehicle_Attribute_Values_aggregate_fields {
  avg: Join__Launch_Vehicle_Attribute_Values_avg_fields
  count(columns: [Join__Launch_Vehicle_Attribute_Values_select_column!], distinct: Boolean): Int!
  max: Join__Launch_Vehicle_Attribute_Values_max_fields
  min: Join__Launch_Vehicle_Attribute_Values_min_fields
  stddev: Join__Launch_Vehicle_Attribute_Values_stddev_fields
  stddev_pop: Join__Launch_Vehicle_Attribute_Values_stddev_pop_fields
  stddev_samp: Join__Launch_Vehicle_Attribute_Values_stddev_samp_fields
  sum: Join__Launch_Vehicle_Attribute_Values_sum_fields
  var_pop: Join__Launch_Vehicle_Attribute_Values_var_pop_fields
  var_samp: Join__Launch_Vehicle_Attribute_Values_var_samp_fields
  variance: Join__Launch_Vehicle_Attribute_Values_variance_fields
}
"""
order by aggregate values of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_aggregate_order_by {
  avg: Join__Launch_Vehicle_Attribute_Values_avg_order_by
  count: order_by
  max: Join__Launch_Vehicle_Attribute_Values_max_order_by
  min: Join__Launch_Vehicle_Attribute_Values_min_order_by
  stddev: Join__Launch_Vehicle_Attribute_Values_stddev_order_by
  stddev_pop: Join__Launch_Vehicle_Attribute_Values_stddev_pop_order_by
  stddev_samp: Join__Launch_Vehicle_Attribute_Values_stddev_samp_order_by
  sum: Join__Launch_Vehicle_Attribute_Values_sum_order_by
  var_pop: Join__Launch_Vehicle_Attribute_Values_var_pop_order_by
  var_samp: Join__Launch_Vehicle_Attribute_Values_var_samp_order_by
  variance: Join__Launch_Vehicle_Attribute_Values_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_arr_rel_insert_input {
  data: [Join__Launch_Vehicle_Attribute_Values_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Launch_Vehicle_Attribute_Values_on_conflict
}
"aggregate avg on columns"
type Join__Launch_Vehicle_Attribute_Values_avg_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by avg() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_avg_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Launch_Vehicle_Attribute_Values". All fields are combined with a logical 'AND'.
"""
input Join__Launch_Vehicle_Attribute_Values_bool_exp {
  Accepted_Value: Accepted_Value_bool_exp
  Launch_Vehicle_Attribute: Launch_Vehicle_Attribute_bool_exp
  _and: [Join__Launch_Vehicle_Attribute_Values_bool_exp!]
  _not: Join__Launch_Vehicle_Attribute_Values_bool_exp
  _or: [Join__Launch_Vehicle_Attribute_Values_bool_exp!]
  attribute_id: Int_comparison_exp
  id: Int_comparison_exp
  value_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__Launch_Vehicle_Attribute_Values"
"""
enum Join__Launch_Vehicle_Attribute_Values_constraint {
  "unique or primary key constraint"
  Join__Launch_Vehicle_Attribute_Values_pkey
}
"""
input type for incrementing numeric columns in table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_inc_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
input type for inserting data into table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_insert_input {
  Accepted_Value: Accepted_Value_obj_rel_insert_input
  Launch_Vehicle_Attribute: Launch_Vehicle_Attribute_obj_rel_insert_input
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate max on columns"
type Join__Launch_Vehicle_Attribute_Values_max_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by max() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_max_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate min on columns"
type Join__Launch_Vehicle_Attribute_Values_min_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by min() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_min_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
response of any mutation on the table "Join__Launch_Vehicle_Attribute_Values"
"""
type Join__Launch_Vehicle_Attribute_Values_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Launch_Vehicle_Attribute_Values!]!
}
"""
on conflict condition type for table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_on_conflict {
  constraint: Join__Launch_Vehicle_Attribute_Values_constraint!
  update_columns: [Join__Launch_Vehicle_Attribute_Values_update_column!]! = []
  where: Join__Launch_Vehicle_Attribute_Values_bool_exp
}
"""
Ordering options when selecting data from "Join__Launch_Vehicle_Attribute_Values".
"""
input Join__Launch_Vehicle_Attribute_Values_order_by {
  Accepted_Value: Accepted_Value_order_by
  Launch_Vehicle_Attribute: Launch_Vehicle_Attribute_order_by
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"primary key columns input for table: Join__Launch_Vehicle_Attribute_Values"
input Join__Launch_Vehicle_Attribute_Values_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
enum Join__Launch_Vehicle_Attribute_Values_select_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"""
input type for updating data in table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_set_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate stddev on columns"
type Join__Launch_Vehicle_Attribute_Values_stddev_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_stddev_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Launch_Vehicle_Attribute_Values_stddev_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_stddev_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Launch_Vehicle_Attribute_Values_stddev_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_stddev_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate sum on columns"
type Join__Launch_Vehicle_Attribute_Values_sum_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by sum() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_sum_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
update columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
enum Join__Launch_Vehicle_Attribute_Values_update_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"aggregate var_pop on columns"
type Join__Launch_Vehicle_Attribute_Values_var_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_pop() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_var_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate var_samp on columns"
type Join__Launch_Vehicle_Attribute_Values_var_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_samp() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_var_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate variance on columns"
type Join__Launch_Vehicle_Attribute_Values_variance_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by variance() on columns of table "Join__Launch_Vehicle_Attribute_Values"
"""
input Join__Launch_Vehicle_Attribute_Values_variance_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
aggregated selection of "Join__Launch_Vehicle_Attribute"
"""
type Join__Launch_Vehicle_Attribute_aggregate {
  aggregate: Join__Launch_Vehicle_Attribute_aggregate_fields
  nodes: [Join__Launch_Vehicle_Attribute!]!
}
"""
aggregate fields of "Join__Launch_Vehicle_Attribute"
"""
type Join__Launch_Vehicle_Attribute_aggregate_fields {
  avg: Join__Launch_Vehicle_Attribute_avg_fields
  count(columns: [Join__Launch_Vehicle_Attribute_select_column!], distinct: Boolean): Int!
  max: Join__Launch_Vehicle_Attribute_max_fields
  min: Join__Launch_Vehicle_Attribute_min_fields
  stddev: Join__Launch_Vehicle_Attribute_stddev_fields
  stddev_pop: Join__Launch_Vehicle_Attribute_stddev_pop_fields
  stddev_samp: Join__Launch_Vehicle_Attribute_stddev_samp_fields
  sum: Join__Launch_Vehicle_Attribute_sum_fields
  var_pop: Join__Launch_Vehicle_Attribute_var_pop_fields
  var_samp: Join__Launch_Vehicle_Attribute_var_samp_fields
  variance: Join__Launch_Vehicle_Attribute_variance_fields
}
"""
order by aggregate values of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_aggregate_order_by {
  avg: Join__Launch_Vehicle_Attribute_avg_order_by
  count: order_by
  max: Join__Launch_Vehicle_Attribute_max_order_by
  min: Join__Launch_Vehicle_Attribute_min_order_by
  stddev: Join__Launch_Vehicle_Attribute_stddev_order_by
  stddev_pop: Join__Launch_Vehicle_Attribute_stddev_pop_order_by
  stddev_samp: Join__Launch_Vehicle_Attribute_stddev_samp_order_by
  sum: Join__Launch_Vehicle_Attribute_sum_order_by
  var_pop: Join__Launch_Vehicle_Attribute_var_pop_order_by
  var_samp: Join__Launch_Vehicle_Attribute_var_samp_order_by
  variance: Join__Launch_Vehicle_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_arr_rel_insert_input {
  data: [Join__Launch_Vehicle_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Launch_Vehicle_Attribute_on_conflict
}
"aggregate avg on columns"
type Join__Launch_Vehicle_Attribute_avg_fields {
  group_id: Float
  id: Float
  launch_vehicle_attribute_id: Float
  launch_vehicle_id: Float
}
"""
order by avg() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_avg_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Launch_Vehicle_Attribute". All fields are combined with a logical 'AND'.
"""
input Join__Launch_Vehicle_Attribute_bool_exp {
  Group: Group_bool_exp
  Launch_Vehicle: Launch_Vehicle_bool_exp
  Launch_Vehicle_Attribute: Launch_Vehicle_Attribute_bool_exp
  _and: [Join__Launch_Vehicle_Attribute_bool_exp!]
  _not: Join__Launch_Vehicle_Attribute_bool_exp
  _or: [Join__Launch_Vehicle_Attribute_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  launch_vehicle_attribute_id: Int_comparison_exp
  launch_vehicle_id: Int_comparison_exp
  value: String_comparison_exp
}
"""
unique or primary key constraints on table "Join__Launch_Vehicle_Attribute"
"""
enum Join__Launch_Vehicle_Attribute_constraint {
  "unique or primary key constraint"
  Join__Launch_Vehicle_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_inc_input {
  group_id: Int
  id: Int
  launch_vehicle_attribute_id: Int
  launch_vehicle_id: Int
}
"""
input type for inserting data into table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_insert_input {
  Group: Group_obj_rel_insert_input
  Launch_Vehicle: Launch_Vehicle_obj_rel_insert_input
  Launch_Vehicle_Attribute: Launch_Vehicle_Attribute_obj_rel_insert_input
  group_id: Int
  id: Int
  launch_vehicle_attribute_id: Int
  launch_vehicle_id: Int
  value: String
}
"aggregate max on columns"
type Join__Launch_Vehicle_Attribute_max_fields {
  group_id: Int
  id: Int
  launch_vehicle_attribute_id: Int
  launch_vehicle_id: Int
  value: String
}
"""
order by max() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_max_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
  value: order_by
}
"aggregate min on columns"
type Join__Launch_Vehicle_Attribute_min_fields {
  group_id: Int
  id: Int
  launch_vehicle_attribute_id: Int
  launch_vehicle_id: Int
  value: String
}
"""
order by min() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_min_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
  value: order_by
}
"""
response of any mutation on the table "Join__Launch_Vehicle_Attribute"
"""
type Join__Launch_Vehicle_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Launch_Vehicle_Attribute!]!
}
"""
on conflict condition type for table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_on_conflict {
  constraint: Join__Launch_Vehicle_Attribute_constraint!
  update_columns: [Join__Launch_Vehicle_Attribute_update_column!]! = []
  where: Join__Launch_Vehicle_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Join__Launch_Vehicle_Attribute".
"""
input Join__Launch_Vehicle_Attribute_order_by {
  Group: Group_order_by
  Launch_Vehicle: Launch_Vehicle_order_by
  Launch_Vehicle_Attribute: Launch_Vehicle_Attribute_order_by
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
  value: order_by
}
"primary key columns input for table: Join__Launch_Vehicle_Attribute"
input Join__Launch_Vehicle_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Launch_Vehicle_Attribute"
"""
enum Join__Launch_Vehicle_Attribute_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  launch_vehicle_attribute_id
  "column name"
  launch_vehicle_id
  "column name"
  value
}
"""
input type for updating data in table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_set_input {
  group_id: Int
  id: Int
  launch_vehicle_attribute_id: Int
  launch_vehicle_id: Int
  value: String
}
"aggregate stddev on columns"
type Join__Launch_Vehicle_Attribute_stddev_fields {
  group_id: Float
  id: Float
  launch_vehicle_attribute_id: Float
  launch_vehicle_id: Float
}
"""
order by stddev() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_stddev_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Launch_Vehicle_Attribute_stddev_pop_fields {
  group_id: Float
  id: Float
  launch_vehicle_attribute_id: Float
  launch_vehicle_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_stddev_pop_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Launch_Vehicle_Attribute_stddev_samp_fields {
  group_id: Float
  id: Float
  launch_vehicle_attribute_id: Float
  launch_vehicle_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_stddev_samp_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
}
"aggregate sum on columns"
type Join__Launch_Vehicle_Attribute_sum_fields {
  group_id: Int
  id: Int
  launch_vehicle_attribute_id: Int
  launch_vehicle_id: Int
}
"""
order by sum() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_sum_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
}
"""
update columns of table "Join__Launch_Vehicle_Attribute"
"""
enum Join__Launch_Vehicle_Attribute_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  launch_vehicle_attribute_id
  "column name"
  launch_vehicle_id
  "column name"
  value
}
"aggregate var_pop on columns"
type Join__Launch_Vehicle_Attribute_var_pop_fields {
  group_id: Float
  id: Float
  launch_vehicle_attribute_id: Float
  launch_vehicle_id: Float
}
"""
order by var_pop() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_var_pop_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
}
"aggregate var_samp on columns"
type Join__Launch_Vehicle_Attribute_var_samp_fields {
  group_id: Float
  id: Float
  launch_vehicle_attribute_id: Float
  launch_vehicle_id: Float
}
"""
order by var_samp() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_var_samp_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
}
"aggregate variance on columns"
type Join__Launch_Vehicle_Attribute_variance_fields {
  group_id: Float
  id: Float
  launch_vehicle_attribute_id: Float
  launch_vehicle_id: Float
}
"""
order by variance() on columns of table "Join__Launch_Vehicle_Attribute"
"""
input Join__Launch_Vehicle_Attribute_variance_order_by {
  group_id: order_by
  id: order_by
  launch_vehicle_attribute_id: order_by
  launch_vehicle_id: order_by
}
"""
columns and relationships of "Join__Measurement_Attribute_Values"
"""
type Join__Measurement_Attribute_Values {
  "An object relationship"
  Accepted_Value: Accepted_Value
  "An object relationship"
  Measurement_Attribute: Measurement_Attribute
  attribute_id: Int
  id: Int!
  value_id: Int
}
"""
aggregated selection of "Join__Measurement_Attribute_Values"
"""
type Join__Measurement_Attribute_Values_aggregate {
  aggregate: Join__Measurement_Attribute_Values_aggregate_fields
  nodes: [Join__Measurement_Attribute_Values!]!
}
"""
aggregate fields of "Join__Measurement_Attribute_Values"
"""
type Join__Measurement_Attribute_Values_aggregate_fields {
  avg: Join__Measurement_Attribute_Values_avg_fields
  count(columns: [Join__Measurement_Attribute_Values_select_column!], distinct: Boolean): Int!
  max: Join__Measurement_Attribute_Values_max_fields
  min: Join__Measurement_Attribute_Values_min_fields
  stddev: Join__Measurement_Attribute_Values_stddev_fields
  stddev_pop: Join__Measurement_Attribute_Values_stddev_pop_fields
  stddev_samp: Join__Measurement_Attribute_Values_stddev_samp_fields
  sum: Join__Measurement_Attribute_Values_sum_fields
  var_pop: Join__Measurement_Attribute_Values_var_pop_fields
  var_samp: Join__Measurement_Attribute_Values_var_samp_fields
  variance: Join__Measurement_Attribute_Values_variance_fields
}
"""
order by aggregate values of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_aggregate_order_by {
  avg: Join__Measurement_Attribute_Values_avg_order_by
  count: order_by
  max: Join__Measurement_Attribute_Values_max_order_by
  min: Join__Measurement_Attribute_Values_min_order_by
  stddev: Join__Measurement_Attribute_Values_stddev_order_by
  stddev_pop: Join__Measurement_Attribute_Values_stddev_pop_order_by
  stddev_samp: Join__Measurement_Attribute_Values_stddev_samp_order_by
  sum: Join__Measurement_Attribute_Values_sum_order_by
  var_pop: Join__Measurement_Attribute_Values_var_pop_order_by
  var_samp: Join__Measurement_Attribute_Values_var_samp_order_by
  variance: Join__Measurement_Attribute_Values_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_arr_rel_insert_input {
  data: [Join__Measurement_Attribute_Values_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Measurement_Attribute_Values_on_conflict
}
"aggregate avg on columns"
type Join__Measurement_Attribute_Values_avg_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by avg() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_avg_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Measurement_Attribute_Values". All fields are combined with a logical 'AND'.
"""
input Join__Measurement_Attribute_Values_bool_exp {
  Accepted_Value: Accepted_Value_bool_exp
  Measurement_Attribute: Measurement_Attribute_bool_exp
  _and: [Join__Measurement_Attribute_Values_bool_exp!]
  _not: Join__Measurement_Attribute_Values_bool_exp
  _or: [Join__Measurement_Attribute_Values_bool_exp!]
  attribute_id: Int_comparison_exp
  id: Int_comparison_exp
  value_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__Measurement_Attribute_Values"
"""
enum Join__Measurement_Attribute_Values_constraint {
  "unique or primary key constraint"
  Join__Measurement_Attribute_Values_pkey
}
"""
input type for incrementing numeric columns in table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_inc_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
input type for inserting data into table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_insert_input {
  Accepted_Value: Accepted_Value_obj_rel_insert_input
  Measurement_Attribute: Measurement_Attribute_obj_rel_insert_input
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate max on columns"
type Join__Measurement_Attribute_Values_max_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by max() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_max_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate min on columns"
type Join__Measurement_Attribute_Values_min_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by min() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_min_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
response of any mutation on the table "Join__Measurement_Attribute_Values"
"""
type Join__Measurement_Attribute_Values_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Measurement_Attribute_Values!]!
}
"""
on conflict condition type for table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_on_conflict {
  constraint: Join__Measurement_Attribute_Values_constraint!
  update_columns: [Join__Measurement_Attribute_Values_update_column!]! = []
  where: Join__Measurement_Attribute_Values_bool_exp
}
"""
Ordering options when selecting data from "Join__Measurement_Attribute_Values".
"""
input Join__Measurement_Attribute_Values_order_by {
  Accepted_Value: Accepted_Value_order_by
  Measurement_Attribute: Measurement_Attribute_order_by
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"primary key columns input for table: Join__Measurement_Attribute_Values"
input Join__Measurement_Attribute_Values_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Measurement_Attribute_Values"
"""
enum Join__Measurement_Attribute_Values_select_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"""
input type for updating data in table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_set_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate stddev on columns"
type Join__Measurement_Attribute_Values_stddev_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_stddev_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Measurement_Attribute_Values_stddev_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_stddev_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Measurement_Attribute_Values_stddev_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_stddev_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate sum on columns"
type Join__Measurement_Attribute_Values_sum_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by sum() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_sum_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
update columns of table "Join__Measurement_Attribute_Values"
"""
enum Join__Measurement_Attribute_Values_update_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"aggregate var_pop on columns"
type Join__Measurement_Attribute_Values_var_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_pop() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_var_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate var_samp on columns"
type Join__Measurement_Attribute_Values_var_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_samp() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_var_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate variance on columns"
type Join__Measurement_Attribute_Values_variance_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by variance() on columns of table "Join__Measurement_Attribute_Values"
"""
input Join__Measurement_Attribute_Values_variance_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
columns and relationships of "Join__Mission_Attribute_Values"
"""
type Join__Mission_Attribute_Values {
  "An object relationship"
  Accepted_Value: Accepted_Value
  "An object relationship"
  Mission_Attribute: Mission_Attribute
  attribute_id: Int
  id: Int!
  value_id: Int
}
"""
aggregated selection of "Join__Mission_Attribute_Values"
"""
type Join__Mission_Attribute_Values_aggregate {
  aggregate: Join__Mission_Attribute_Values_aggregate_fields
  nodes: [Join__Mission_Attribute_Values!]!
}
"""
aggregate fields of "Join__Mission_Attribute_Values"
"""
type Join__Mission_Attribute_Values_aggregate_fields {
  avg: Join__Mission_Attribute_Values_avg_fields
  count(columns: [Join__Mission_Attribute_Values_select_column!], distinct: Boolean): Int!
  max: Join__Mission_Attribute_Values_max_fields
  min: Join__Mission_Attribute_Values_min_fields
  stddev: Join__Mission_Attribute_Values_stddev_fields
  stddev_pop: Join__Mission_Attribute_Values_stddev_pop_fields
  stddev_samp: Join__Mission_Attribute_Values_stddev_samp_fields
  sum: Join__Mission_Attribute_Values_sum_fields
  var_pop: Join__Mission_Attribute_Values_var_pop_fields
  var_samp: Join__Mission_Attribute_Values_var_samp_fields
  variance: Join__Mission_Attribute_Values_variance_fields
}
"""
order by aggregate values of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_aggregate_order_by {
  avg: Join__Mission_Attribute_Values_avg_order_by
  count: order_by
  max: Join__Mission_Attribute_Values_max_order_by
  min: Join__Mission_Attribute_Values_min_order_by
  stddev: Join__Mission_Attribute_Values_stddev_order_by
  stddev_pop: Join__Mission_Attribute_Values_stddev_pop_order_by
  stddev_samp: Join__Mission_Attribute_Values_stddev_samp_order_by
  sum: Join__Mission_Attribute_Values_sum_order_by
  var_pop: Join__Mission_Attribute_Values_var_pop_order_by
  var_samp: Join__Mission_Attribute_Values_var_samp_order_by
  variance: Join__Mission_Attribute_Values_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_arr_rel_insert_input {
  data: [Join__Mission_Attribute_Values_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Mission_Attribute_Values_on_conflict
}
"aggregate avg on columns"
type Join__Mission_Attribute_Values_avg_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by avg() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_avg_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Mission_Attribute_Values". All fields are combined with a logical 'AND'.
"""
input Join__Mission_Attribute_Values_bool_exp {
  Accepted_Value: Accepted_Value_bool_exp
  Mission_Attribute: Mission_Attribute_bool_exp
  _and: [Join__Mission_Attribute_Values_bool_exp!]
  _not: Join__Mission_Attribute_Values_bool_exp
  _or: [Join__Mission_Attribute_Values_bool_exp!]
  attribute_id: Int_comparison_exp
  id: Int_comparison_exp
  value_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__Mission_Attribute_Values"
"""
enum Join__Mission_Attribute_Values_constraint {
  "unique or primary key constraint"
  Join__Mission_Attribute_Values_pkey
}
"""
input type for incrementing numeric columns in table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_inc_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
input type for inserting data into table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_insert_input {
  Accepted_Value: Accepted_Value_obj_rel_insert_input
  Mission_Attribute: Mission_Attribute_obj_rel_insert_input
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate max on columns"
type Join__Mission_Attribute_Values_max_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by max() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_max_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate min on columns"
type Join__Mission_Attribute_Values_min_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by min() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_min_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
response of any mutation on the table "Join__Mission_Attribute_Values"
"""
type Join__Mission_Attribute_Values_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Mission_Attribute_Values!]!
}
"""
on conflict condition type for table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_on_conflict {
  constraint: Join__Mission_Attribute_Values_constraint!
  update_columns: [Join__Mission_Attribute_Values_update_column!]! = []
  where: Join__Mission_Attribute_Values_bool_exp
}
"""
Ordering options when selecting data from "Join__Mission_Attribute_Values".
"""
input Join__Mission_Attribute_Values_order_by {
  Accepted_Value: Accepted_Value_order_by
  Mission_Attribute: Mission_Attribute_order_by
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"primary key columns input for table: Join__Mission_Attribute_Values"
input Join__Mission_Attribute_Values_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Mission_Attribute_Values"
"""
enum Join__Mission_Attribute_Values_select_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"""
input type for updating data in table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_set_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate stddev on columns"
type Join__Mission_Attribute_Values_stddev_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_stddev_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Mission_Attribute_Values_stddev_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_stddev_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Mission_Attribute_Values_stddev_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_stddev_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate sum on columns"
type Join__Mission_Attribute_Values_sum_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by sum() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_sum_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
update columns of table "Join__Mission_Attribute_Values"
"""
enum Join__Mission_Attribute_Values_update_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"aggregate var_pop on columns"
type Join__Mission_Attribute_Values_var_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_pop() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_var_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate var_samp on columns"
type Join__Mission_Attribute_Values_var_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_samp() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_var_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate variance on columns"
type Join__Mission_Attribute_Values_variance_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by variance() on columns of table "Join__Mission_Attribute_Values"
"""
input Join__Mission_Attribute_Values_variance_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
columns and relationships of "Join__Orbit_Attribute"
"""
type Join__Orbit_Attribute {
  "An object relationship"
  Group: Group
  "An object relationship"
  Orbit: Orbit
  "An object relationship"
  Orbit_Attribute: Orbit_Attribute
  group_id: Int
  id: Int!
  orbit_attribute_id: Int
  orbit_id: Int
  value: String
}
"""
columns and relationships of "Join__Orbit_Attribute_Values"
"""
type Join__Orbit_Attribute_Values {
  "An object relationship"
  Accepted_Value: Accepted_Value
  "An object relationship"
  Orbit_Attribute: Orbit_Attribute
  attribute_id: Int
  id: Int!
  value_id: Int
}
"""
aggregated selection of "Join__Orbit_Attribute_Values"
"""
type Join__Orbit_Attribute_Values_aggregate {
  aggregate: Join__Orbit_Attribute_Values_aggregate_fields
  nodes: [Join__Orbit_Attribute_Values!]!
}
"""
aggregate fields of "Join__Orbit_Attribute_Values"
"""
type Join__Orbit_Attribute_Values_aggregate_fields {
  avg: Join__Orbit_Attribute_Values_avg_fields
  count(columns: [Join__Orbit_Attribute_Values_select_column!], distinct: Boolean): Int!
  max: Join__Orbit_Attribute_Values_max_fields
  min: Join__Orbit_Attribute_Values_min_fields
  stddev: Join__Orbit_Attribute_Values_stddev_fields
  stddev_pop: Join__Orbit_Attribute_Values_stddev_pop_fields
  stddev_samp: Join__Orbit_Attribute_Values_stddev_samp_fields
  sum: Join__Orbit_Attribute_Values_sum_fields
  var_pop: Join__Orbit_Attribute_Values_var_pop_fields
  var_samp: Join__Orbit_Attribute_Values_var_samp_fields
  variance: Join__Orbit_Attribute_Values_variance_fields
}
"""
order by aggregate values of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_aggregate_order_by {
  avg: Join__Orbit_Attribute_Values_avg_order_by
  count: order_by
  max: Join__Orbit_Attribute_Values_max_order_by
  min: Join__Orbit_Attribute_Values_min_order_by
  stddev: Join__Orbit_Attribute_Values_stddev_order_by
  stddev_pop: Join__Orbit_Attribute_Values_stddev_pop_order_by
  stddev_samp: Join__Orbit_Attribute_Values_stddev_samp_order_by
  sum: Join__Orbit_Attribute_Values_sum_order_by
  var_pop: Join__Orbit_Attribute_Values_var_pop_order_by
  var_samp: Join__Orbit_Attribute_Values_var_samp_order_by
  variance: Join__Orbit_Attribute_Values_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_arr_rel_insert_input {
  data: [Join__Orbit_Attribute_Values_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Orbit_Attribute_Values_on_conflict
}
"aggregate avg on columns"
type Join__Orbit_Attribute_Values_avg_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by avg() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_avg_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Orbit_Attribute_Values". All fields are combined with a logical 'AND'.
"""
input Join__Orbit_Attribute_Values_bool_exp {
  Accepted_Value: Accepted_Value_bool_exp
  Orbit_Attribute: Orbit_Attribute_bool_exp
  _and: [Join__Orbit_Attribute_Values_bool_exp!]
  _not: Join__Orbit_Attribute_Values_bool_exp
  _or: [Join__Orbit_Attribute_Values_bool_exp!]
  attribute_id: Int_comparison_exp
  id: Int_comparison_exp
  value_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__Orbit_Attribute_Values"
"""
enum Join__Orbit_Attribute_Values_constraint {
  "unique or primary key constraint"
  Join__Orbit_Attribute_Values_pkey
}
"""
input type for incrementing numeric columns in table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_inc_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
input type for inserting data into table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_insert_input {
  Accepted_Value: Accepted_Value_obj_rel_insert_input
  Orbit_Attribute: Orbit_Attribute_obj_rel_insert_input
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate max on columns"
type Join__Orbit_Attribute_Values_max_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by max() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_max_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate min on columns"
type Join__Orbit_Attribute_Values_min_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by min() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_min_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
response of any mutation on the table "Join__Orbit_Attribute_Values"
"""
type Join__Orbit_Attribute_Values_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Orbit_Attribute_Values!]!
}
"""
on conflict condition type for table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_on_conflict {
  constraint: Join__Orbit_Attribute_Values_constraint!
  update_columns: [Join__Orbit_Attribute_Values_update_column!]! = []
  where: Join__Orbit_Attribute_Values_bool_exp
}
"""
Ordering options when selecting data from "Join__Orbit_Attribute_Values".
"""
input Join__Orbit_Attribute_Values_order_by {
  Accepted_Value: Accepted_Value_order_by
  Orbit_Attribute: Orbit_Attribute_order_by
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"primary key columns input for table: Join__Orbit_Attribute_Values"
input Join__Orbit_Attribute_Values_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Orbit_Attribute_Values"
"""
enum Join__Orbit_Attribute_Values_select_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"""
input type for updating data in table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_set_input {
  attribute_id: Int
  id: Int
  value_id: Int
}
"aggregate stddev on columns"
type Join__Orbit_Attribute_Values_stddev_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_stddev_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Orbit_Attribute_Values_stddev_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_stddev_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Orbit_Attribute_Values_stddev_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_stddev_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate sum on columns"
type Join__Orbit_Attribute_Values_sum_fields {
  attribute_id: Int
  id: Int
  value_id: Int
}
"""
order by sum() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_sum_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
update columns of table "Join__Orbit_Attribute_Values"
"""
enum Join__Orbit_Attribute_Values_update_column {
  "column name"
  attribute_id
  "column name"
  id
  "column name"
  value_id
}
"aggregate var_pop on columns"
type Join__Orbit_Attribute_Values_var_pop_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_pop() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_var_pop_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate var_samp on columns"
type Join__Orbit_Attribute_Values_var_samp_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by var_samp() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_var_samp_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"aggregate variance on columns"
type Join__Orbit_Attribute_Values_variance_fields {
  attribute_id: Float
  id: Float
  value_id: Float
}
"""
order by variance() on columns of table "Join__Orbit_Attribute_Values"
"""
input Join__Orbit_Attribute_Values_variance_order_by {
  attribute_id: order_by
  id: order_by
  value_id: order_by
}
"""
aggregated selection of "Join__Orbit_Attribute"
"""
type Join__Orbit_Attribute_aggregate {
  aggregate: Join__Orbit_Attribute_aggregate_fields
  nodes: [Join__Orbit_Attribute!]!
}
"""
aggregate fields of "Join__Orbit_Attribute"
"""
type Join__Orbit_Attribute_aggregate_fields {
  avg: Join__Orbit_Attribute_avg_fields
  count(columns: [Join__Orbit_Attribute_select_column!], distinct: Boolean): Int!
  max: Join__Orbit_Attribute_max_fields
  min: Join__Orbit_Attribute_min_fields
  stddev: Join__Orbit_Attribute_stddev_fields
  stddev_pop: Join__Orbit_Attribute_stddev_pop_fields
  stddev_samp: Join__Orbit_Attribute_stddev_samp_fields
  sum: Join__Orbit_Attribute_sum_fields
  var_pop: Join__Orbit_Attribute_var_pop_fields
  var_samp: Join__Orbit_Attribute_var_samp_fields
  variance: Join__Orbit_Attribute_variance_fields
}
"""
order by aggregate values of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_aggregate_order_by {
  avg: Join__Orbit_Attribute_avg_order_by
  count: order_by
  max: Join__Orbit_Attribute_max_order_by
  min: Join__Orbit_Attribute_min_order_by
  stddev: Join__Orbit_Attribute_stddev_order_by
  stddev_pop: Join__Orbit_Attribute_stddev_pop_order_by
  stddev_samp: Join__Orbit_Attribute_stddev_samp_order_by
  sum: Join__Orbit_Attribute_sum_order_by
  var_pop: Join__Orbit_Attribute_var_pop_order_by
  var_samp: Join__Orbit_Attribute_var_samp_order_by
  variance: Join__Orbit_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_arr_rel_insert_input {
  data: [Join__Orbit_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Orbit_Attribute_on_conflict
}
"aggregate avg on columns"
type Join__Orbit_Attribute_avg_fields {
  group_id: Float
  id: Float
  orbit_attribute_id: Float
  orbit_id: Float
}
"""
order by avg() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_avg_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Orbit_Attribute". All fields are combined with a logical 'AND'.
"""
input Join__Orbit_Attribute_bool_exp {
  Group: Group_bool_exp
  Orbit: Orbit_bool_exp
  Orbit_Attribute: Orbit_Attribute_bool_exp
  _and: [Join__Orbit_Attribute_bool_exp!]
  _not: Join__Orbit_Attribute_bool_exp
  _or: [Join__Orbit_Attribute_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  orbit_attribute_id: Int_comparison_exp
  orbit_id: Int_comparison_exp
  value: String_comparison_exp
}
"""
unique or primary key constraints on table "Join__Orbit_Attribute"
"""
enum Join__Orbit_Attribute_constraint {
  "unique or primary key constraint"
  Join__Orbit_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_inc_input {
  group_id: Int
  id: Int
  orbit_attribute_id: Int
  orbit_id: Int
}
"""
input type for inserting data into table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_insert_input {
  Group: Group_obj_rel_insert_input
  Orbit: Orbit_obj_rel_insert_input
  Orbit_Attribute: Orbit_Attribute_obj_rel_insert_input
  group_id: Int
  id: Int
  orbit_attribute_id: Int
  orbit_id: Int
  value: String
}
"aggregate max on columns"
type Join__Orbit_Attribute_max_fields {
  group_id: Int
  id: Int
  orbit_attribute_id: Int
  orbit_id: Int
  value: String
}
"""
order by max() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_max_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
  value: order_by
}
"aggregate min on columns"
type Join__Orbit_Attribute_min_fields {
  group_id: Int
  id: Int
  orbit_attribute_id: Int
  orbit_id: Int
  value: String
}
"""
order by min() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_min_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
  value: order_by
}
"""
response of any mutation on the table "Join__Orbit_Attribute"
"""
type Join__Orbit_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Orbit_Attribute!]!
}
"""
on conflict condition type for table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_on_conflict {
  constraint: Join__Orbit_Attribute_constraint!
  update_columns: [Join__Orbit_Attribute_update_column!]! = []
  where: Join__Orbit_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Join__Orbit_Attribute".
"""
input Join__Orbit_Attribute_order_by {
  Group: Group_order_by
  Orbit: Orbit_order_by
  Orbit_Attribute: Orbit_Attribute_order_by
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
  value: order_by
}
"primary key columns input for table: Join__Orbit_Attribute"
input Join__Orbit_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Orbit_Attribute"
"""
enum Join__Orbit_Attribute_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  orbit_attribute_id
  "column name"
  orbit_id
  "column name"
  value
}
"""
input type for updating data in table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_set_input {
  group_id: Int
  id: Int
  orbit_attribute_id: Int
  orbit_id: Int
  value: String
}
"aggregate stddev on columns"
type Join__Orbit_Attribute_stddev_fields {
  group_id: Float
  id: Float
  orbit_attribute_id: Float
  orbit_id: Float
}
"""
order by stddev() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_stddev_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Orbit_Attribute_stddev_pop_fields {
  group_id: Float
  id: Float
  orbit_attribute_id: Float
  orbit_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_stddev_pop_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Orbit_Attribute_stddev_samp_fields {
  group_id: Float
  id: Float
  orbit_attribute_id: Float
  orbit_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_stddev_samp_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
}
"aggregate sum on columns"
type Join__Orbit_Attribute_sum_fields {
  group_id: Int
  id: Int
  orbit_attribute_id: Int
  orbit_id: Int
}
"""
order by sum() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_sum_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
}
"""
update columns of table "Join__Orbit_Attribute"
"""
enum Join__Orbit_Attribute_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  orbit_attribute_id
  "column name"
  orbit_id
  "column name"
  value
}
"aggregate var_pop on columns"
type Join__Orbit_Attribute_var_pop_fields {
  group_id: Float
  id: Float
  orbit_attribute_id: Float
  orbit_id: Float
}
"""
order by var_pop() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_var_pop_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
}
"aggregate var_samp on columns"
type Join__Orbit_Attribute_var_samp_fields {
  group_id: Float
  id: Float
  orbit_attribute_id: Float
  orbit_id: Float
}
"""
order by var_samp() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_var_samp_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
}
"aggregate variance on columns"
type Join__Orbit_Attribute_variance_fields {
  group_id: Float
  id: Float
  orbit_attribute_id: Float
  orbit_id: Float
}
"""
order by variance() on columns of table "Join__Orbit_Attribute"
"""
input Join__Orbit_Attribute_variance_order_by {
  group_id: order_by
  id: order_by
  orbit_attribute_id: order_by
  orbit_id: order_by
}
"""
columns and relationships of "Join__Problem_Instrument"
"""
type Join__Problem_Instrument {
  "An object relationship"
  Instrument: Instrument
  "An object relationship"
  Problem: Problem
  id: Int!
  instrument_id: Int
  problem_id: Int
}
"""
aggregated selection of "Join__Problem_Instrument"
"""
type Join__Problem_Instrument_aggregate {
  aggregate: Join__Problem_Instrument_aggregate_fields
  nodes: [Join__Problem_Instrument!]!
}
"""
aggregate fields of "Join__Problem_Instrument"
"""
type Join__Problem_Instrument_aggregate_fields {
  avg: Join__Problem_Instrument_avg_fields
  count(columns: [Join__Problem_Instrument_select_column!], distinct: Boolean): Int!
  max: Join__Problem_Instrument_max_fields
  min: Join__Problem_Instrument_min_fields
  stddev: Join__Problem_Instrument_stddev_fields
  stddev_pop: Join__Problem_Instrument_stddev_pop_fields
  stddev_samp: Join__Problem_Instrument_stddev_samp_fields
  sum: Join__Problem_Instrument_sum_fields
  var_pop: Join__Problem_Instrument_var_pop_fields
  var_samp: Join__Problem_Instrument_var_samp_fields
  variance: Join__Problem_Instrument_variance_fields
}
"""
order by aggregate values of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_aggregate_order_by {
  avg: Join__Problem_Instrument_avg_order_by
  count: order_by
  max: Join__Problem_Instrument_max_order_by
  min: Join__Problem_Instrument_min_order_by
  stddev: Join__Problem_Instrument_stddev_order_by
  stddev_pop: Join__Problem_Instrument_stddev_pop_order_by
  stddev_samp: Join__Problem_Instrument_stddev_samp_order_by
  sum: Join__Problem_Instrument_sum_order_by
  var_pop: Join__Problem_Instrument_var_pop_order_by
  var_samp: Join__Problem_Instrument_var_samp_order_by
  variance: Join__Problem_Instrument_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_arr_rel_insert_input {
  data: [Join__Problem_Instrument_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Problem_Instrument_on_conflict
}
"aggregate avg on columns"
type Join__Problem_Instrument_avg_fields {
  id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_avg_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Problem_Instrument". All fields are combined with a logical 'AND'.
"""
input Join__Problem_Instrument_bool_exp {
  Instrument: Instrument_bool_exp
  Problem: Problem_bool_exp
  _and: [Join__Problem_Instrument_bool_exp!]
  _not: Join__Problem_Instrument_bool_exp
  _or: [Join__Problem_Instrument_bool_exp!]
  id: Int_comparison_exp
  instrument_id: Int_comparison_exp
  problem_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__Problem_Instrument"
"""
enum Join__Problem_Instrument_constraint {
  "unique or primary key constraint"
  Join__Problem_Instrument_pkey
}
"""
input type for incrementing numeric columns in table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_inc_input {
  id: Int
  instrument_id: Int
  problem_id: Int
}
"""
input type for inserting data into table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_insert_input {
  Instrument: Instrument_obj_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  id: Int
  instrument_id: Int
  problem_id: Int
}
"aggregate max on columns"
type Join__Problem_Instrument_max_fields {
  id: Int
  instrument_id: Int
  problem_id: Int
}
"""
order by max() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_max_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate min on columns"
type Join__Problem_Instrument_min_fields {
  id: Int
  instrument_id: Int
  problem_id: Int
}
"""
order by min() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_min_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"""
response of any mutation on the table "Join__Problem_Instrument"
"""
type Join__Problem_Instrument_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Problem_Instrument!]!
}
"""
on conflict condition type for table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_on_conflict {
  constraint: Join__Problem_Instrument_constraint!
  update_columns: [Join__Problem_Instrument_update_column!]! = []
  where: Join__Problem_Instrument_bool_exp
}
"""
Ordering options when selecting data from "Join__Problem_Instrument".
"""
input Join__Problem_Instrument_order_by {
  Instrument: Instrument_order_by
  Problem: Problem_order_by
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"primary key columns input for table: Join__Problem_Instrument"
input Join__Problem_Instrument_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Problem_Instrument"
"""
enum Join__Problem_Instrument_select_column {
  "column name"
  id
  "column name"
  instrument_id
  "column name"
  problem_id
}
"""
input type for updating data in table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_set_input {
  id: Int
  instrument_id: Int
  problem_id: Int
}
"aggregate stddev on columns"
type Join__Problem_Instrument_stddev_fields {
  id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_stddev_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Problem_Instrument_stddev_pop_fields {
  id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_stddev_pop_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Problem_Instrument_stddev_samp_fields {
  id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_stddev_samp_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type Join__Problem_Instrument_sum_fields {
  id: Int
  instrument_id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_sum_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"""
update columns of table "Join__Problem_Instrument"
"""
enum Join__Problem_Instrument_update_column {
  "column name"
  id
  "column name"
  instrument_id
  "column name"
  problem_id
}
"aggregate var_pop on columns"
type Join__Problem_Instrument_var_pop_fields {
  id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_var_pop_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type Join__Problem_Instrument_var_samp_fields {
  id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_var_samp_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type Join__Problem_Instrument_variance_fields {
  id: Float
  instrument_id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "Join__Problem_Instrument"
"""
input Join__Problem_Instrument_variance_order_by {
  id: order_by
  instrument_id: order_by
  problem_id: order_by
}
"""
columns and relationships of "Join__Problem_Launch_Vehicle"
"""
type Join__Problem_Launch_Vehicle {
  "An object relationship"
  Launch_Vehicle: Launch_Vehicle
  "An object relationship"
  Problem: Problem
  id: Int!
  launch_vehicle_id: Int
  problem_id: Int
}
"""
aggregated selection of "Join__Problem_Launch_Vehicle"
"""
type Join__Problem_Launch_Vehicle_aggregate {
  aggregate: Join__Problem_Launch_Vehicle_aggregate_fields
  nodes: [Join__Problem_Launch_Vehicle!]!
}
"""
aggregate fields of "Join__Problem_Launch_Vehicle"
"""
type Join__Problem_Launch_Vehicle_aggregate_fields {
  avg: Join__Problem_Launch_Vehicle_avg_fields
  count(columns: [Join__Problem_Launch_Vehicle_select_column!], distinct: Boolean): Int!
  max: Join__Problem_Launch_Vehicle_max_fields
  min: Join__Problem_Launch_Vehicle_min_fields
  stddev: Join__Problem_Launch_Vehicle_stddev_fields
  stddev_pop: Join__Problem_Launch_Vehicle_stddev_pop_fields
  stddev_samp: Join__Problem_Launch_Vehicle_stddev_samp_fields
  sum: Join__Problem_Launch_Vehicle_sum_fields
  var_pop: Join__Problem_Launch_Vehicle_var_pop_fields
  var_samp: Join__Problem_Launch_Vehicle_var_samp_fields
  variance: Join__Problem_Launch_Vehicle_variance_fields
}
"""
order by aggregate values of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_aggregate_order_by {
  avg: Join__Problem_Launch_Vehicle_avg_order_by
  count: order_by
  max: Join__Problem_Launch_Vehicle_max_order_by
  min: Join__Problem_Launch_Vehicle_min_order_by
  stddev: Join__Problem_Launch_Vehicle_stddev_order_by
  stddev_pop: Join__Problem_Launch_Vehicle_stddev_pop_order_by
  stddev_samp: Join__Problem_Launch_Vehicle_stddev_samp_order_by
  sum: Join__Problem_Launch_Vehicle_sum_order_by
  var_pop: Join__Problem_Launch_Vehicle_var_pop_order_by
  var_samp: Join__Problem_Launch_Vehicle_var_samp_order_by
  variance: Join__Problem_Launch_Vehicle_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_arr_rel_insert_input {
  data: [Join__Problem_Launch_Vehicle_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Problem_Launch_Vehicle_on_conflict
}
"aggregate avg on columns"
type Join__Problem_Launch_Vehicle_avg_fields {
  id: Float
  launch_vehicle_id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_avg_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Problem_Launch_Vehicle". All fields are combined with a logical 'AND'.
"""
input Join__Problem_Launch_Vehicle_bool_exp {
  Launch_Vehicle: Launch_Vehicle_bool_exp
  Problem: Problem_bool_exp
  _and: [Join__Problem_Launch_Vehicle_bool_exp!]
  _not: Join__Problem_Launch_Vehicle_bool_exp
  _or: [Join__Problem_Launch_Vehicle_bool_exp!]
  id: Int_comparison_exp
  launch_vehicle_id: Int_comparison_exp
  problem_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__Problem_Launch_Vehicle"
"""
enum Join__Problem_Launch_Vehicle_constraint {
  "unique or primary key constraint"
  Join__Problem_Launch_Vehicle_pkey
}
"""
input type for incrementing numeric columns in table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_inc_input {
  id: Int
  launch_vehicle_id: Int
  problem_id: Int
}
"""
input type for inserting data into table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_insert_input {
  Launch_Vehicle: Launch_Vehicle_obj_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  id: Int
  launch_vehicle_id: Int
  problem_id: Int
}
"aggregate max on columns"
type Join__Problem_Launch_Vehicle_max_fields {
  id: Int
  launch_vehicle_id: Int
  problem_id: Int
}
"""
order by max() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_max_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"aggregate min on columns"
type Join__Problem_Launch_Vehicle_min_fields {
  id: Int
  launch_vehicle_id: Int
  problem_id: Int
}
"""
order by min() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_min_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"""
response of any mutation on the table "Join__Problem_Launch_Vehicle"
"""
type Join__Problem_Launch_Vehicle_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Problem_Launch_Vehicle!]!
}
"""
on conflict condition type for table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_on_conflict {
  constraint: Join__Problem_Launch_Vehicle_constraint!
  update_columns: [Join__Problem_Launch_Vehicle_update_column!]! = []
  where: Join__Problem_Launch_Vehicle_bool_exp
}
"""
Ordering options when selecting data from "Join__Problem_Launch_Vehicle".
"""
input Join__Problem_Launch_Vehicle_order_by {
  Launch_Vehicle: Launch_Vehicle_order_by
  Problem: Problem_order_by
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"primary key columns input for table: Join__Problem_Launch_Vehicle"
input Join__Problem_Launch_Vehicle_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Problem_Launch_Vehicle"
"""
enum Join__Problem_Launch_Vehicle_select_column {
  "column name"
  id
  "column name"
  launch_vehicle_id
  "column name"
  problem_id
}
"""
input type for updating data in table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_set_input {
  id: Int
  launch_vehicle_id: Int
  problem_id: Int
}
"aggregate stddev on columns"
type Join__Problem_Launch_Vehicle_stddev_fields {
  id: Float
  launch_vehicle_id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_stddev_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Problem_Launch_Vehicle_stddev_pop_fields {
  id: Float
  launch_vehicle_id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_stddev_pop_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Problem_Launch_Vehicle_stddev_samp_fields {
  id: Float
  launch_vehicle_id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_stddev_samp_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type Join__Problem_Launch_Vehicle_sum_fields {
  id: Int
  launch_vehicle_id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_sum_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"""
update columns of table "Join__Problem_Launch_Vehicle"
"""
enum Join__Problem_Launch_Vehicle_update_column {
  "column name"
  id
  "column name"
  launch_vehicle_id
  "column name"
  problem_id
}
"aggregate var_pop on columns"
type Join__Problem_Launch_Vehicle_var_pop_fields {
  id: Float
  launch_vehicle_id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_var_pop_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type Join__Problem_Launch_Vehicle_var_samp_fields {
  id: Float
  launch_vehicle_id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_var_samp_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type Join__Problem_Launch_Vehicle_variance_fields {
  id: Float
  launch_vehicle_id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "Join__Problem_Launch_Vehicle"
"""
input Join__Problem_Launch_Vehicle_variance_order_by {
  id: order_by
  launch_vehicle_id: order_by
  problem_id: order_by
}
"""
columns and relationships of "Join__Problem_Orbit"
"""
type Join__Problem_Orbit {
  "An object relationship"
  Orbit: Orbit
  "An object relationship"
  Problem: Problem
  id: Int!
  orbit_id: Int
  problem_id: Int
}
"""
aggregated selection of "Join__Problem_Orbit"
"""
type Join__Problem_Orbit_aggregate {
  aggregate: Join__Problem_Orbit_aggregate_fields
  nodes: [Join__Problem_Orbit!]!
}
"""
aggregate fields of "Join__Problem_Orbit"
"""
type Join__Problem_Orbit_aggregate_fields {
  avg: Join__Problem_Orbit_avg_fields
  count(columns: [Join__Problem_Orbit_select_column!], distinct: Boolean): Int!
  max: Join__Problem_Orbit_max_fields
  min: Join__Problem_Orbit_min_fields
  stddev: Join__Problem_Orbit_stddev_fields
  stddev_pop: Join__Problem_Orbit_stddev_pop_fields
  stddev_samp: Join__Problem_Orbit_stddev_samp_fields
  sum: Join__Problem_Orbit_sum_fields
  var_pop: Join__Problem_Orbit_var_pop_fields
  var_samp: Join__Problem_Orbit_var_samp_fields
  variance: Join__Problem_Orbit_variance_fields
}
"""
order by aggregate values of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_aggregate_order_by {
  avg: Join__Problem_Orbit_avg_order_by
  count: order_by
  max: Join__Problem_Orbit_max_order_by
  min: Join__Problem_Orbit_min_order_by
  stddev: Join__Problem_Orbit_stddev_order_by
  stddev_pop: Join__Problem_Orbit_stddev_pop_order_by
  stddev_samp: Join__Problem_Orbit_stddev_samp_order_by
  sum: Join__Problem_Orbit_sum_order_by
  var_pop: Join__Problem_Orbit_var_pop_order_by
  var_samp: Join__Problem_Orbit_var_samp_order_by
  variance: Join__Problem_Orbit_variance_order_by
}
"""
input type for inserting array relation for remote table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_arr_rel_insert_input {
  data: [Join__Problem_Orbit_insert_input!]!
  "on conflict condition"
  on_conflict: Join__Problem_Orbit_on_conflict
}
"aggregate avg on columns"
type Join__Problem_Orbit_avg_fields {
  id: Float
  orbit_id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_avg_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "Join__Problem_Orbit". All fields are combined with a logical 'AND'.
"""
input Join__Problem_Orbit_bool_exp {
  Orbit: Orbit_bool_exp
  Problem: Problem_bool_exp
  _and: [Join__Problem_Orbit_bool_exp!]
  _not: Join__Problem_Orbit_bool_exp
  _or: [Join__Problem_Orbit_bool_exp!]
  id: Int_comparison_exp
  orbit_id: Int_comparison_exp
  problem_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "Join__Problem_Orbit"
"""
enum Join__Problem_Orbit_constraint {
  "unique or primary key constraint"
  Join__Problem_Orbit_pkey
}
"""
input type for incrementing numeric columns in table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_inc_input {
  id: Int
  orbit_id: Int
  problem_id: Int
}
"""
input type for inserting data into table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_insert_input {
  Orbit: Orbit_obj_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  id: Int
  orbit_id: Int
  problem_id: Int
}
"aggregate max on columns"
type Join__Problem_Orbit_max_fields {
  id: Int
  orbit_id: Int
  problem_id: Int
}
"""
order by max() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_max_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"aggregate min on columns"
type Join__Problem_Orbit_min_fields {
  id: Int
  orbit_id: Int
  problem_id: Int
}
"""
order by min() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_min_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"""
response of any mutation on the table "Join__Problem_Orbit"
"""
type Join__Problem_Orbit_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Join__Problem_Orbit!]!
}
"""
on conflict condition type for table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_on_conflict {
  constraint: Join__Problem_Orbit_constraint!
  update_columns: [Join__Problem_Orbit_update_column!]! = []
  where: Join__Problem_Orbit_bool_exp
}
"""
Ordering options when selecting data from "Join__Problem_Orbit".
"""
input Join__Problem_Orbit_order_by {
  Orbit: Orbit_order_by
  Problem: Problem_order_by
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"primary key columns input for table: Join__Problem_Orbit"
input Join__Problem_Orbit_pk_columns_input {
  id: Int!
}
"""
select columns of table "Join__Problem_Orbit"
"""
enum Join__Problem_Orbit_select_column {
  "column name"
  id
  "column name"
  orbit_id
  "column name"
  problem_id
}
"""
input type for updating data in table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_set_input {
  id: Int
  orbit_id: Int
  problem_id: Int
}
"aggregate stddev on columns"
type Join__Problem_Orbit_stddev_fields {
  id: Float
  orbit_id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_stddev_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type Join__Problem_Orbit_stddev_pop_fields {
  id: Float
  orbit_id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_stddev_pop_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type Join__Problem_Orbit_stddev_samp_fields {
  id: Float
  orbit_id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_stddev_samp_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type Join__Problem_Orbit_sum_fields {
  id: Int
  orbit_id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_sum_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"""
update columns of table "Join__Problem_Orbit"
"""
enum Join__Problem_Orbit_update_column {
  "column name"
  id
  "column name"
  orbit_id
  "column name"
  problem_id
}
"aggregate var_pop on columns"
type Join__Problem_Orbit_var_pop_fields {
  id: Float
  orbit_id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_var_pop_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type Join__Problem_Orbit_var_samp_fields {
  id: Float
  orbit_id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_var_samp_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type Join__Problem_Orbit_variance_fields {
  id: Float
  orbit_id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "Join__Problem_Orbit"
"""
input Join__Problem_Orbit_variance_order_by {
  id: order_by
  orbit_id: order_by
  problem_id: order_by
}
"""
columns and relationships of "Launch_Vehicle"
"""
type Launch_Vehicle {
  "An object relationship"
  Group: Group
  "An array relationship"
  Join__Launch_Vehicle_Attributes("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): [Join__Launch_Vehicle_Attribute!]!
  "An aggregate relationship"
  Join__Launch_Vehicle_Attributes_aggregate("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): Join__Launch_Vehicle_Attribute_aggregate!
  "An array relationship"
  Join__Problem_Launch_Vehicles("distinct select on columns" distinct_on: [Join__Problem_Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Launch_Vehicle_order_by!], "filter the rows returned" where: Join__Problem_Launch_Vehicle_bool_exp): [Join__Problem_Launch_Vehicle!]!
  "An aggregate relationship"
  Join__Problem_Launch_Vehicles_aggregate("distinct select on columns" distinct_on: [Join__Problem_Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Launch_Vehicle_order_by!], "filter the rows returned" where: Join__Problem_Launch_Vehicle_bool_exp): Join__Problem_Launch_Vehicle_aggregate!
  group_id: Int
  id: Int!
  name: String
}
"""
columns and relationships of "Launch_Vehicle_Attribute"
"""
type Launch_Vehicle_Attribute {
  "An object relationship"
  Group: Group
  "An array relationship"
  Join__Launch_Vehicle_Attribute_Values("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_Values_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_Values_bool_exp): [Join__Launch_Vehicle_Attribute_Values!]!
  "An aggregate relationship"
  Join__Launch_Vehicle_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_Values_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_Values_bool_exp): Join__Launch_Vehicle_Attribute_Values_aggregate!
  "An array relationship"
  Join__Launch_Vehicle_Attributes("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): [Join__Launch_Vehicle_Attribute!]!
  "An aggregate relationship"
  Join__Launch_Vehicle_Attributes_aggregate("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): Join__Launch_Vehicle_Attribute_aggregate!
  group_id: Int
  id: Int!
  name: String
  slot_type: String
  type: String
}
"""
aggregated selection of "Launch_Vehicle_Attribute"
"""
type Launch_Vehicle_Attribute_aggregate {
  aggregate: Launch_Vehicle_Attribute_aggregate_fields
  nodes: [Launch_Vehicle_Attribute!]!
}
"""
aggregate fields of "Launch_Vehicle_Attribute"
"""
type Launch_Vehicle_Attribute_aggregate_fields {
  avg: Launch_Vehicle_Attribute_avg_fields
  count(columns: [Launch_Vehicle_Attribute_select_column!], distinct: Boolean): Int!
  max: Launch_Vehicle_Attribute_max_fields
  min: Launch_Vehicle_Attribute_min_fields
  stddev: Launch_Vehicle_Attribute_stddev_fields
  stddev_pop: Launch_Vehicle_Attribute_stddev_pop_fields
  stddev_samp: Launch_Vehicle_Attribute_stddev_samp_fields
  sum: Launch_Vehicle_Attribute_sum_fields
  var_pop: Launch_Vehicle_Attribute_var_pop_fields
  var_samp: Launch_Vehicle_Attribute_var_samp_fields
  variance: Launch_Vehicle_Attribute_variance_fields
}
"""
order by aggregate values of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_aggregate_order_by {
  avg: Launch_Vehicle_Attribute_avg_order_by
  count: order_by
  max: Launch_Vehicle_Attribute_max_order_by
  min: Launch_Vehicle_Attribute_min_order_by
  stddev: Launch_Vehicle_Attribute_stddev_order_by
  stddev_pop: Launch_Vehicle_Attribute_stddev_pop_order_by
  stddev_samp: Launch_Vehicle_Attribute_stddev_samp_order_by
  sum: Launch_Vehicle_Attribute_sum_order_by
  var_pop: Launch_Vehicle_Attribute_var_pop_order_by
  var_samp: Launch_Vehicle_Attribute_var_samp_order_by
  variance: Launch_Vehicle_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_arr_rel_insert_input {
  data: [Launch_Vehicle_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Launch_Vehicle_Attribute_on_conflict
}
"aggregate avg on columns"
type Launch_Vehicle_Attribute_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Launch_Vehicle_Attribute". All fields are combined with a logical 'AND'.
"""
input Launch_Vehicle_Attribute_bool_exp {
  Group: Group_bool_exp
  Join__Launch_Vehicle_Attribute_Values: Join__Launch_Vehicle_Attribute_Values_bool_exp
  Join__Launch_Vehicle_Attributes: Join__Launch_Vehicle_Attribute_bool_exp
  _and: [Launch_Vehicle_Attribute_bool_exp!]
  _not: Launch_Vehicle_Attribute_bool_exp
  _or: [Launch_Vehicle_Attribute_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  slot_type: String_comparison_exp
  type: String_comparison_exp
}
"""
unique or primary key constraints on table "Launch_Vehicle_Attribute"
"""
enum Launch_Vehicle_Attribute_constraint {
  "unique or primary key constraint"
  Launch_Vehicle_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_insert_input {
  Group: Group_obj_rel_insert_input
  Join__Launch_Vehicle_Attribute_Values: Join__Launch_Vehicle_Attribute_Values_arr_rel_insert_input
  Join__Launch_Vehicle_Attributes: Join__Launch_Vehicle_Attribute_arr_rel_insert_input
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"aggregate max on columns"
type Launch_Vehicle_Attribute_max_fields {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"""
order by max() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"aggregate min on columns"
type Launch_Vehicle_Attribute_min_fields {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"""
order by min() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"""
response of any mutation on the table "Launch_Vehicle_Attribute"
"""
type Launch_Vehicle_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Launch_Vehicle_Attribute!]!
}
"""
input type for inserting object relation for remote table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_obj_rel_insert_input {
  data: Launch_Vehicle_Attribute_insert_input!
  "on conflict condition"
  on_conflict: Launch_Vehicle_Attribute_on_conflict
}
"""
on conflict condition type for table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_on_conflict {
  constraint: Launch_Vehicle_Attribute_constraint!
  update_columns: [Launch_Vehicle_Attribute_update_column!]! = []
  where: Launch_Vehicle_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Launch_Vehicle_Attribute".
"""
input Launch_Vehicle_Attribute_order_by {
  Group: Group_order_by
  Join__Launch_Vehicle_Attribute_Values_aggregate: Join__Launch_Vehicle_Attribute_Values_aggregate_order_by
  Join__Launch_Vehicle_Attributes_aggregate: Join__Launch_Vehicle_Attribute_aggregate_order_by
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"primary key columns input for table: Launch_Vehicle_Attribute"
input Launch_Vehicle_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Launch_Vehicle_Attribute"
"""
enum Launch_Vehicle_Attribute_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  slot_type
  "column name"
  type
}
"""
input type for updating data in table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_set_input {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"aggregate stddev on columns"
type Launch_Vehicle_Attribute_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Launch_Vehicle_Attribute_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Launch_Vehicle_Attribute_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Launch_Vehicle_Attribute_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Launch_Vehicle_Attribute"
"""
enum Launch_Vehicle_Attribute_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  slot_type
  "column name"
  type
}
"aggregate var_pop on columns"
type Launch_Vehicle_Attribute_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Launch_Vehicle_Attribute_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Launch_Vehicle_Attribute_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Launch_Vehicle_Attribute"
"""
input Launch_Vehicle_Attribute_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
columns and relationships of "Launch_Vehicle_Mission_Analysis"
"""
type Launch_Vehicle_Mission_Analysis {
  "An object relationship"
  Problem: Problem
  cost: float8
  diameter: float8
  height: float8
  id: Int!
  payload_geo: _float8
  payload_heo: _float8
  payload_iss: _float8
  payload_leo_equat: _float8
  payload_leo_polar: _float8
  payload_meo: _float8
  payload_sso: _float8
  problem_id: Int
  vehicle_id: String
}
"""
aggregated selection of "Launch_Vehicle_Mission_Analysis"
"""
type Launch_Vehicle_Mission_Analysis_aggregate {
  aggregate: Launch_Vehicle_Mission_Analysis_aggregate_fields
  nodes: [Launch_Vehicle_Mission_Analysis!]!
}
"""
aggregate fields of "Launch_Vehicle_Mission_Analysis"
"""
type Launch_Vehicle_Mission_Analysis_aggregate_fields {
  avg: Launch_Vehicle_Mission_Analysis_avg_fields
  count(columns: [Launch_Vehicle_Mission_Analysis_select_column!], distinct: Boolean): Int!
  max: Launch_Vehicle_Mission_Analysis_max_fields
  min: Launch_Vehicle_Mission_Analysis_min_fields
  stddev: Launch_Vehicle_Mission_Analysis_stddev_fields
  stddev_pop: Launch_Vehicle_Mission_Analysis_stddev_pop_fields
  stddev_samp: Launch_Vehicle_Mission_Analysis_stddev_samp_fields
  sum: Launch_Vehicle_Mission_Analysis_sum_fields
  var_pop: Launch_Vehicle_Mission_Analysis_var_pop_fields
  var_samp: Launch_Vehicle_Mission_Analysis_var_samp_fields
  variance: Launch_Vehicle_Mission_Analysis_variance_fields
}
"""
order by aggregate values of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_aggregate_order_by {
  avg: Launch_Vehicle_Mission_Analysis_avg_order_by
  count: order_by
  max: Launch_Vehicle_Mission_Analysis_max_order_by
  min: Launch_Vehicle_Mission_Analysis_min_order_by
  stddev: Launch_Vehicle_Mission_Analysis_stddev_order_by
  stddev_pop: Launch_Vehicle_Mission_Analysis_stddev_pop_order_by
  stddev_samp: Launch_Vehicle_Mission_Analysis_stddev_samp_order_by
  sum: Launch_Vehicle_Mission_Analysis_sum_order_by
  var_pop: Launch_Vehicle_Mission_Analysis_var_pop_order_by
  var_samp: Launch_Vehicle_Mission_Analysis_var_samp_order_by
  variance: Launch_Vehicle_Mission_Analysis_variance_order_by
}
"""
input type for inserting array relation for remote table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_arr_rel_insert_input {
  data: [Launch_Vehicle_Mission_Analysis_insert_input!]!
  "on conflict condition"
  on_conflict: Launch_Vehicle_Mission_Analysis_on_conflict
}
"aggregate avg on columns"
type Launch_Vehicle_Mission_Analysis_avg_fields {
  cost: Float
  diameter: Float
  height: Float
  id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_avg_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "Launch_Vehicle_Mission_Analysis". All fields are combined with a logical 'AND'.
"""
input Launch_Vehicle_Mission_Analysis_bool_exp {
  Problem: Problem_bool_exp
  _and: [Launch_Vehicle_Mission_Analysis_bool_exp!]
  _not: Launch_Vehicle_Mission_Analysis_bool_exp
  _or: [Launch_Vehicle_Mission_Analysis_bool_exp!]
  cost: float8_comparison_exp
  diameter: float8_comparison_exp
  height: float8_comparison_exp
  id: Int_comparison_exp
  payload_geo: _float8_comparison_exp
  payload_heo: _float8_comparison_exp
  payload_iss: _float8_comparison_exp
  payload_leo_equat: _float8_comparison_exp
  payload_leo_polar: _float8_comparison_exp
  payload_meo: _float8_comparison_exp
  payload_sso: _float8_comparison_exp
  problem_id: Int_comparison_exp
  vehicle_id: String_comparison_exp
}
"""
unique or primary key constraints on table "Launch_Vehicle_Mission_Analysis"
"""
enum Launch_Vehicle_Mission_Analysis_constraint {
  "unique or primary key constraint"
  Launch_Vehicle_Mission_Analysis_pkey
}
"""
input type for incrementing numeric columns in table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_inc_input {
  cost: float8
  diameter: float8
  height: float8
  id: Int
  problem_id: Int
}
"""
input type for inserting data into table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_insert_input {
  Problem: Problem_obj_rel_insert_input
  cost: float8
  diameter: float8
  height: float8
  id: Int
  payload_geo: _float8
  payload_heo: _float8
  payload_iss: _float8
  payload_leo_equat: _float8
  payload_leo_polar: _float8
  payload_meo: _float8
  payload_sso: _float8
  problem_id: Int
  vehicle_id: String
}
"aggregate max on columns"
type Launch_Vehicle_Mission_Analysis_max_fields {
  cost: float8
  diameter: float8
  height: float8
  id: Int
  problem_id: Int
  vehicle_id: String
}
"""
order by max() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_max_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
  vehicle_id: order_by
}
"aggregate min on columns"
type Launch_Vehicle_Mission_Analysis_min_fields {
  cost: float8
  diameter: float8
  height: float8
  id: Int
  problem_id: Int
  vehicle_id: String
}
"""
order by min() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_min_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
  vehicle_id: order_by
}
"""
response of any mutation on the table "Launch_Vehicle_Mission_Analysis"
"""
type Launch_Vehicle_Mission_Analysis_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Launch_Vehicle_Mission_Analysis!]!
}
"""
on conflict condition type for table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_on_conflict {
  constraint: Launch_Vehicle_Mission_Analysis_constraint!
  update_columns: [Launch_Vehicle_Mission_Analysis_update_column!]! = []
  where: Launch_Vehicle_Mission_Analysis_bool_exp
}
"""
Ordering options when selecting data from "Launch_Vehicle_Mission_Analysis".
"""
input Launch_Vehicle_Mission_Analysis_order_by {
  Problem: Problem_order_by
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  payload_geo: order_by
  payload_heo: order_by
  payload_iss: order_by
  payload_leo_equat: order_by
  payload_leo_polar: order_by
  payload_meo: order_by
  payload_sso: order_by
  problem_id: order_by
  vehicle_id: order_by
}
"primary key columns input for table: Launch_Vehicle_Mission_Analysis"
input Launch_Vehicle_Mission_Analysis_pk_columns_input {
  id: Int!
}
"""
select columns of table "Launch_Vehicle_Mission_Analysis"
"""
enum Launch_Vehicle_Mission_Analysis_select_column {
  "column name"
  cost
  "column name"
  diameter
  "column name"
  height
  "column name"
  id
  "column name"
  payload_geo
  "column name"
  payload_heo
  "column name"
  payload_iss
  "column name"
  payload_leo_equat
  "column name"
  payload_leo_polar
  "column name"
  payload_meo
  "column name"
  payload_sso
  "column name"
  problem_id
  "column name"
  vehicle_id
}
"""
input type for updating data in table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_set_input {
  cost: float8
  diameter: float8
  height: float8
  id: Int
  payload_geo: _float8
  payload_heo: _float8
  payload_iss: _float8
  payload_leo_equat: _float8
  payload_leo_polar: _float8
  payload_meo: _float8
  payload_sso: _float8
  problem_id: Int
  vehicle_id: String
}
"aggregate stddev on columns"
type Launch_Vehicle_Mission_Analysis_stddev_fields {
  cost: Float
  diameter: Float
  height: Float
  id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_stddev_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type Launch_Vehicle_Mission_Analysis_stddev_pop_fields {
  cost: Float
  diameter: Float
  height: Float
  id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_stddev_pop_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type Launch_Vehicle_Mission_Analysis_stddev_samp_fields {
  cost: Float
  diameter: Float
  height: Float
  id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_stddev_samp_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type Launch_Vehicle_Mission_Analysis_sum_fields {
  cost: float8
  diameter: float8
  height: float8
  id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_sum_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
}
"""
update columns of table "Launch_Vehicle_Mission_Analysis"
"""
enum Launch_Vehicle_Mission_Analysis_update_column {
  "column name"
  cost
  "column name"
  diameter
  "column name"
  height
  "column name"
  id
  "column name"
  payload_geo
  "column name"
  payload_heo
  "column name"
  payload_iss
  "column name"
  payload_leo_equat
  "column name"
  payload_leo_polar
  "column name"
  payload_meo
  "column name"
  payload_sso
  "column name"
  problem_id
  "column name"
  vehicle_id
}
"aggregate var_pop on columns"
type Launch_Vehicle_Mission_Analysis_var_pop_fields {
  cost: Float
  diameter: Float
  height: Float
  id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_var_pop_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type Launch_Vehicle_Mission_Analysis_var_samp_fields {
  cost: Float
  diameter: Float
  height: Float
  id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_var_samp_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type Launch_Vehicle_Mission_Analysis_variance_fields {
  cost: Float
  diameter: Float
  height: Float
  id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "Launch_Vehicle_Mission_Analysis"
"""
input Launch_Vehicle_Mission_Analysis_variance_order_by {
  cost: order_by
  diameter: order_by
  height: order_by
  id: order_by
  problem_id: order_by
}
"""
aggregated selection of "Launch_Vehicle"
"""
type Launch_Vehicle_aggregate {
  aggregate: Launch_Vehicle_aggregate_fields
  nodes: [Launch_Vehicle!]!
}
"""
aggregate fields of "Launch_Vehicle"
"""
type Launch_Vehicle_aggregate_fields {
  avg: Launch_Vehicle_avg_fields
  count(columns: [Launch_Vehicle_select_column!], distinct: Boolean): Int!
  max: Launch_Vehicle_max_fields
  min: Launch_Vehicle_min_fields
  stddev: Launch_Vehicle_stddev_fields
  stddev_pop: Launch_Vehicle_stddev_pop_fields
  stddev_samp: Launch_Vehicle_stddev_samp_fields
  sum: Launch_Vehicle_sum_fields
  var_pop: Launch_Vehicle_var_pop_fields
  var_samp: Launch_Vehicle_var_samp_fields
  variance: Launch_Vehicle_variance_fields
}
"""
order by aggregate values of table "Launch_Vehicle"
"""
input Launch_Vehicle_aggregate_order_by {
  avg: Launch_Vehicle_avg_order_by
  count: order_by
  max: Launch_Vehicle_max_order_by
  min: Launch_Vehicle_min_order_by
  stddev: Launch_Vehicle_stddev_order_by
  stddev_pop: Launch_Vehicle_stddev_pop_order_by
  stddev_samp: Launch_Vehicle_stddev_samp_order_by
  sum: Launch_Vehicle_sum_order_by
  var_pop: Launch_Vehicle_var_pop_order_by
  var_samp: Launch_Vehicle_var_samp_order_by
  variance: Launch_Vehicle_variance_order_by
}
"""
input type for inserting array relation for remote table "Launch_Vehicle"
"""
input Launch_Vehicle_arr_rel_insert_input {
  data: [Launch_Vehicle_insert_input!]!
  "on conflict condition"
  on_conflict: Launch_Vehicle_on_conflict
}
"aggregate avg on columns"
type Launch_Vehicle_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Launch_Vehicle". All fields are combined with a logical 'AND'.
"""
input Launch_Vehicle_bool_exp {
  Group: Group_bool_exp
  Join__Launch_Vehicle_Attributes: Join__Launch_Vehicle_Attribute_bool_exp
  Join__Problem_Launch_Vehicles: Join__Problem_Launch_Vehicle_bool_exp
  _and: [Launch_Vehicle_bool_exp!]
  _not: Launch_Vehicle_bool_exp
  _or: [Launch_Vehicle_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}
"""
unique or primary key constraints on table "Launch_Vehicle"
"""
enum Launch_Vehicle_constraint {
  "unique or primary key constraint"
  Launch_Vehicle_pkey
}
"""
input type for incrementing numeric columns in table "Launch_Vehicle"
"""
input Launch_Vehicle_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Launch_Vehicle"
"""
input Launch_Vehicle_insert_input {
  Group: Group_obj_rel_insert_input
  Join__Launch_Vehicle_Attributes: Join__Launch_Vehicle_Attribute_arr_rel_insert_input
  Join__Problem_Launch_Vehicles: Join__Problem_Launch_Vehicle_arr_rel_insert_input
  group_id: Int
  id: Int
  name: String
}
"aggregate max on columns"
type Launch_Vehicle_max_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by max() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"aggregate min on columns"
type Launch_Vehicle_min_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by min() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"""
response of any mutation on the table "Launch_Vehicle"
"""
type Launch_Vehicle_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Launch_Vehicle!]!
}
"""
input type for inserting object relation for remote table "Launch_Vehicle"
"""
input Launch_Vehicle_obj_rel_insert_input {
  data: Launch_Vehicle_insert_input!
  "on conflict condition"
  on_conflict: Launch_Vehicle_on_conflict
}
"""
on conflict condition type for table "Launch_Vehicle"
"""
input Launch_Vehicle_on_conflict {
  constraint: Launch_Vehicle_constraint!
  update_columns: [Launch_Vehicle_update_column!]! = []
  where: Launch_Vehicle_bool_exp
}
"""
Ordering options when selecting data from "Launch_Vehicle".
"""
input Launch_Vehicle_order_by {
  Group: Group_order_by
  Join__Launch_Vehicle_Attributes_aggregate: Join__Launch_Vehicle_Attribute_aggregate_order_by
  Join__Problem_Launch_Vehicles_aggregate: Join__Problem_Launch_Vehicle_aggregate_order_by
  group_id: order_by
  id: order_by
  name: order_by
}
"primary key columns input for table: Launch_Vehicle"
input Launch_Vehicle_pk_columns_input {
  id: Int!
}
"""
select columns of table "Launch_Vehicle"
"""
enum Launch_Vehicle_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
}
"""
input type for updating data in table "Launch_Vehicle"
"""
input Launch_Vehicle_set_input {
  group_id: Int
  id: Int
  name: String
}
"aggregate stddev on columns"
type Launch_Vehicle_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Launch_Vehicle_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Launch_Vehicle_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Launch_Vehicle_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Launch_Vehicle"
"""
enum Launch_Vehicle_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
}
"aggregate var_pop on columns"
type Launch_Vehicle_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Launch_Vehicle_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Launch_Vehicle_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Launch_Vehicle"
"""
input Launch_Vehicle_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
columns and relationships of "Measurement"
"""
type Measurement {
  "An object relationship"
  Group: Group
  "An array relationship"
  Join__Instrument_Capabilities("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): [Join__Instrument_Capability!]!
  "An aggregate relationship"
  Join__Instrument_Capabilities_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): Join__Instrument_Capability_aggregate!
  "An array relationship"
  Join__Instrument_Measurements("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): [Join__Instrument_Measurement!]!
  "An aggregate relationship"
  Join__Instrument_Measurements_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): Join__Instrument_Measurement_aggregate!
  "An array relationship"
  Requirement_Rule_Attributes("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): [Requirement_Rule_Attribute!]!
  "An aggregate relationship"
  Requirement_Rule_Attributes_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): Requirement_Rule_Attribute_aggregate!
  "An array relationship"
  Requirement_Rule_Cases("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): [Requirement_Rule_Case!]!
  "An aggregate relationship"
  Requirement_Rule_Cases_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): Requirement_Rule_Case_aggregate!
  group_id: Int
  id: Int!
  name: String
  synergy_rule: Boolean
}
"""
columns and relationships of "Measurement_Attribute"
"""
type Measurement_Attribute {
  "An object relationship"
  Group: Group
  "An array relationship"
  Join__Case_Attributes("distinct select on columns" distinct_on: [Join__Case_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Case_Attribute_order_by!], "filter the rows returned" where: Join__Case_Attribute_bool_exp): [Join__Case_Attribute!]!
  "An aggregate relationship"
  Join__Case_Attributes_aggregate("distinct select on columns" distinct_on: [Join__Case_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Case_Attribute_order_by!], "filter the rows returned" where: Join__Case_Attribute_bool_exp): Join__Case_Attribute_aggregate!
  "An array relationship"
  Join__Instrument_Capabilities("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): [Join__Instrument_Capability!]!
  "An aggregate relationship"
  Join__Instrument_Capabilities_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): Join__Instrument_Capability_aggregate!
  "An array relationship"
  Join__Measurement_Attribute_Values("distinct select on columns" distinct_on: [Join__Measurement_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Measurement_Attribute_Values_order_by!], "filter the rows returned" where: Join__Measurement_Attribute_Values_bool_exp): [Join__Measurement_Attribute_Values!]!
  "An aggregate relationship"
  Join__Measurement_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Measurement_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Measurement_Attribute_Values_order_by!], "filter the rows returned" where: Join__Measurement_Attribute_Values_bool_exp): Join__Measurement_Attribute_Values_aggregate!
  "An array relationship"
  Requirement_Rule_Attributes("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): [Requirement_Rule_Attribute!]!
  "An aggregate relationship"
  Requirement_Rule_Attributes_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): Requirement_Rule_Attribute_aggregate!
  group_id: Int
  id: Int!
  name: String
  slot_type: String
  type: String
}
"""
aggregated selection of "Measurement_Attribute"
"""
type Measurement_Attribute_aggregate {
  aggregate: Measurement_Attribute_aggregate_fields
  nodes: [Measurement_Attribute!]!
}
"""
aggregate fields of "Measurement_Attribute"
"""
type Measurement_Attribute_aggregate_fields {
  avg: Measurement_Attribute_avg_fields
  count(columns: [Measurement_Attribute_select_column!], distinct: Boolean): Int!
  max: Measurement_Attribute_max_fields
  min: Measurement_Attribute_min_fields
  stddev: Measurement_Attribute_stddev_fields
  stddev_pop: Measurement_Attribute_stddev_pop_fields
  stddev_samp: Measurement_Attribute_stddev_samp_fields
  sum: Measurement_Attribute_sum_fields
  var_pop: Measurement_Attribute_var_pop_fields
  var_samp: Measurement_Attribute_var_samp_fields
  variance: Measurement_Attribute_variance_fields
}
"""
order by aggregate values of table "Measurement_Attribute"
"""
input Measurement_Attribute_aggregate_order_by {
  avg: Measurement_Attribute_avg_order_by
  count: order_by
  max: Measurement_Attribute_max_order_by
  min: Measurement_Attribute_min_order_by
  stddev: Measurement_Attribute_stddev_order_by
  stddev_pop: Measurement_Attribute_stddev_pop_order_by
  stddev_samp: Measurement_Attribute_stddev_samp_order_by
  sum: Measurement_Attribute_sum_order_by
  var_pop: Measurement_Attribute_var_pop_order_by
  var_samp: Measurement_Attribute_var_samp_order_by
  variance: Measurement_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Measurement_Attribute"
"""
input Measurement_Attribute_arr_rel_insert_input {
  data: [Measurement_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Measurement_Attribute_on_conflict
}
"aggregate avg on columns"
type Measurement_Attribute_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Measurement_Attribute". All fields are combined with a logical 'AND'.
"""
input Measurement_Attribute_bool_exp {
  Group: Group_bool_exp
  Join__Case_Attributes: Join__Case_Attribute_bool_exp
  Join__Instrument_Capabilities: Join__Instrument_Capability_bool_exp
  Join__Measurement_Attribute_Values: Join__Measurement_Attribute_Values_bool_exp
  Requirement_Rule_Attributes: Requirement_Rule_Attribute_bool_exp
  _and: [Measurement_Attribute_bool_exp!]
  _not: Measurement_Attribute_bool_exp
  _or: [Measurement_Attribute_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  slot_type: String_comparison_exp
  type: String_comparison_exp
}
"""
unique or primary key constraints on table "Measurement_Attribute"
"""
enum Measurement_Attribute_constraint {
  "unique or primary key constraint"
  Measurement_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Measurement_Attribute"
"""
input Measurement_Attribute_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Measurement_Attribute"
"""
input Measurement_Attribute_insert_input {
  Group: Group_obj_rel_insert_input
  Join__Case_Attributes: Join__Case_Attribute_arr_rel_insert_input
  Join__Instrument_Capabilities: Join__Instrument_Capability_arr_rel_insert_input
  Join__Measurement_Attribute_Values: Join__Measurement_Attribute_Values_arr_rel_insert_input
  Requirement_Rule_Attributes: Requirement_Rule_Attribute_arr_rel_insert_input
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"aggregate max on columns"
type Measurement_Attribute_max_fields {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"""
order by max() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"aggregate min on columns"
type Measurement_Attribute_min_fields {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"""
order by min() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"""
response of any mutation on the table "Measurement_Attribute"
"""
type Measurement_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Measurement_Attribute!]!
}
"""
input type for inserting object relation for remote table "Measurement_Attribute"
"""
input Measurement_Attribute_obj_rel_insert_input {
  data: Measurement_Attribute_insert_input!
  "on conflict condition"
  on_conflict: Measurement_Attribute_on_conflict
}
"""
on conflict condition type for table "Measurement_Attribute"
"""
input Measurement_Attribute_on_conflict {
  constraint: Measurement_Attribute_constraint!
  update_columns: [Measurement_Attribute_update_column!]! = []
  where: Measurement_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Measurement_Attribute".
"""
input Measurement_Attribute_order_by {
  Group: Group_order_by
  Join__Case_Attributes_aggregate: Join__Case_Attribute_aggregate_order_by
  Join__Instrument_Capabilities_aggregate: Join__Instrument_Capability_aggregate_order_by
  Join__Measurement_Attribute_Values_aggregate: Join__Measurement_Attribute_Values_aggregate_order_by
  Requirement_Rule_Attributes_aggregate: Requirement_Rule_Attribute_aggregate_order_by
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"primary key columns input for table: Measurement_Attribute"
input Measurement_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Measurement_Attribute"
"""
enum Measurement_Attribute_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  slot_type
  "column name"
  type
}
"""
input type for updating data in table "Measurement_Attribute"
"""
input Measurement_Attribute_set_input {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"aggregate stddev on columns"
type Measurement_Attribute_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Measurement_Attribute_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Measurement_Attribute_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Measurement_Attribute_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Measurement_Attribute"
"""
enum Measurement_Attribute_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  slot_type
  "column name"
  type
}
"aggregate var_pop on columns"
type Measurement_Attribute_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Measurement_Attribute_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Measurement_Attribute_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Measurement_Attribute"
"""
input Measurement_Attribute_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
aggregated selection of "Measurement"
"""
type Measurement_aggregate {
  aggregate: Measurement_aggregate_fields
  nodes: [Measurement!]!
}
"""
aggregate fields of "Measurement"
"""
type Measurement_aggregate_fields {
  avg: Measurement_avg_fields
  count(columns: [Measurement_select_column!], distinct: Boolean): Int!
  max: Measurement_max_fields
  min: Measurement_min_fields
  stddev: Measurement_stddev_fields
  stddev_pop: Measurement_stddev_pop_fields
  stddev_samp: Measurement_stddev_samp_fields
  sum: Measurement_sum_fields
  var_pop: Measurement_var_pop_fields
  var_samp: Measurement_var_samp_fields
  variance: Measurement_variance_fields
}
"""
order by aggregate values of table "Measurement"
"""
input Measurement_aggregate_order_by {
  avg: Measurement_avg_order_by
  count: order_by
  max: Measurement_max_order_by
  min: Measurement_min_order_by
  stddev: Measurement_stddev_order_by
  stddev_pop: Measurement_stddev_pop_order_by
  stddev_samp: Measurement_stddev_samp_order_by
  sum: Measurement_sum_order_by
  var_pop: Measurement_var_pop_order_by
  var_samp: Measurement_var_samp_order_by
  variance: Measurement_variance_order_by
}
"""
input type for inserting array relation for remote table "Measurement"
"""
input Measurement_arr_rel_insert_input {
  data: [Measurement_insert_input!]!
  "on conflict condition"
  on_conflict: Measurement_on_conflict
}
"aggregate avg on columns"
type Measurement_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Measurement"
"""
input Measurement_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Measurement". All fields are combined with a logical 'AND'.
"""
input Measurement_bool_exp {
  Group: Group_bool_exp
  Join__Instrument_Capabilities: Join__Instrument_Capability_bool_exp
  Join__Instrument_Measurements: Join__Instrument_Measurement_bool_exp
  Requirement_Rule_Attributes: Requirement_Rule_Attribute_bool_exp
  Requirement_Rule_Cases: Requirement_Rule_Case_bool_exp
  _and: [Measurement_bool_exp!]
  _not: Measurement_bool_exp
  _or: [Measurement_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  synergy_rule: Boolean_comparison_exp
}
"""
unique or primary key constraints on table "Measurement"
"""
enum Measurement_constraint {
  "unique or primary key constraint"
  Measurement_pkey
}
"""
input type for incrementing numeric columns in table "Measurement"
"""
input Measurement_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Measurement"
"""
input Measurement_insert_input {
  Group: Group_obj_rel_insert_input
  Join__Instrument_Capabilities: Join__Instrument_Capability_arr_rel_insert_input
  Join__Instrument_Measurements: Join__Instrument_Measurement_arr_rel_insert_input
  Requirement_Rule_Attributes: Requirement_Rule_Attribute_arr_rel_insert_input
  Requirement_Rule_Cases: Requirement_Rule_Case_arr_rel_insert_input
  group_id: Int
  id: Int
  name: String
  synergy_rule: Boolean
}
"aggregate max on columns"
type Measurement_max_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by max() on columns of table "Measurement"
"""
input Measurement_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"aggregate min on columns"
type Measurement_min_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by min() on columns of table "Measurement"
"""
input Measurement_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"""
response of any mutation on the table "Measurement"
"""
type Measurement_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Measurement!]!
}
"""
input type for inserting object relation for remote table "Measurement"
"""
input Measurement_obj_rel_insert_input {
  data: Measurement_insert_input!
  "on conflict condition"
  on_conflict: Measurement_on_conflict
}
"""
on conflict condition type for table "Measurement"
"""
input Measurement_on_conflict {
  constraint: Measurement_constraint!
  update_columns: [Measurement_update_column!]! = []
  where: Measurement_bool_exp
}
"""
Ordering options when selecting data from "Measurement".
"""
input Measurement_order_by {
  Group: Group_order_by
  Join__Instrument_Capabilities_aggregate: Join__Instrument_Capability_aggregate_order_by
  Join__Instrument_Measurements_aggregate: Join__Instrument_Measurement_aggregate_order_by
  Requirement_Rule_Attributes_aggregate: Requirement_Rule_Attribute_aggregate_order_by
  Requirement_Rule_Cases_aggregate: Requirement_Rule_Case_aggregate_order_by
  group_id: order_by
  id: order_by
  name: order_by
  synergy_rule: order_by
}
"primary key columns input for table: Measurement"
input Measurement_pk_columns_input {
  id: Int!
}
"""
select columns of table "Measurement"
"""
enum Measurement_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  synergy_rule
}
"""
input type for updating data in table "Measurement"
"""
input Measurement_set_input {
  group_id: Int
  id: Int
  name: String
  synergy_rule: Boolean
}
"aggregate stddev on columns"
type Measurement_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Measurement"
"""
input Measurement_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Measurement_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Measurement"
"""
input Measurement_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Measurement_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Measurement"
"""
input Measurement_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Measurement_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Measurement"
"""
input Measurement_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Measurement"
"""
enum Measurement_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  synergy_rule
}
"aggregate var_pop on columns"
type Measurement_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Measurement"
"""
input Measurement_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Measurement_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Measurement"
"""
input Measurement_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Measurement_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Measurement"
"""
input Measurement_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
columns and relationships of "Mission_Attribute"
"""
type Mission_Attribute {
  "An array relationship"
  ArchitectureBudgets("distinct select on columns" distinct_on: [ArchitectureBudget_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureBudget_order_by!], "filter the rows returned" where: ArchitectureBudget_bool_exp): [ArchitectureBudget!]!
  "An aggregate relationship"
  ArchitectureBudgets_aggregate("distinct select on columns" distinct_on: [ArchitectureBudget_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureBudget_order_by!], "filter the rows returned" where: ArchitectureBudget_bool_exp): ArchitectureBudget_aggregate!
  "An array relationship"
  Join__Mission_Attribute_Values("distinct select on columns" distinct_on: [Join__Mission_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Mission_Attribute_Values_order_by!], "filter the rows returned" where: Join__Mission_Attribute_Values_bool_exp): [Join__Mission_Attribute_Values!]!
  "An aggregate relationship"
  Join__Mission_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Mission_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Mission_Attribute_Values_order_by!], "filter the rows returned" where: Join__Mission_Attribute_Values_bool_exp): Join__Mission_Attribute_Values_aggregate!
  "An object relationship"
  Problem: Problem
  id: Int!
  name: String
  problem_id: Int
  slot_type: String
  type: String
}
"""
aggregated selection of "Mission_Attribute"
"""
type Mission_Attribute_aggregate {
  aggregate: Mission_Attribute_aggregate_fields
  nodes: [Mission_Attribute!]!
}
"""
aggregate fields of "Mission_Attribute"
"""
type Mission_Attribute_aggregate_fields {
  avg: Mission_Attribute_avg_fields
  count(columns: [Mission_Attribute_select_column!], distinct: Boolean): Int!
  max: Mission_Attribute_max_fields
  min: Mission_Attribute_min_fields
  stddev: Mission_Attribute_stddev_fields
  stddev_pop: Mission_Attribute_stddev_pop_fields
  stddev_samp: Mission_Attribute_stddev_samp_fields
  sum: Mission_Attribute_sum_fields
  var_pop: Mission_Attribute_var_pop_fields
  var_samp: Mission_Attribute_var_samp_fields
  variance: Mission_Attribute_variance_fields
}
"""
order by aggregate values of table "Mission_Attribute"
"""
input Mission_Attribute_aggregate_order_by {
  avg: Mission_Attribute_avg_order_by
  count: order_by
  max: Mission_Attribute_max_order_by
  min: Mission_Attribute_min_order_by
  stddev: Mission_Attribute_stddev_order_by
  stddev_pop: Mission_Attribute_stddev_pop_order_by
  stddev_samp: Mission_Attribute_stddev_samp_order_by
  sum: Mission_Attribute_sum_order_by
  var_pop: Mission_Attribute_var_pop_order_by
  var_samp: Mission_Attribute_var_samp_order_by
  variance: Mission_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Mission_Attribute"
"""
input Mission_Attribute_arr_rel_insert_input {
  data: [Mission_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Mission_Attribute_on_conflict
}
"aggregate avg on columns"
type Mission_Attribute_avg_fields {
  id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_avg_order_by {
  id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "Mission_Attribute". All fields are combined with a logical 'AND'.
"""
input Mission_Attribute_bool_exp {
  ArchitectureBudgets: ArchitectureBudget_bool_exp
  Join__Mission_Attribute_Values: Join__Mission_Attribute_Values_bool_exp
  Problem: Problem_bool_exp
  _and: [Mission_Attribute_bool_exp!]
  _not: Mission_Attribute_bool_exp
  _or: [Mission_Attribute_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
  problem_id: Int_comparison_exp
  slot_type: String_comparison_exp
  type: String_comparison_exp
}
"""
unique or primary key constraints on table "Mission_Attribute"
"""
enum Mission_Attribute_constraint {
  "unique or primary key constraint"
  Mission_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Mission_Attribute"
"""
input Mission_Attribute_inc_input {
  id: Int
  problem_id: Int
}
"""
input type for inserting data into table "Mission_Attribute"
"""
input Mission_Attribute_insert_input {
  ArchitectureBudgets: ArchitectureBudget_arr_rel_insert_input
  Join__Mission_Attribute_Values: Join__Mission_Attribute_Values_arr_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  id: Int
  name: String
  problem_id: Int
  slot_type: String
  type: String
}
"aggregate max on columns"
type Mission_Attribute_max_fields {
  id: Int
  name: String
  problem_id: Int
  slot_type: String
  type: String
}
"""
order by max() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_max_order_by {
  id: order_by
  name: order_by
  problem_id: order_by
  slot_type: order_by
  type: order_by
}
"aggregate min on columns"
type Mission_Attribute_min_fields {
  id: Int
  name: String
  problem_id: Int
  slot_type: String
  type: String
}
"""
order by min() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_min_order_by {
  id: order_by
  name: order_by
  problem_id: order_by
  slot_type: order_by
  type: order_by
}
"""
response of any mutation on the table "Mission_Attribute"
"""
type Mission_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Mission_Attribute!]!
}
"""
input type for inserting object relation for remote table "Mission_Attribute"
"""
input Mission_Attribute_obj_rel_insert_input {
  data: Mission_Attribute_insert_input!
  "on conflict condition"
  on_conflict: Mission_Attribute_on_conflict
}
"""
on conflict condition type for table "Mission_Attribute"
"""
input Mission_Attribute_on_conflict {
  constraint: Mission_Attribute_constraint!
  update_columns: [Mission_Attribute_update_column!]! = []
  where: Mission_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Mission_Attribute".
"""
input Mission_Attribute_order_by {
  ArchitectureBudgets_aggregate: ArchitectureBudget_aggregate_order_by
  Join__Mission_Attribute_Values_aggregate: Join__Mission_Attribute_Values_aggregate_order_by
  Problem: Problem_order_by
  id: order_by
  name: order_by
  problem_id: order_by
  slot_type: order_by
  type: order_by
}
"primary key columns input for table: Mission_Attribute"
input Mission_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Mission_Attribute"
"""
enum Mission_Attribute_select_column {
  "column name"
  id
  "column name"
  name
  "column name"
  problem_id
  "column name"
  slot_type
  "column name"
  type
}
"""
input type for updating data in table "Mission_Attribute"
"""
input Mission_Attribute_set_input {
  id: Int
  name: String
  problem_id: Int
  slot_type: String
  type: String
}
"aggregate stddev on columns"
type Mission_Attribute_stddev_fields {
  id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_stddev_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type Mission_Attribute_stddev_pop_fields {
  id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_stddev_pop_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type Mission_Attribute_stddev_samp_fields {
  id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_stddev_samp_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type Mission_Attribute_sum_fields {
  id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_sum_order_by {
  id: order_by
  problem_id: order_by
}
"""
update columns of table "Mission_Attribute"
"""
enum Mission_Attribute_update_column {
  "column name"
  id
  "column name"
  name
  "column name"
  problem_id
  "column name"
  slot_type
  "column name"
  type
}
"aggregate var_pop on columns"
type Mission_Attribute_var_pop_fields {
  id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_var_pop_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type Mission_Attribute_var_samp_fields {
  id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_var_samp_order_by {
  id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type Mission_Attribute_variance_fields {
  id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "Mission_Attribute"
"""
input Mission_Attribute_variance_order_by {
  id: order_by
  problem_id: order_by
}
"""
columns and relationships of "ObjectiveScoreExplanation"
"""
type ObjectiveScoreExplanation {
  "An object relationship"
  Architecture: Architecture
  "An object relationship"
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective
  architecture_id: Int
  id: Int!
  satisfaction: float8
  subobjective_id: Int
}
"""
aggregated selection of "ObjectiveScoreExplanation"
"""
type ObjectiveScoreExplanation_aggregate {
  aggregate: ObjectiveScoreExplanation_aggregate_fields
  nodes: [ObjectiveScoreExplanation!]!
}
"""
aggregate fields of "ObjectiveScoreExplanation"
"""
type ObjectiveScoreExplanation_aggregate_fields {
  avg: ObjectiveScoreExplanation_avg_fields
  count(columns: [ObjectiveScoreExplanation_select_column!], distinct: Boolean): Int!
  max: ObjectiveScoreExplanation_max_fields
  min: ObjectiveScoreExplanation_min_fields
  stddev: ObjectiveScoreExplanation_stddev_fields
  stddev_pop: ObjectiveScoreExplanation_stddev_pop_fields
  stddev_samp: ObjectiveScoreExplanation_stddev_samp_fields
  sum: ObjectiveScoreExplanation_sum_fields
  var_pop: ObjectiveScoreExplanation_var_pop_fields
  var_samp: ObjectiveScoreExplanation_var_samp_fields
  variance: ObjectiveScoreExplanation_variance_fields
}
"""
order by aggregate values of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_aggregate_order_by {
  avg: ObjectiveScoreExplanation_avg_order_by
  count: order_by
  max: ObjectiveScoreExplanation_max_order_by
  min: ObjectiveScoreExplanation_min_order_by
  stddev: ObjectiveScoreExplanation_stddev_order_by
  stddev_pop: ObjectiveScoreExplanation_stddev_pop_order_by
  stddev_samp: ObjectiveScoreExplanation_stddev_samp_order_by
  sum: ObjectiveScoreExplanation_sum_order_by
  var_pop: ObjectiveScoreExplanation_var_pop_order_by
  var_samp: ObjectiveScoreExplanation_var_samp_order_by
  variance: ObjectiveScoreExplanation_variance_order_by
}
"""
input type for inserting array relation for remote table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_arr_rel_insert_input {
  data: [ObjectiveScoreExplanation_insert_input!]!
  "on conflict condition"
  on_conflict: ObjectiveScoreExplanation_on_conflict
}
"aggregate avg on columns"
type ObjectiveScoreExplanation_avg_fields {
  architecture_id: Float
  id: Float
  satisfaction: Float
  subobjective_id: Float
}
"""
order by avg() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_avg_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"""
Boolean expression to filter rows from the table "ObjectiveScoreExplanation". All fields are combined with a logical 'AND'.
"""
input ObjectiveScoreExplanation_bool_exp {
  Architecture: Architecture_bool_exp
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_bool_exp
  _and: [ObjectiveScoreExplanation_bool_exp!]
  _not: ObjectiveScoreExplanation_bool_exp
  _or: [ObjectiveScoreExplanation_bool_exp!]
  architecture_id: Int_comparison_exp
  id: Int_comparison_exp
  satisfaction: float8_comparison_exp
  subobjective_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "ObjectiveScoreExplanation"
"""
enum ObjectiveScoreExplanation_constraint {
  "unique or primary key constraint"
  ObjectiveScoreExplanation_pkey
}
"""
input type for incrementing numeric columns in table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_inc_input {
  architecture_id: Int
  id: Int
  satisfaction: float8
  subobjective_id: Int
}
"""
input type for inserting data into table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_insert_input {
  Architecture: Architecture_obj_rel_insert_input
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_obj_rel_insert_input
  architecture_id: Int
  id: Int
  satisfaction: float8
  subobjective_id: Int
}
"aggregate max on columns"
type ObjectiveScoreExplanation_max_fields {
  architecture_id: Int
  id: Int
  satisfaction: float8
  subobjective_id: Int
}
"""
order by max() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_max_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"aggregate min on columns"
type ObjectiveScoreExplanation_min_fields {
  architecture_id: Int
  id: Int
  satisfaction: float8
  subobjective_id: Int
}
"""
order by min() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_min_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"""
response of any mutation on the table "ObjectiveScoreExplanation"
"""
type ObjectiveScoreExplanation_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [ObjectiveScoreExplanation!]!
}
"""
on conflict condition type for table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_on_conflict {
  constraint: ObjectiveScoreExplanation_constraint!
  update_columns: [ObjectiveScoreExplanation_update_column!]! = []
  where: ObjectiveScoreExplanation_bool_exp
}
"""
Ordering options when selecting data from "ObjectiveScoreExplanation".
"""
input ObjectiveScoreExplanation_order_by {
  Architecture: Architecture_order_by
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_order_by
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"primary key columns input for table: ObjectiveScoreExplanation"
input ObjectiveScoreExplanation_pk_columns_input {
  id: Int!
}
"""
select columns of table "ObjectiveScoreExplanation"
"""
enum ObjectiveScoreExplanation_select_column {
  "column name"
  architecture_id
  "column name"
  id
  "column name"
  satisfaction
  "column name"
  subobjective_id
}
"""
input type for updating data in table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_set_input {
  architecture_id: Int
  id: Int
  satisfaction: float8
  subobjective_id: Int
}
"aggregate stddev on columns"
type ObjectiveScoreExplanation_stddev_fields {
  architecture_id: Float
  id: Float
  satisfaction: Float
  subobjective_id: Float
}
"""
order by stddev() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_stddev_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"aggregate stddev_pop on columns"
type ObjectiveScoreExplanation_stddev_pop_fields {
  architecture_id: Float
  id: Float
  satisfaction: Float
  subobjective_id: Float
}
"""
order by stddev_pop() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_stddev_pop_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"aggregate stddev_samp on columns"
type ObjectiveScoreExplanation_stddev_samp_fields {
  architecture_id: Float
  id: Float
  satisfaction: Float
  subobjective_id: Float
}
"""
order by stddev_samp() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_stddev_samp_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"aggregate sum on columns"
type ObjectiveScoreExplanation_sum_fields {
  architecture_id: Int
  id: Int
  satisfaction: float8
  subobjective_id: Int
}
"""
order by sum() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_sum_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"""
update columns of table "ObjectiveScoreExplanation"
"""
enum ObjectiveScoreExplanation_update_column {
  "column name"
  architecture_id
  "column name"
  id
  "column name"
  satisfaction
  "column name"
  subobjective_id
}
"aggregate var_pop on columns"
type ObjectiveScoreExplanation_var_pop_fields {
  architecture_id: Float
  id: Float
  satisfaction: Float
  subobjective_id: Float
}
"""
order by var_pop() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_var_pop_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"aggregate var_samp on columns"
type ObjectiveScoreExplanation_var_samp_fields {
  architecture_id: Float
  id: Float
  satisfaction: Float
  subobjective_id: Float
}
"""
order by var_samp() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_var_samp_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"aggregate variance on columns"
type ObjectiveScoreExplanation_variance_fields {
  architecture_id: Float
  id: Float
  satisfaction: Float
  subobjective_id: Float
}
"""
order by variance() on columns of table "ObjectiveScoreExplanation"
"""
input ObjectiveScoreExplanation_variance_order_by {
  architecture_id: order_by
  id: order_by
  satisfaction: order_by
  subobjective_id: order_by
}
"""
columns and relationships of "Orbit"
"""
type Orbit {
  "An object relationship"
  Group: Group
  "An array relationship"
  Join__Orbit_Attributes("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): [Join__Orbit_Attribute!]!
  "An aggregate relationship"
  Join__Orbit_Attributes_aggregate("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): Join__Orbit_Attribute_aggregate!
  "An array relationship"
  Join__Problem_Orbits("distinct select on columns" distinct_on: [Join__Problem_Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Orbit_order_by!], "filter the rows returned" where: Join__Problem_Orbit_bool_exp): [Join__Problem_Orbit!]!
  "An aggregate relationship"
  Join__Problem_Orbits_aggregate("distinct select on columns" distinct_on: [Join__Problem_Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Orbit_order_by!], "filter the rows returned" where: Join__Problem_Orbit_bool_exp): Join__Problem_Orbit_aggregate!
  group_id: Int
  id: Int!
  name: String
}
"""
columns and relationships of "Orbit_Attribute"
"""
type Orbit_Attribute {
  "An object relationship"
  Group: Group
  "An array relationship"
  Join__Orbit_Attribute_Values("distinct select on columns" distinct_on: [Join__Orbit_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_Values_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_Values_bool_exp): [Join__Orbit_Attribute_Values!]!
  "An aggregate relationship"
  Join__Orbit_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Orbit_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_Values_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_Values_bool_exp): Join__Orbit_Attribute_Values_aggregate!
  "An array relationship"
  Join__Orbit_Attributes("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): [Join__Orbit_Attribute!]!
  "An aggregate relationship"
  Join__Orbit_Attributes_aggregate("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): Join__Orbit_Attribute_aggregate!
  group_id: Int
  id: Int!
  name: String
  slot_type: String
  type: String
}
"""
aggregated selection of "Orbit_Attribute"
"""
type Orbit_Attribute_aggregate {
  aggregate: Orbit_Attribute_aggregate_fields
  nodes: [Orbit_Attribute!]!
}
"""
aggregate fields of "Orbit_Attribute"
"""
type Orbit_Attribute_aggregate_fields {
  avg: Orbit_Attribute_avg_fields
  count(columns: [Orbit_Attribute_select_column!], distinct: Boolean): Int!
  max: Orbit_Attribute_max_fields
  min: Orbit_Attribute_min_fields
  stddev: Orbit_Attribute_stddev_fields
  stddev_pop: Orbit_Attribute_stddev_pop_fields
  stddev_samp: Orbit_Attribute_stddev_samp_fields
  sum: Orbit_Attribute_sum_fields
  var_pop: Orbit_Attribute_var_pop_fields
  var_samp: Orbit_Attribute_var_samp_fields
  variance: Orbit_Attribute_variance_fields
}
"""
order by aggregate values of table "Orbit_Attribute"
"""
input Orbit_Attribute_aggregate_order_by {
  avg: Orbit_Attribute_avg_order_by
  count: order_by
  max: Orbit_Attribute_max_order_by
  min: Orbit_Attribute_min_order_by
  stddev: Orbit_Attribute_stddev_order_by
  stddev_pop: Orbit_Attribute_stddev_pop_order_by
  stddev_samp: Orbit_Attribute_stddev_samp_order_by
  sum: Orbit_Attribute_sum_order_by
  var_pop: Orbit_Attribute_var_pop_order_by
  var_samp: Orbit_Attribute_var_samp_order_by
  variance: Orbit_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Orbit_Attribute"
"""
input Orbit_Attribute_arr_rel_insert_input {
  data: [Orbit_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Orbit_Attribute_on_conflict
}
"aggregate avg on columns"
type Orbit_Attribute_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Orbit_Attribute". All fields are combined with a logical 'AND'.
"""
input Orbit_Attribute_bool_exp {
  Group: Group_bool_exp
  Join__Orbit_Attribute_Values: Join__Orbit_Attribute_Values_bool_exp
  Join__Orbit_Attributes: Join__Orbit_Attribute_bool_exp
  _and: [Orbit_Attribute_bool_exp!]
  _not: Orbit_Attribute_bool_exp
  _or: [Orbit_Attribute_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  slot_type: String_comparison_exp
  type: String_comparison_exp
}
"""
unique or primary key constraints on table "Orbit_Attribute"
"""
enum Orbit_Attribute_constraint {
  "unique or primary key constraint"
  Orbit_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Orbit_Attribute"
"""
input Orbit_Attribute_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Orbit_Attribute"
"""
input Orbit_Attribute_insert_input {
  Group: Group_obj_rel_insert_input
  Join__Orbit_Attribute_Values: Join__Orbit_Attribute_Values_arr_rel_insert_input
  Join__Orbit_Attributes: Join__Orbit_Attribute_arr_rel_insert_input
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"aggregate max on columns"
type Orbit_Attribute_max_fields {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"""
order by max() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"aggregate min on columns"
type Orbit_Attribute_min_fields {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"""
order by min() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"""
response of any mutation on the table "Orbit_Attribute"
"""
type Orbit_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Orbit_Attribute!]!
}
"""
input type for inserting object relation for remote table "Orbit_Attribute"
"""
input Orbit_Attribute_obj_rel_insert_input {
  data: Orbit_Attribute_insert_input!
  "on conflict condition"
  on_conflict: Orbit_Attribute_on_conflict
}
"""
on conflict condition type for table "Orbit_Attribute"
"""
input Orbit_Attribute_on_conflict {
  constraint: Orbit_Attribute_constraint!
  update_columns: [Orbit_Attribute_update_column!]! = []
  where: Orbit_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Orbit_Attribute".
"""
input Orbit_Attribute_order_by {
  Group: Group_order_by
  Join__Orbit_Attribute_Values_aggregate: Join__Orbit_Attribute_Values_aggregate_order_by
  Join__Orbit_Attributes_aggregate: Join__Orbit_Attribute_aggregate_order_by
  group_id: order_by
  id: order_by
  name: order_by
  slot_type: order_by
  type: order_by
}
"primary key columns input for table: Orbit_Attribute"
input Orbit_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Orbit_Attribute"
"""
enum Orbit_Attribute_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  slot_type
  "column name"
  type
}
"""
input type for updating data in table "Orbit_Attribute"
"""
input Orbit_Attribute_set_input {
  group_id: Int
  id: Int
  name: String
  slot_type: String
  type: String
}
"aggregate stddev on columns"
type Orbit_Attribute_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Orbit_Attribute_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Orbit_Attribute_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Orbit_Attribute_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Orbit_Attribute"
"""
enum Orbit_Attribute_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  slot_type
  "column name"
  type
}
"aggregate var_pop on columns"
type Orbit_Attribute_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Orbit_Attribute_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Orbit_Attribute_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Orbit_Attribute"
"""
input Orbit_Attribute_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
aggregated selection of "Orbit"
"""
type Orbit_aggregate {
  aggregate: Orbit_aggregate_fields
  nodes: [Orbit!]!
}
"""
aggregate fields of "Orbit"
"""
type Orbit_aggregate_fields {
  avg: Orbit_avg_fields
  count(columns: [Orbit_select_column!], distinct: Boolean): Int!
  max: Orbit_max_fields
  min: Orbit_min_fields
  stddev: Orbit_stddev_fields
  stddev_pop: Orbit_stddev_pop_fields
  stddev_samp: Orbit_stddev_samp_fields
  sum: Orbit_sum_fields
  var_pop: Orbit_var_pop_fields
  var_samp: Orbit_var_samp_fields
  variance: Orbit_variance_fields
}
"""
order by aggregate values of table "Orbit"
"""
input Orbit_aggregate_order_by {
  avg: Orbit_avg_order_by
  count: order_by
  max: Orbit_max_order_by
  min: Orbit_min_order_by
  stddev: Orbit_stddev_order_by
  stddev_pop: Orbit_stddev_pop_order_by
  stddev_samp: Orbit_stddev_samp_order_by
  sum: Orbit_sum_order_by
  var_pop: Orbit_var_pop_order_by
  var_samp: Orbit_var_samp_order_by
  variance: Orbit_variance_order_by
}
"""
input type for inserting array relation for remote table "Orbit"
"""
input Orbit_arr_rel_insert_input {
  data: [Orbit_insert_input!]!
  "on conflict condition"
  on_conflict: Orbit_on_conflict
}
"aggregate avg on columns"
type Orbit_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Orbit"
"""
input Orbit_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Orbit". All fields are combined with a logical 'AND'.
"""
input Orbit_bool_exp {
  Group: Group_bool_exp
  Join__Orbit_Attributes: Join__Orbit_Attribute_bool_exp
  Join__Problem_Orbits: Join__Problem_Orbit_bool_exp
  _and: [Orbit_bool_exp!]
  _not: Orbit_bool_exp
  _or: [Orbit_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}
"""
unique or primary key constraints on table "Orbit"
"""
enum Orbit_constraint {
  "unique or primary key constraint"
  Orbit_pkey
}
"""
input type for incrementing numeric columns in table "Orbit"
"""
input Orbit_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Orbit"
"""
input Orbit_insert_input {
  Group: Group_obj_rel_insert_input
  Join__Orbit_Attributes: Join__Orbit_Attribute_arr_rel_insert_input
  Join__Problem_Orbits: Join__Problem_Orbit_arr_rel_insert_input
  group_id: Int
  id: Int
  name: String
}
"aggregate max on columns"
type Orbit_max_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by max() on columns of table "Orbit"
"""
input Orbit_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"aggregate min on columns"
type Orbit_min_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by min() on columns of table "Orbit"
"""
input Orbit_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"""
response of any mutation on the table "Orbit"
"""
type Orbit_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Orbit!]!
}
"""
input type for inserting object relation for remote table "Orbit"
"""
input Orbit_obj_rel_insert_input {
  data: Orbit_insert_input!
  "on conflict condition"
  on_conflict: Orbit_on_conflict
}
"""
on conflict condition type for table "Orbit"
"""
input Orbit_on_conflict {
  constraint: Orbit_constraint!
  update_columns: [Orbit_update_column!]! = []
  where: Orbit_bool_exp
}
"""
Ordering options when selecting data from "Orbit".
"""
input Orbit_order_by {
  Group: Group_order_by
  Join__Orbit_Attributes_aggregate: Join__Orbit_Attribute_aggregate_order_by
  Join__Problem_Orbits_aggregate: Join__Problem_Orbit_aggregate_order_by
  group_id: order_by
  id: order_by
  name: order_by
}
"primary key columns input for table: Orbit"
input Orbit_pk_columns_input {
  id: Int!
}
"""
select columns of table "Orbit"
"""
enum Orbit_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
}
"""
input type for updating data in table "Orbit"
"""
input Orbit_set_input {
  group_id: Int
  id: Int
  name: String
}
"aggregate stddev on columns"
type Orbit_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Orbit"
"""
input Orbit_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Orbit_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Orbit"
"""
input Orbit_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Orbit_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Orbit"
"""
input Orbit_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Orbit_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Orbit"
"""
input Orbit_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Orbit"
"""
enum Orbit_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
}
"aggregate var_pop on columns"
type Orbit_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Orbit"
"""
input Orbit_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Orbit_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Orbit"
"""
input Orbit_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Orbit_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Orbit"
"""
input Orbit_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
columns and relationships of "PanelScoreExplanation"
"""
type PanelScoreExplanation {
  "An object relationship"
  Architecture: Architecture
  "An object relationship"
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective
  architecture_id: Int
  id: Int!
  objective_id: Int
  satisfaction: float8
}
"""
aggregated selection of "PanelScoreExplanation"
"""
type PanelScoreExplanation_aggregate {
  aggregate: PanelScoreExplanation_aggregate_fields
  nodes: [PanelScoreExplanation!]!
}
"""
aggregate fields of "PanelScoreExplanation"
"""
type PanelScoreExplanation_aggregate_fields {
  avg: PanelScoreExplanation_avg_fields
  count(columns: [PanelScoreExplanation_select_column!], distinct: Boolean): Int!
  max: PanelScoreExplanation_max_fields
  min: PanelScoreExplanation_min_fields
  stddev: PanelScoreExplanation_stddev_fields
  stddev_pop: PanelScoreExplanation_stddev_pop_fields
  stddev_samp: PanelScoreExplanation_stddev_samp_fields
  sum: PanelScoreExplanation_sum_fields
  var_pop: PanelScoreExplanation_var_pop_fields
  var_samp: PanelScoreExplanation_var_samp_fields
  variance: PanelScoreExplanation_variance_fields
}
"""
order by aggregate values of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_aggregate_order_by {
  avg: PanelScoreExplanation_avg_order_by
  count: order_by
  max: PanelScoreExplanation_max_order_by
  min: PanelScoreExplanation_min_order_by
  stddev: PanelScoreExplanation_stddev_order_by
  stddev_pop: PanelScoreExplanation_stddev_pop_order_by
  stddev_samp: PanelScoreExplanation_stddev_samp_order_by
  sum: PanelScoreExplanation_sum_order_by
  var_pop: PanelScoreExplanation_var_pop_order_by
  var_samp: PanelScoreExplanation_var_samp_order_by
  variance: PanelScoreExplanation_variance_order_by
}
"""
input type for inserting array relation for remote table "PanelScoreExplanation"
"""
input PanelScoreExplanation_arr_rel_insert_input {
  data: [PanelScoreExplanation_insert_input!]!
  "on conflict condition"
  on_conflict: PanelScoreExplanation_on_conflict
}
"aggregate avg on columns"
type PanelScoreExplanation_avg_fields {
  architecture_id: Float
  id: Float
  objective_id: Float
  satisfaction: Float
}
"""
order by avg() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_avg_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"""
Boolean expression to filter rows from the table "PanelScoreExplanation". All fields are combined with a logical 'AND'.
"""
input PanelScoreExplanation_bool_exp {
  Architecture: Architecture_bool_exp
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective_bool_exp
  _and: [PanelScoreExplanation_bool_exp!]
  _not: PanelScoreExplanation_bool_exp
  _or: [PanelScoreExplanation_bool_exp!]
  architecture_id: Int_comparison_exp
  id: Int_comparison_exp
  objective_id: Int_comparison_exp
  satisfaction: float8_comparison_exp
}
"""
unique or primary key constraints on table "PanelScoreExplanation"
"""
enum PanelScoreExplanation_constraint {
  "unique or primary key constraint"
  PanelScoreExplanation_pkey
}
"""
input type for incrementing numeric columns in table "PanelScoreExplanation"
"""
input PanelScoreExplanation_inc_input {
  architecture_id: Int
  id: Int
  objective_id: Int
  satisfaction: float8
}
"""
input type for inserting data into table "PanelScoreExplanation"
"""
input PanelScoreExplanation_insert_input {
  Architecture: Architecture_obj_rel_insert_input
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective_obj_rel_insert_input
  architecture_id: Int
  id: Int
  objective_id: Int
  satisfaction: float8
}
"aggregate max on columns"
type PanelScoreExplanation_max_fields {
  architecture_id: Int
  id: Int
  objective_id: Int
  satisfaction: float8
}
"""
order by max() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_max_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"aggregate min on columns"
type PanelScoreExplanation_min_fields {
  architecture_id: Int
  id: Int
  objective_id: Int
  satisfaction: float8
}
"""
order by min() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_min_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"""
response of any mutation on the table "PanelScoreExplanation"
"""
type PanelScoreExplanation_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [PanelScoreExplanation!]!
}
"""
on conflict condition type for table "PanelScoreExplanation"
"""
input PanelScoreExplanation_on_conflict {
  constraint: PanelScoreExplanation_constraint!
  update_columns: [PanelScoreExplanation_update_column!]! = []
  where: PanelScoreExplanation_bool_exp
}
"""
Ordering options when selecting data from "PanelScoreExplanation".
"""
input PanelScoreExplanation_order_by {
  Architecture: Architecture_order_by
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective_order_by
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"primary key columns input for table: PanelScoreExplanation"
input PanelScoreExplanation_pk_columns_input {
  id: Int!
}
"""
select columns of table "PanelScoreExplanation"
"""
enum PanelScoreExplanation_select_column {
  "column name"
  architecture_id
  "column name"
  id
  "column name"
  objective_id
  "column name"
  satisfaction
}
"""
input type for updating data in table "PanelScoreExplanation"
"""
input PanelScoreExplanation_set_input {
  architecture_id: Int
  id: Int
  objective_id: Int
  satisfaction: float8
}
"aggregate stddev on columns"
type PanelScoreExplanation_stddev_fields {
  architecture_id: Float
  id: Float
  objective_id: Float
  satisfaction: Float
}
"""
order by stddev() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_stddev_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"aggregate stddev_pop on columns"
type PanelScoreExplanation_stddev_pop_fields {
  architecture_id: Float
  id: Float
  objective_id: Float
  satisfaction: Float
}
"""
order by stddev_pop() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_stddev_pop_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"aggregate stddev_samp on columns"
type PanelScoreExplanation_stddev_samp_fields {
  architecture_id: Float
  id: Float
  objective_id: Float
  satisfaction: Float
}
"""
order by stddev_samp() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_stddev_samp_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"aggregate sum on columns"
type PanelScoreExplanation_sum_fields {
  architecture_id: Int
  id: Int
  objective_id: Int
  satisfaction: float8
}
"""
order by sum() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_sum_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"""
update columns of table "PanelScoreExplanation"
"""
enum PanelScoreExplanation_update_column {
  "column name"
  architecture_id
  "column name"
  id
  "column name"
  objective_id
  "column name"
  satisfaction
}
"aggregate var_pop on columns"
type PanelScoreExplanation_var_pop_fields {
  architecture_id: Float
  id: Float
  objective_id: Float
  satisfaction: Float
}
"""
order by var_pop() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_var_pop_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"aggregate var_samp on columns"
type PanelScoreExplanation_var_samp_fields {
  architecture_id: Float
  id: Float
  objective_id: Float
  satisfaction: Float
}
"""
order by var_samp() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_var_samp_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"aggregate variance on columns"
type PanelScoreExplanation_variance_fields {
  architecture_id: Float
  id: Float
  objective_id: Float
  satisfaction: Float
}
"""
order by variance() on columns of table "PanelScoreExplanation"
"""
input PanelScoreExplanation_variance_order_by {
  architecture_id: order_by
  id: order_by
  objective_id: order_by
  satisfaction: order_by
}
"""
columns and relationships of "Power_Mission_Analysis"
"""
type Power_Mission_Analysis {
  "An object relationship"
  Problem: Problem
  RAAN: String
  altitude: float8
  fraction_of_sunlight: String
  id: Int!
  inclination: float8
  max_eclipse_time: float8
  orbit_id: String
  orbit_type: String
  period: float8
  problem_id: Int
  worst_sun_angles: float8
}
"""
aggregated selection of "Power_Mission_Analysis"
"""
type Power_Mission_Analysis_aggregate {
  aggregate: Power_Mission_Analysis_aggregate_fields
  nodes: [Power_Mission_Analysis!]!
}
"""
aggregate fields of "Power_Mission_Analysis"
"""
type Power_Mission_Analysis_aggregate_fields {
  avg: Power_Mission_Analysis_avg_fields
  count(columns: [Power_Mission_Analysis_select_column!], distinct: Boolean): Int!
  max: Power_Mission_Analysis_max_fields
  min: Power_Mission_Analysis_min_fields
  stddev: Power_Mission_Analysis_stddev_fields
  stddev_pop: Power_Mission_Analysis_stddev_pop_fields
  stddev_samp: Power_Mission_Analysis_stddev_samp_fields
  sum: Power_Mission_Analysis_sum_fields
  var_pop: Power_Mission_Analysis_var_pop_fields
  var_samp: Power_Mission_Analysis_var_samp_fields
  variance: Power_Mission_Analysis_variance_fields
}
"""
order by aggregate values of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_aggregate_order_by {
  avg: Power_Mission_Analysis_avg_order_by
  count: order_by
  max: Power_Mission_Analysis_max_order_by
  min: Power_Mission_Analysis_min_order_by
  stddev: Power_Mission_Analysis_stddev_order_by
  stddev_pop: Power_Mission_Analysis_stddev_pop_order_by
  stddev_samp: Power_Mission_Analysis_stddev_samp_order_by
  sum: Power_Mission_Analysis_sum_order_by
  var_pop: Power_Mission_Analysis_var_pop_order_by
  var_samp: Power_Mission_Analysis_var_samp_order_by
  variance: Power_Mission_Analysis_variance_order_by
}
"""
input type for inserting array relation for remote table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_arr_rel_insert_input {
  data: [Power_Mission_Analysis_insert_input!]!
  "on conflict condition"
  on_conflict: Power_Mission_Analysis_on_conflict
}
"aggregate avg on columns"
type Power_Mission_Analysis_avg_fields {
  altitude: Float
  id: Float
  inclination: Float
  max_eclipse_time: Float
  period: Float
  problem_id: Float
  worst_sun_angles: Float
}
"""
order by avg() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_avg_order_by {
  altitude: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"""
Boolean expression to filter rows from the table "Power_Mission_Analysis". All fields are combined with a logical 'AND'.
"""
input Power_Mission_Analysis_bool_exp {
  Problem: Problem_bool_exp
  RAAN: String_comparison_exp
  _and: [Power_Mission_Analysis_bool_exp!]
  _not: Power_Mission_Analysis_bool_exp
  _or: [Power_Mission_Analysis_bool_exp!]
  altitude: float8_comparison_exp
  fraction_of_sunlight: String_comparison_exp
  id: Int_comparison_exp
  inclination: float8_comparison_exp
  max_eclipse_time: float8_comparison_exp
  orbit_id: String_comparison_exp
  orbit_type: String_comparison_exp
  period: float8_comparison_exp
  problem_id: Int_comparison_exp
  worst_sun_angles: float8_comparison_exp
}
"""
unique or primary key constraints on table "Power_Mission_Analysis"
"""
enum Power_Mission_Analysis_constraint {
  "unique or primary key constraint"
  Power_Mission_Analysis_pkey
}
"""
input type for incrementing numeric columns in table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_inc_input {
  altitude: float8
  id: Int
  inclination: float8
  max_eclipse_time: float8
  period: float8
  problem_id: Int
  worst_sun_angles: float8
}
"""
input type for inserting data into table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_insert_input {
  Problem: Problem_obj_rel_insert_input
  RAAN: String
  altitude: float8
  fraction_of_sunlight: String
  id: Int
  inclination: float8
  max_eclipse_time: float8
  orbit_id: String
  orbit_type: String
  period: float8
  problem_id: Int
  worst_sun_angles: float8
}
"aggregate max on columns"
type Power_Mission_Analysis_max_fields {
  RAAN: String
  altitude: float8
  fraction_of_sunlight: String
  id: Int
  inclination: float8
  max_eclipse_time: float8
  orbit_id: String
  orbit_type: String
  period: float8
  problem_id: Int
  worst_sun_angles: float8
}
"""
order by max() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_max_order_by {
  RAAN: order_by
  altitude: order_by
  fraction_of_sunlight: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  orbit_id: order_by
  orbit_type: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"aggregate min on columns"
type Power_Mission_Analysis_min_fields {
  RAAN: String
  altitude: float8
  fraction_of_sunlight: String
  id: Int
  inclination: float8
  max_eclipse_time: float8
  orbit_id: String
  orbit_type: String
  period: float8
  problem_id: Int
  worst_sun_angles: float8
}
"""
order by min() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_min_order_by {
  RAAN: order_by
  altitude: order_by
  fraction_of_sunlight: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  orbit_id: order_by
  orbit_type: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"""
response of any mutation on the table "Power_Mission_Analysis"
"""
type Power_Mission_Analysis_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Power_Mission_Analysis!]!
}
"""
on conflict condition type for table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_on_conflict {
  constraint: Power_Mission_Analysis_constraint!
  update_columns: [Power_Mission_Analysis_update_column!]! = []
  where: Power_Mission_Analysis_bool_exp
}
"""
Ordering options when selecting data from "Power_Mission_Analysis".
"""
input Power_Mission_Analysis_order_by {
  Problem: Problem_order_by
  RAAN: order_by
  altitude: order_by
  fraction_of_sunlight: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  orbit_id: order_by
  orbit_type: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"primary key columns input for table: Power_Mission_Analysis"
input Power_Mission_Analysis_pk_columns_input {
  id: Int!
}
"""
select columns of table "Power_Mission_Analysis"
"""
enum Power_Mission_Analysis_select_column {
  "column name"
  RAAN
  "column name"
  altitude
  "column name"
  fraction_of_sunlight
  "column name"
  id
  "column name"
  inclination
  "column name"
  max_eclipse_time
  "column name"
  orbit_id
  "column name"
  orbit_type
  "column name"
  period
  "column name"
  problem_id
  "column name"
  worst_sun_angles
}
"""
input type for updating data in table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_set_input {
  RAAN: String
  altitude: float8
  fraction_of_sunlight: String
  id: Int
  inclination: float8
  max_eclipse_time: float8
  orbit_id: String
  orbit_type: String
  period: float8
  problem_id: Int
  worst_sun_angles: float8
}
"aggregate stddev on columns"
type Power_Mission_Analysis_stddev_fields {
  altitude: Float
  id: Float
  inclination: Float
  max_eclipse_time: Float
  period: Float
  problem_id: Float
  worst_sun_angles: Float
}
"""
order by stddev() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_stddev_order_by {
  altitude: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"aggregate stddev_pop on columns"
type Power_Mission_Analysis_stddev_pop_fields {
  altitude: Float
  id: Float
  inclination: Float
  max_eclipse_time: Float
  period: Float
  problem_id: Float
  worst_sun_angles: Float
}
"""
order by stddev_pop() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_stddev_pop_order_by {
  altitude: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"aggregate stddev_samp on columns"
type Power_Mission_Analysis_stddev_samp_fields {
  altitude: Float
  id: Float
  inclination: Float
  max_eclipse_time: Float
  period: Float
  problem_id: Float
  worst_sun_angles: Float
}
"""
order by stddev_samp() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_stddev_samp_order_by {
  altitude: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"aggregate sum on columns"
type Power_Mission_Analysis_sum_fields {
  altitude: float8
  id: Int
  inclination: float8
  max_eclipse_time: float8
  period: float8
  problem_id: Int
  worst_sun_angles: float8
}
"""
order by sum() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_sum_order_by {
  altitude: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"""
update columns of table "Power_Mission_Analysis"
"""
enum Power_Mission_Analysis_update_column {
  "column name"
  RAAN
  "column name"
  altitude
  "column name"
  fraction_of_sunlight
  "column name"
  id
  "column name"
  inclination
  "column name"
  max_eclipse_time
  "column name"
  orbit_id
  "column name"
  orbit_type
  "column name"
  period
  "column name"
  problem_id
  "column name"
  worst_sun_angles
}
"aggregate var_pop on columns"
type Power_Mission_Analysis_var_pop_fields {
  altitude: Float
  id: Float
  inclination: Float
  max_eclipse_time: Float
  period: Float
  problem_id: Float
  worst_sun_angles: Float
}
"""
order by var_pop() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_var_pop_order_by {
  altitude: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"aggregate var_samp on columns"
type Power_Mission_Analysis_var_samp_fields {
  altitude: Float
  id: Float
  inclination: Float
  max_eclipse_time: Float
  period: Float
  problem_id: Float
  worst_sun_angles: Float
}
"""
order by var_samp() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_var_samp_order_by {
  altitude: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"aggregate variance on columns"
type Power_Mission_Analysis_variance_fields {
  altitude: Float
  id: Float
  inclination: Float
  max_eclipse_time: Float
  period: Float
  problem_id: Float
  worst_sun_angles: Float
}
"""
order by variance() on columns of table "Power_Mission_Analysis"
"""
input Power_Mission_Analysis_variance_order_by {
  altitude: order_by
  id: order_by
  inclination: order_by
  max_eclipse_time: order_by
  period: order_by
  problem_id: order_by
  worst_sun_angles: order_by
}
"""
columns and relationships of "Problem"
"""
type Problem {
  "An array relationship"
  Architectures("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): [Architecture!]!
  "An aggregate relationship"
  Architectures_aggregate("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): Architecture_aggregate!
  "An array relationship"
  Datasets("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): [Dataset!]!
  "An aggregate relationship"
  Datasets_aggregate("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): Dataset_aggregate!
  "An array relationship"
  Fuzzy_Attributes("distinct select on columns" distinct_on: [Fuzzy_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Attribute_order_by!], "filter the rows returned" where: Fuzzy_Attribute_bool_exp): [Fuzzy_Attribute!]!
  "An aggregate relationship"
  Fuzzy_Attributes_aggregate("distinct select on columns" distinct_on: [Fuzzy_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Attribute_order_by!], "filter the rows returned" where: Fuzzy_Attribute_bool_exp): Fuzzy_Attribute_aggregate!
  "An object relationship"
  Group: Group
  "An array relationship"
  Inheritence_Attributes("distinct select on columns" distinct_on: [Inheritence_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Inheritence_Attribute_order_by!], "filter the rows returned" where: Inheritence_Attribute_bool_exp): [Inheritence_Attribute!]!
  "An aggregate relationship"
  Inheritence_Attributes_aggregate("distinct select on columns" distinct_on: [Inheritence_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Inheritence_Attribute_order_by!], "filter the rows returned" where: Inheritence_Attribute_bool_exp): Inheritence_Attribute_aggregate!
  "An array relationship"
  Join__Instrument_Characteristics("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): [Join__Instrument_Characteristic!]!
  "An aggregate relationship"
  Join__Instrument_Characteristics_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): Join__Instrument_Characteristic_aggregate!
  "An array relationship"
  Join__Instrument_Measurements("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): [Join__Instrument_Measurement!]!
  "An aggregate relationship"
  Join__Instrument_Measurements_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): Join__Instrument_Measurement_aggregate!
  "An array relationship"
  Join__Problem_Instruments("distinct select on columns" distinct_on: [Join__Problem_Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Instrument_order_by!], "filter the rows returned" where: Join__Problem_Instrument_bool_exp): [Join__Problem_Instrument!]!
  "An aggregate relationship"
  Join__Problem_Instruments_aggregate("distinct select on columns" distinct_on: [Join__Problem_Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Instrument_order_by!], "filter the rows returned" where: Join__Problem_Instrument_bool_exp): Join__Problem_Instrument_aggregate!
  "An array relationship"
  Join__Problem_Launch_Vehicles("distinct select on columns" distinct_on: [Join__Problem_Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Launch_Vehicle_order_by!], "filter the rows returned" where: Join__Problem_Launch_Vehicle_bool_exp): [Join__Problem_Launch_Vehicle!]!
  "An aggregate relationship"
  Join__Problem_Launch_Vehicles_aggregate("distinct select on columns" distinct_on: [Join__Problem_Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Launch_Vehicle_order_by!], "filter the rows returned" where: Join__Problem_Launch_Vehicle_bool_exp): Join__Problem_Launch_Vehicle_aggregate!
  "An array relationship"
  Join__Problem_Orbits("distinct select on columns" distinct_on: [Join__Problem_Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Orbit_order_by!], "filter the rows returned" where: Join__Problem_Orbit_bool_exp): [Join__Problem_Orbit!]!
  "An aggregate relationship"
  Join__Problem_Orbits_aggregate("distinct select on columns" distinct_on: [Join__Problem_Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Orbit_order_by!], "filter the rows returned" where: Join__Problem_Orbit_bool_exp): Join__Problem_Orbit_aggregate!
  "An array relationship"
  Launch_Vehicle_Mission_Analyses("distinct select on columns" distinct_on: [Launch_Vehicle_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Mission_Analysis_order_by!], "filter the rows returned" where: Launch_Vehicle_Mission_Analysis_bool_exp): [Launch_Vehicle_Mission_Analysis!]!
  "An aggregate relationship"
  Launch_Vehicle_Mission_Analyses_aggregate("distinct select on columns" distinct_on: [Launch_Vehicle_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Mission_Analysis_order_by!], "filter the rows returned" where: Launch_Vehicle_Mission_Analysis_bool_exp): Launch_Vehicle_Mission_Analysis_aggregate!
  "An array relationship"
  Mission_Attributes("distinct select on columns" distinct_on: [Mission_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Mission_Attribute_order_by!], "filter the rows returned" where: Mission_Attribute_bool_exp): [Mission_Attribute!]!
  "An aggregate relationship"
  Mission_Attributes_aggregate("distinct select on columns" distinct_on: [Mission_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Mission_Attribute_order_by!], "filter the rows returned" where: Mission_Attribute_bool_exp): Mission_Attribute_aggregate!
  "An array relationship"
  Power_Mission_Analyses("distinct select on columns" distinct_on: [Power_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Power_Mission_Analysis_order_by!], "filter the rows returned" where: Power_Mission_Analysis_bool_exp): [Power_Mission_Analysis!]!
  "An aggregate relationship"
  Power_Mission_Analyses_aggregate("distinct select on columns" distinct_on: [Power_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Power_Mission_Analysis_order_by!], "filter the rows returned" where: Power_Mission_Analysis_bool_exp): Power_Mission_Analysis_aggregate!
  "An array relationship"
  Requirement_Rule_Attributes("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): [Requirement_Rule_Attribute!]!
  "An aggregate relationship"
  Requirement_Rule_Attributes_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): Requirement_Rule_Attribute_aggregate!
  "An array relationship"
  Requirement_Rule_Cases("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): [Requirement_Rule_Case!]!
  "An aggregate relationship"
  Requirement_Rule_Cases_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): Requirement_Rule_Case_aggregate!
  "An array relationship"
  Stakeholder_Needs_Objectives("distinct select on columns" distinct_on: [Stakeholder_Needs_Objective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Objective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Objective_bool_exp): [Stakeholder_Needs_Objective!]!
  "An aggregate relationship"
  Stakeholder_Needs_Objectives_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Objective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Objective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Objective_bool_exp): Stakeholder_Needs_Objective_aggregate!
  "An array relationship"
  Stakeholder_Needs_Panels("distinct select on columns" distinct_on: [Stakeholder_Needs_Panel_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Panel_order_by!], "filter the rows returned" where: Stakeholder_Needs_Panel_bool_exp): [Stakeholder_Needs_Panel!]!
  "An aggregate relationship"
  Stakeholder_Needs_Panels_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Panel_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Panel_order_by!], "filter the rows returned" where: Stakeholder_Needs_Panel_bool_exp): Stakeholder_Needs_Panel_aggregate!
  "An array relationship"
  Stakeholder_Needs_Subobjectives("distinct select on columns" distinct_on: [Stakeholder_Needs_Subobjective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Subobjective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Subobjective_bool_exp): [Stakeholder_Needs_Subobjective!]!
  "An aggregate relationship"
  Stakeholder_Needs_Subobjectives_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Subobjective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Subobjective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Subobjective_bool_exp): Stakeholder_Needs_Subobjective_aggregate!
  "An array relationship"
  Walker_Mission_Analyses("distinct select on columns" distinct_on: [Walker_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Walker_Mission_Analysis_order_by!], "filter the rows returned" where: Walker_Mission_Analysis_bool_exp): [Walker_Mission_Analysis!]!
  "An aggregate relationship"
  Walker_Mission_Analyses_aggregate("distinct select on columns" distinct_on: [Walker_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Walker_Mission_Analysis_order_by!], "filter the rows returned" where: Walker_Mission_Analysis_bool_exp): Walker_Mission_Analysis_aggregate!
  group_id: Int
  id: Int!
  name: String
  reload_problem: Boolean
}
"""
aggregated selection of "Problem"
"""
type Problem_aggregate {
  aggregate: Problem_aggregate_fields
  nodes: [Problem!]!
}
"""
aggregate fields of "Problem"
"""
type Problem_aggregate_fields {
  avg: Problem_avg_fields
  count(columns: [Problem_select_column!], distinct: Boolean): Int!
  max: Problem_max_fields
  min: Problem_min_fields
  stddev: Problem_stddev_fields
  stddev_pop: Problem_stddev_pop_fields
  stddev_samp: Problem_stddev_samp_fields
  sum: Problem_sum_fields
  var_pop: Problem_var_pop_fields
  var_samp: Problem_var_samp_fields
  variance: Problem_variance_fields
}
"""
order by aggregate values of table "Problem"
"""
input Problem_aggregate_order_by {
  avg: Problem_avg_order_by
  count: order_by
  max: Problem_max_order_by
  min: Problem_min_order_by
  stddev: Problem_stddev_order_by
  stddev_pop: Problem_stddev_pop_order_by
  stddev_samp: Problem_stddev_samp_order_by
  sum: Problem_sum_order_by
  var_pop: Problem_var_pop_order_by
  var_samp: Problem_var_samp_order_by
  variance: Problem_variance_order_by
}
"""
input type for inserting array relation for remote table "Problem"
"""
input Problem_arr_rel_insert_input {
  data: [Problem_insert_input!]!
  "on conflict condition"
  on_conflict: Problem_on_conflict
}
"aggregate avg on columns"
type Problem_avg_fields {
  group_id: Float
  id: Float
}
"""
order by avg() on columns of table "Problem"
"""
input Problem_avg_order_by {
  group_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "Problem". All fields are combined with a logical 'AND'.
"""
input Problem_bool_exp {
  Architectures: Architecture_bool_exp
  Datasets: Dataset_bool_exp
  Fuzzy_Attributes: Fuzzy_Attribute_bool_exp
  Group: Group_bool_exp
  Inheritence_Attributes: Inheritence_Attribute_bool_exp
  Join__Instrument_Characteristics: Join__Instrument_Characteristic_bool_exp
  Join__Instrument_Measurements: Join__Instrument_Measurement_bool_exp
  Join__Problem_Instruments: Join__Problem_Instrument_bool_exp
  Join__Problem_Launch_Vehicles: Join__Problem_Launch_Vehicle_bool_exp
  Join__Problem_Orbits: Join__Problem_Orbit_bool_exp
  Launch_Vehicle_Mission_Analyses: Launch_Vehicle_Mission_Analysis_bool_exp
  Mission_Attributes: Mission_Attribute_bool_exp
  Power_Mission_Analyses: Power_Mission_Analysis_bool_exp
  Requirement_Rule_Attributes: Requirement_Rule_Attribute_bool_exp
  Requirement_Rule_Cases: Requirement_Rule_Case_bool_exp
  Stakeholder_Needs_Objectives: Stakeholder_Needs_Objective_bool_exp
  Stakeholder_Needs_Panels: Stakeholder_Needs_Panel_bool_exp
  Stakeholder_Needs_Subobjectives: Stakeholder_Needs_Subobjective_bool_exp
  Walker_Mission_Analyses: Walker_Mission_Analysis_bool_exp
  _and: [Problem_bool_exp!]
  _not: Problem_bool_exp
  _or: [Problem_bool_exp!]
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  reload_problem: Boolean_comparison_exp
}
"""
unique or primary key constraints on table "Problem"
"""
enum Problem_constraint {
  "unique or primary key constraint"
  Problem_pkey
}
"""
input type for incrementing numeric columns in table "Problem"
"""
input Problem_inc_input {
  group_id: Int
  id: Int
}
"""
input type for inserting data into table "Problem"
"""
input Problem_insert_input {
  Architectures: Architecture_arr_rel_insert_input
  Datasets: Dataset_arr_rel_insert_input
  Fuzzy_Attributes: Fuzzy_Attribute_arr_rel_insert_input
  Group: Group_obj_rel_insert_input
  Inheritence_Attributes: Inheritence_Attribute_arr_rel_insert_input
  Join__Instrument_Characteristics: Join__Instrument_Characteristic_arr_rel_insert_input
  Join__Instrument_Measurements: Join__Instrument_Measurement_arr_rel_insert_input
  Join__Problem_Instruments: Join__Problem_Instrument_arr_rel_insert_input
  Join__Problem_Launch_Vehicles: Join__Problem_Launch_Vehicle_arr_rel_insert_input
  Join__Problem_Orbits: Join__Problem_Orbit_arr_rel_insert_input
  Launch_Vehicle_Mission_Analyses: Launch_Vehicle_Mission_Analysis_arr_rel_insert_input
  Mission_Attributes: Mission_Attribute_arr_rel_insert_input
  Power_Mission_Analyses: Power_Mission_Analysis_arr_rel_insert_input
  Requirement_Rule_Attributes: Requirement_Rule_Attribute_arr_rel_insert_input
  Requirement_Rule_Cases: Requirement_Rule_Case_arr_rel_insert_input
  Stakeholder_Needs_Objectives: Stakeholder_Needs_Objective_arr_rel_insert_input
  Stakeholder_Needs_Panels: Stakeholder_Needs_Panel_arr_rel_insert_input
  Stakeholder_Needs_Subobjectives: Stakeholder_Needs_Subobjective_arr_rel_insert_input
  Walker_Mission_Analyses: Walker_Mission_Analysis_arr_rel_insert_input
  group_id: Int
  id: Int
  name: String
  reload_problem: Boolean
}
"aggregate max on columns"
type Problem_max_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by max() on columns of table "Problem"
"""
input Problem_max_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"aggregate min on columns"
type Problem_min_fields {
  group_id: Int
  id: Int
  name: String
}
"""
order by min() on columns of table "Problem"
"""
input Problem_min_order_by {
  group_id: order_by
  id: order_by
  name: order_by
}
"""
response of any mutation on the table "Problem"
"""
type Problem_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Problem!]!
}
"""
input type for inserting object relation for remote table "Problem"
"""
input Problem_obj_rel_insert_input {
  data: Problem_insert_input!
  "on conflict condition"
  on_conflict: Problem_on_conflict
}
"""
on conflict condition type for table "Problem"
"""
input Problem_on_conflict {
  constraint: Problem_constraint!
  update_columns: [Problem_update_column!]! = []
  where: Problem_bool_exp
}
"""
Ordering options when selecting data from "Problem".
"""
input Problem_order_by {
  Architectures_aggregate: Architecture_aggregate_order_by
  Datasets_aggregate: Dataset_aggregate_order_by
  Fuzzy_Attributes_aggregate: Fuzzy_Attribute_aggregate_order_by
  Group: Group_order_by
  Inheritence_Attributes_aggregate: Inheritence_Attribute_aggregate_order_by
  Join__Instrument_Characteristics_aggregate: Join__Instrument_Characteristic_aggregate_order_by
  Join__Instrument_Measurements_aggregate: Join__Instrument_Measurement_aggregate_order_by
  Join__Problem_Instruments_aggregate: Join__Problem_Instrument_aggregate_order_by
  Join__Problem_Launch_Vehicles_aggregate: Join__Problem_Launch_Vehicle_aggregate_order_by
  Join__Problem_Orbits_aggregate: Join__Problem_Orbit_aggregate_order_by
  Launch_Vehicle_Mission_Analyses_aggregate: Launch_Vehicle_Mission_Analysis_aggregate_order_by
  Mission_Attributes_aggregate: Mission_Attribute_aggregate_order_by
  Power_Mission_Analyses_aggregate: Power_Mission_Analysis_aggregate_order_by
  Requirement_Rule_Attributes_aggregate: Requirement_Rule_Attribute_aggregate_order_by
  Requirement_Rule_Cases_aggregate: Requirement_Rule_Case_aggregate_order_by
  Stakeholder_Needs_Objectives_aggregate: Stakeholder_Needs_Objective_aggregate_order_by
  Stakeholder_Needs_Panels_aggregate: Stakeholder_Needs_Panel_aggregate_order_by
  Stakeholder_Needs_Subobjectives_aggregate: Stakeholder_Needs_Subobjective_aggregate_order_by
  Walker_Mission_Analyses_aggregate: Walker_Mission_Analysis_aggregate_order_by
  group_id: order_by
  id: order_by
  name: order_by
  reload_problem: order_by
}
"primary key columns input for table: Problem"
input Problem_pk_columns_input {
  id: Int!
}
"""
select columns of table "Problem"
"""
enum Problem_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  reload_problem
}
"""
input type for updating data in table "Problem"
"""
input Problem_set_input {
  group_id: Int
  id: Int
  name: String
  reload_problem: Boolean
}
"aggregate stddev on columns"
type Problem_stddev_fields {
  group_id: Float
  id: Float
}
"""
order by stddev() on columns of table "Problem"
"""
input Problem_stddev_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type Problem_stddev_pop_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "Problem"
"""
input Problem_stddev_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type Problem_stddev_samp_fields {
  group_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "Problem"
"""
input Problem_stddev_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate sum on columns"
type Problem_sum_fields {
  group_id: Int
  id: Int
}
"""
order by sum() on columns of table "Problem"
"""
input Problem_sum_order_by {
  group_id: order_by
  id: order_by
}
"""
update columns of table "Problem"
"""
enum Problem_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  name
  "column name"
  reload_problem
}
"aggregate var_pop on columns"
type Problem_var_pop_fields {
  group_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "Problem"
"""
input Problem_var_pop_order_by {
  group_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type Problem_var_samp_fields {
  group_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "Problem"
"""
input Problem_var_samp_order_by {
  group_id: order_by
  id: order_by
}
"aggregate variance on columns"
type Problem_variance_fields {
  group_id: Float
  id: Float
}
"""
order by variance() on columns of table "Problem"
"""
input Problem_variance_order_by {
  group_id: order_by
  id: order_by
}
"""
columns and relationships of "Requirement_Rule_Attribute"
"""
type Requirement_Rule_Attribute {
  "An object relationship"
  Measurement: Measurement
  "An object relationship"
  Measurement_Attribute: Measurement_Attribute
  "An object relationship"
  Problem: Problem
  "An object relationship"
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective
  id: Int!
  justification: String
  measurement_attribute_id: Int
  measurement_id: Int
  problem_id: Int
  scores: _float8
  subobjective_id: Int
  thresholds: _varchar
  type: String
}
"""
aggregated selection of "Requirement_Rule_Attribute"
"""
type Requirement_Rule_Attribute_aggregate {
  aggregate: Requirement_Rule_Attribute_aggregate_fields
  nodes: [Requirement_Rule_Attribute!]!
}
"""
aggregate fields of "Requirement_Rule_Attribute"
"""
type Requirement_Rule_Attribute_aggregate_fields {
  avg: Requirement_Rule_Attribute_avg_fields
  count(columns: [Requirement_Rule_Attribute_select_column!], distinct: Boolean): Int!
  max: Requirement_Rule_Attribute_max_fields
  min: Requirement_Rule_Attribute_min_fields
  stddev: Requirement_Rule_Attribute_stddev_fields
  stddev_pop: Requirement_Rule_Attribute_stddev_pop_fields
  stddev_samp: Requirement_Rule_Attribute_stddev_samp_fields
  sum: Requirement_Rule_Attribute_sum_fields
  var_pop: Requirement_Rule_Attribute_var_pop_fields
  var_samp: Requirement_Rule_Attribute_var_samp_fields
  variance: Requirement_Rule_Attribute_variance_fields
}
"""
order by aggregate values of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_aggregate_order_by {
  avg: Requirement_Rule_Attribute_avg_order_by
  count: order_by
  max: Requirement_Rule_Attribute_max_order_by
  min: Requirement_Rule_Attribute_min_order_by
  stddev: Requirement_Rule_Attribute_stddev_order_by
  stddev_pop: Requirement_Rule_Attribute_stddev_pop_order_by
  stddev_samp: Requirement_Rule_Attribute_stddev_samp_order_by
  sum: Requirement_Rule_Attribute_sum_order_by
  var_pop: Requirement_Rule_Attribute_var_pop_order_by
  var_samp: Requirement_Rule_Attribute_var_samp_order_by
  variance: Requirement_Rule_Attribute_variance_order_by
}
"""
input type for inserting array relation for remote table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_arr_rel_insert_input {
  data: [Requirement_Rule_Attribute_insert_input!]!
  "on conflict condition"
  on_conflict: Requirement_Rule_Attribute_on_conflict
}
"aggregate avg on columns"
type Requirement_Rule_Attribute_avg_fields {
  id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by avg() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_avg_order_by {
  id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"""
Boolean expression to filter rows from the table "Requirement_Rule_Attribute". All fields are combined with a logical 'AND'.
"""
input Requirement_Rule_Attribute_bool_exp {
  Measurement: Measurement_bool_exp
  Measurement_Attribute: Measurement_Attribute_bool_exp
  Problem: Problem_bool_exp
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_bool_exp
  _and: [Requirement_Rule_Attribute_bool_exp!]
  _not: Requirement_Rule_Attribute_bool_exp
  _or: [Requirement_Rule_Attribute_bool_exp!]
  id: Int_comparison_exp
  justification: String_comparison_exp
  measurement_attribute_id: Int_comparison_exp
  measurement_id: Int_comparison_exp
  problem_id: Int_comparison_exp
  scores: _float8_comparison_exp
  subobjective_id: Int_comparison_exp
  thresholds: _varchar_comparison_exp
  type: String_comparison_exp
}
"""
unique or primary key constraints on table "Requirement_Rule_Attribute"
"""
enum Requirement_Rule_Attribute_constraint {
  "unique or primary key constraint"
  Requirement_Rule_Attribute_pkey
}
"""
input type for incrementing numeric columns in table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_inc_input {
  id: Int
  measurement_attribute_id: Int
  measurement_id: Int
  problem_id: Int
  subobjective_id: Int
}
"""
input type for inserting data into table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_insert_input {
  Measurement: Measurement_obj_rel_insert_input
  Measurement_Attribute: Measurement_Attribute_obj_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_obj_rel_insert_input
  id: Int
  justification: String
  measurement_attribute_id: Int
  measurement_id: Int
  problem_id: Int
  scores: _float8
  subobjective_id: Int
  thresholds: _varchar
  type: String
}
"aggregate max on columns"
type Requirement_Rule_Attribute_max_fields {
  id: Int
  justification: String
  measurement_attribute_id: Int
  measurement_id: Int
  problem_id: Int
  subobjective_id: Int
  type: String
}
"""
order by max() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_max_order_by {
  id: order_by
  justification: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
  type: order_by
}
"aggregate min on columns"
type Requirement_Rule_Attribute_min_fields {
  id: Int
  justification: String
  measurement_attribute_id: Int
  measurement_id: Int
  problem_id: Int
  subobjective_id: Int
  type: String
}
"""
order by min() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_min_order_by {
  id: order_by
  justification: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
  type: order_by
}
"""
response of any mutation on the table "Requirement_Rule_Attribute"
"""
type Requirement_Rule_Attribute_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Requirement_Rule_Attribute!]!
}
"""
on conflict condition type for table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_on_conflict {
  constraint: Requirement_Rule_Attribute_constraint!
  update_columns: [Requirement_Rule_Attribute_update_column!]! = []
  where: Requirement_Rule_Attribute_bool_exp
}
"""
Ordering options when selecting data from "Requirement_Rule_Attribute".
"""
input Requirement_Rule_Attribute_order_by {
  Measurement: Measurement_order_by
  Measurement_Attribute: Measurement_Attribute_order_by
  Problem: Problem_order_by
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_order_by
  id: order_by
  justification: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  scores: order_by
  subobjective_id: order_by
  thresholds: order_by
  type: order_by
}
"primary key columns input for table: Requirement_Rule_Attribute"
input Requirement_Rule_Attribute_pk_columns_input {
  id: Int!
}
"""
select columns of table "Requirement_Rule_Attribute"
"""
enum Requirement_Rule_Attribute_select_column {
  "column name"
  id
  "column name"
  justification
  "column name"
  measurement_attribute_id
  "column name"
  measurement_id
  "column name"
  problem_id
  "column name"
  scores
  "column name"
  subobjective_id
  "column name"
  thresholds
  "column name"
  type
}
"""
input type for updating data in table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_set_input {
  id: Int
  justification: String
  measurement_attribute_id: Int
  measurement_id: Int
  problem_id: Int
  scores: _float8
  subobjective_id: Int
  thresholds: _varchar
  type: String
}
"aggregate stddev on columns"
type Requirement_Rule_Attribute_stddev_fields {
  id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by stddev() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_stddev_order_by {
  id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate stddev_pop on columns"
type Requirement_Rule_Attribute_stddev_pop_fields {
  id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by stddev_pop() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_stddev_pop_order_by {
  id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate stddev_samp on columns"
type Requirement_Rule_Attribute_stddev_samp_fields {
  id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by stddev_samp() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_stddev_samp_order_by {
  id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate sum on columns"
type Requirement_Rule_Attribute_sum_fields {
  id: Int
  measurement_attribute_id: Int
  measurement_id: Int
  problem_id: Int
  subobjective_id: Int
}
"""
order by sum() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_sum_order_by {
  id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"""
update columns of table "Requirement_Rule_Attribute"
"""
enum Requirement_Rule_Attribute_update_column {
  "column name"
  id
  "column name"
  justification
  "column name"
  measurement_attribute_id
  "column name"
  measurement_id
  "column name"
  problem_id
  "column name"
  scores
  "column name"
  subobjective_id
  "column name"
  thresholds
  "column name"
  type
}
"aggregate var_pop on columns"
type Requirement_Rule_Attribute_var_pop_fields {
  id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by var_pop() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_var_pop_order_by {
  id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate var_samp on columns"
type Requirement_Rule_Attribute_var_samp_fields {
  id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by var_samp() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_var_samp_order_by {
  id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate variance on columns"
type Requirement_Rule_Attribute_variance_fields {
  id: Float
  measurement_attribute_id: Float
  measurement_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by variance() on columns of table "Requirement_Rule_Attribute"
"""
input Requirement_Rule_Attribute_variance_order_by {
  id: order_by
  measurement_attribute_id: order_by
  measurement_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"""
columns and relationships of "Requirement_Rule_Case"
"""
type Requirement_Rule_Case {
  "An array relationship"
  Join__Case_Attributes("distinct select on columns" distinct_on: [Join__Case_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Case_Attribute_order_by!], "filter the rows returned" where: Join__Case_Attribute_bool_exp): [Join__Case_Attribute!]!
  "An aggregate relationship"
  Join__Case_Attributes_aggregate("distinct select on columns" distinct_on: [Join__Case_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Case_Attribute_order_by!], "filter the rows returned" where: Join__Case_Attribute_bool_exp): Join__Case_Attribute_aggregate!
  "An array relationship"
  Join__Instrument_Capabilities("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): [Join__Instrument_Capability!]!
  "An aggregate relationship"
  Join__Instrument_Capabilities_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): Join__Instrument_Capability_aggregate!
  "An object relationship"
  Measurement: Measurement
  "An object relationship"
  Problem: Problem
  "An object relationship"
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective
  "An object relationship"
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective
  description: String
  id: Int!
  measurement_id: Int
  objective_id: Int
  problem_id: Int
  rule: String
  subobjective_id: Int
  text: String
  value: String
}
"""
aggregated selection of "Requirement_Rule_Case"
"""
type Requirement_Rule_Case_aggregate {
  aggregate: Requirement_Rule_Case_aggregate_fields
  nodes: [Requirement_Rule_Case!]!
}
"""
aggregate fields of "Requirement_Rule_Case"
"""
type Requirement_Rule_Case_aggregate_fields {
  avg: Requirement_Rule_Case_avg_fields
  count(columns: [Requirement_Rule_Case_select_column!], distinct: Boolean): Int!
  max: Requirement_Rule_Case_max_fields
  min: Requirement_Rule_Case_min_fields
  stddev: Requirement_Rule_Case_stddev_fields
  stddev_pop: Requirement_Rule_Case_stddev_pop_fields
  stddev_samp: Requirement_Rule_Case_stddev_samp_fields
  sum: Requirement_Rule_Case_sum_fields
  var_pop: Requirement_Rule_Case_var_pop_fields
  var_samp: Requirement_Rule_Case_var_samp_fields
  variance: Requirement_Rule_Case_variance_fields
}
"""
order by aggregate values of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_aggregate_order_by {
  avg: Requirement_Rule_Case_avg_order_by
  count: order_by
  max: Requirement_Rule_Case_max_order_by
  min: Requirement_Rule_Case_min_order_by
  stddev: Requirement_Rule_Case_stddev_order_by
  stddev_pop: Requirement_Rule_Case_stddev_pop_order_by
  stddev_samp: Requirement_Rule_Case_stddev_samp_order_by
  sum: Requirement_Rule_Case_sum_order_by
  var_pop: Requirement_Rule_Case_var_pop_order_by
  var_samp: Requirement_Rule_Case_var_samp_order_by
  variance: Requirement_Rule_Case_variance_order_by
}
"""
input type for inserting array relation for remote table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_arr_rel_insert_input {
  data: [Requirement_Rule_Case_insert_input!]!
  "on conflict condition"
  on_conflict: Requirement_Rule_Case_on_conflict
}
"aggregate avg on columns"
type Requirement_Rule_Case_avg_fields {
  id: Float
  measurement_id: Float
  objective_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by avg() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_avg_order_by {
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"""
Boolean expression to filter rows from the table "Requirement_Rule_Case". All fields are combined with a logical 'AND'.
"""
input Requirement_Rule_Case_bool_exp {
  Join__Case_Attributes: Join__Case_Attribute_bool_exp
  Join__Instrument_Capabilities: Join__Instrument_Capability_bool_exp
  Measurement: Measurement_bool_exp
  Problem: Problem_bool_exp
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective_bool_exp
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_bool_exp
  _and: [Requirement_Rule_Case_bool_exp!]
  _not: Requirement_Rule_Case_bool_exp
  _or: [Requirement_Rule_Case_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  measurement_id: Int_comparison_exp
  objective_id: Int_comparison_exp
  problem_id: Int_comparison_exp
  rule: String_comparison_exp
  subobjective_id: Int_comparison_exp
  text: String_comparison_exp
  value: String_comparison_exp
}
"""
unique or primary key constraints on table "Requirement_Rule_Case"
"""
enum Requirement_Rule_Case_constraint {
  "unique or primary key constraint"
  Requirement_Rule_Case_pkey
}
"""
input type for incrementing numeric columns in table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_inc_input {
  id: Int
  measurement_id: Int
  objective_id: Int
  problem_id: Int
  subobjective_id: Int
}
"""
input type for inserting data into table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_insert_input {
  Join__Case_Attributes: Join__Case_Attribute_arr_rel_insert_input
  Join__Instrument_Capabilities: Join__Instrument_Capability_arr_rel_insert_input
  Measurement: Measurement_obj_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective_obj_rel_insert_input
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_obj_rel_insert_input
  description: String
  id: Int
  measurement_id: Int
  objective_id: Int
  problem_id: Int
  rule: String
  subobjective_id: Int
  text: String
  value: String
}
"aggregate max on columns"
type Requirement_Rule_Case_max_fields {
  description: String
  id: Int
  measurement_id: Int
  objective_id: Int
  problem_id: Int
  rule: String
  subobjective_id: Int
  text: String
  value: String
}
"""
order by max() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_max_order_by {
  description: order_by
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  rule: order_by
  subobjective_id: order_by
  text: order_by
  value: order_by
}
"aggregate min on columns"
type Requirement_Rule_Case_min_fields {
  description: String
  id: Int
  measurement_id: Int
  objective_id: Int
  problem_id: Int
  rule: String
  subobjective_id: Int
  text: String
  value: String
}
"""
order by min() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_min_order_by {
  description: order_by
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  rule: order_by
  subobjective_id: order_by
  text: order_by
  value: order_by
}
"""
response of any mutation on the table "Requirement_Rule_Case"
"""
type Requirement_Rule_Case_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Requirement_Rule_Case!]!
}
"""
input type for inserting object relation for remote table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_obj_rel_insert_input {
  data: Requirement_Rule_Case_insert_input!
  "on conflict condition"
  on_conflict: Requirement_Rule_Case_on_conflict
}
"""
on conflict condition type for table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_on_conflict {
  constraint: Requirement_Rule_Case_constraint!
  update_columns: [Requirement_Rule_Case_update_column!]! = []
  where: Requirement_Rule_Case_bool_exp
}
"""
Ordering options when selecting data from "Requirement_Rule_Case".
"""
input Requirement_Rule_Case_order_by {
  Join__Case_Attributes_aggregate: Join__Case_Attribute_aggregate_order_by
  Join__Instrument_Capabilities_aggregate: Join__Instrument_Capability_aggregate_order_by
  Measurement: Measurement_order_by
  Problem: Problem_order_by
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective_order_by
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_order_by
  description: order_by
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  rule: order_by
  subobjective_id: order_by
  text: order_by
  value: order_by
}
"primary key columns input for table: Requirement_Rule_Case"
input Requirement_Rule_Case_pk_columns_input {
  id: Int!
}
"""
select columns of table "Requirement_Rule_Case"
"""
enum Requirement_Rule_Case_select_column {
  "column name"
  description
  "column name"
  id
  "column name"
  measurement_id
  "column name"
  objective_id
  "column name"
  problem_id
  "column name"
  rule
  "column name"
  subobjective_id
  "column name"
  text
  "column name"
  value
}
"""
input type for updating data in table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_set_input {
  description: String
  id: Int
  measurement_id: Int
  objective_id: Int
  problem_id: Int
  rule: String
  subobjective_id: Int
  text: String
  value: String
}
"aggregate stddev on columns"
type Requirement_Rule_Case_stddev_fields {
  id: Float
  measurement_id: Float
  objective_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by stddev() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_stddev_order_by {
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate stddev_pop on columns"
type Requirement_Rule_Case_stddev_pop_fields {
  id: Float
  measurement_id: Float
  objective_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by stddev_pop() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_stddev_pop_order_by {
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate stddev_samp on columns"
type Requirement_Rule_Case_stddev_samp_fields {
  id: Float
  measurement_id: Float
  objective_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by stddev_samp() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_stddev_samp_order_by {
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate sum on columns"
type Requirement_Rule_Case_sum_fields {
  id: Int
  measurement_id: Int
  objective_id: Int
  problem_id: Int
  subobjective_id: Int
}
"""
order by sum() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_sum_order_by {
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"""
update columns of table "Requirement_Rule_Case"
"""
enum Requirement_Rule_Case_update_column {
  "column name"
  description
  "column name"
  id
  "column name"
  measurement_id
  "column name"
  objective_id
  "column name"
  problem_id
  "column name"
  rule
  "column name"
  subobjective_id
  "column name"
  text
  "column name"
  value
}
"aggregate var_pop on columns"
type Requirement_Rule_Case_var_pop_fields {
  id: Float
  measurement_id: Float
  objective_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by var_pop() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_var_pop_order_by {
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate var_samp on columns"
type Requirement_Rule_Case_var_samp_fields {
  id: Float
  measurement_id: Float
  objective_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by var_samp() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_var_samp_order_by {
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"aggregate variance on columns"
type Requirement_Rule_Case_variance_fields {
  id: Float
  measurement_id: Float
  objective_id: Float
  problem_id: Float
  subobjective_id: Float
}
"""
order by variance() on columns of table "Requirement_Rule_Case"
"""
input Requirement_Rule_Case_variance_order_by {
  id: order_by
  measurement_id: order_by
  objective_id: order_by
  problem_id: order_by
  subobjective_id: order_by
}
"""
columns and relationships of "Stakeholder_Needs_Objective"
"""
type Stakeholder_Needs_Objective {
  "An array relationship"
  PanelScoreExplanations("distinct select on columns" distinct_on: [PanelScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [PanelScoreExplanation_order_by!], "filter the rows returned" where: PanelScoreExplanation_bool_exp): [PanelScoreExplanation!]!
  "An aggregate relationship"
  PanelScoreExplanations_aggregate("distinct select on columns" distinct_on: [PanelScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [PanelScoreExplanation_order_by!], "filter the rows returned" where: PanelScoreExplanation_bool_exp): PanelScoreExplanation_aggregate!
  "An object relationship"
  Problem: Problem
  "An array relationship"
  Requirement_Rule_Cases("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): [Requirement_Rule_Case!]!
  "An aggregate relationship"
  Requirement_Rule_Cases_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): Requirement_Rule_Case_aggregate!
  "An object relationship"
  Stakeholder_Needs_Panel: Stakeholder_Needs_Panel
  "An array relationship"
  Stakeholder_Needs_Subobjectives("distinct select on columns" distinct_on: [Stakeholder_Needs_Subobjective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Subobjective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Subobjective_bool_exp): [Stakeholder_Needs_Subobjective!]!
  "An aggregate relationship"
  Stakeholder_Needs_Subobjectives_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Subobjective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Subobjective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Subobjective_bool_exp): Stakeholder_Needs_Subobjective_aggregate!
  description: String
  id: Int!
  name: String
  panel_id: Int
  problem_id: Int
  weight: float8
}
"""
aggregated selection of "Stakeholder_Needs_Objective"
"""
type Stakeholder_Needs_Objective_aggregate {
  aggregate: Stakeholder_Needs_Objective_aggregate_fields
  nodes: [Stakeholder_Needs_Objective!]!
}
"""
aggregate fields of "Stakeholder_Needs_Objective"
"""
type Stakeholder_Needs_Objective_aggregate_fields {
  avg: Stakeholder_Needs_Objective_avg_fields
  count(columns: [Stakeholder_Needs_Objective_select_column!], distinct: Boolean): Int!
  max: Stakeholder_Needs_Objective_max_fields
  min: Stakeholder_Needs_Objective_min_fields
  stddev: Stakeholder_Needs_Objective_stddev_fields
  stddev_pop: Stakeholder_Needs_Objective_stddev_pop_fields
  stddev_samp: Stakeholder_Needs_Objective_stddev_samp_fields
  sum: Stakeholder_Needs_Objective_sum_fields
  var_pop: Stakeholder_Needs_Objective_var_pop_fields
  var_samp: Stakeholder_Needs_Objective_var_samp_fields
  variance: Stakeholder_Needs_Objective_variance_fields
}
"""
order by aggregate values of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_aggregate_order_by {
  avg: Stakeholder_Needs_Objective_avg_order_by
  count: order_by
  max: Stakeholder_Needs_Objective_max_order_by
  min: Stakeholder_Needs_Objective_min_order_by
  stddev: Stakeholder_Needs_Objective_stddev_order_by
  stddev_pop: Stakeholder_Needs_Objective_stddev_pop_order_by
  stddev_samp: Stakeholder_Needs_Objective_stddev_samp_order_by
  sum: Stakeholder_Needs_Objective_sum_order_by
  var_pop: Stakeholder_Needs_Objective_var_pop_order_by
  var_samp: Stakeholder_Needs_Objective_var_samp_order_by
  variance: Stakeholder_Needs_Objective_variance_order_by
}
"""
input type for inserting array relation for remote table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_arr_rel_insert_input {
  data: [Stakeholder_Needs_Objective_insert_input!]!
  "on conflict condition"
  on_conflict: Stakeholder_Needs_Objective_on_conflict
}
"aggregate avg on columns"
type Stakeholder_Needs_Objective_avg_fields {
  id: Float
  panel_id: Float
  problem_id: Float
  weight: Float
}
"""
order by avg() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_avg_order_by {
  id: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"""
Boolean expression to filter rows from the table "Stakeholder_Needs_Objective". All fields are combined with a logical 'AND'.
"""
input Stakeholder_Needs_Objective_bool_exp {
  PanelScoreExplanations: PanelScoreExplanation_bool_exp
  Problem: Problem_bool_exp
  Requirement_Rule_Cases: Requirement_Rule_Case_bool_exp
  Stakeholder_Needs_Panel: Stakeholder_Needs_Panel_bool_exp
  Stakeholder_Needs_Subobjectives: Stakeholder_Needs_Subobjective_bool_exp
  _and: [Stakeholder_Needs_Objective_bool_exp!]
  _not: Stakeholder_Needs_Objective_bool_exp
  _or: [Stakeholder_Needs_Objective_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  panel_id: Int_comparison_exp
  problem_id: Int_comparison_exp
  weight: float8_comparison_exp
}
"""
unique or primary key constraints on table "Stakeholder_Needs_Objective"
"""
enum Stakeholder_Needs_Objective_constraint {
  "unique or primary key constraint"
  Stakeholder_Needs_Objective_pkey
}
"""
input type for incrementing numeric columns in table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_inc_input {
  id: Int
  panel_id: Int
  problem_id: Int
  weight: float8
}
"""
input type for inserting data into table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_insert_input {
  PanelScoreExplanations: PanelScoreExplanation_arr_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  Requirement_Rule_Cases: Requirement_Rule_Case_arr_rel_insert_input
  Stakeholder_Needs_Panel: Stakeholder_Needs_Panel_obj_rel_insert_input
  Stakeholder_Needs_Subobjectives: Stakeholder_Needs_Subobjective_arr_rel_insert_input
  description: String
  id: Int
  name: String
  panel_id: Int
  problem_id: Int
  weight: float8
}
"aggregate max on columns"
type Stakeholder_Needs_Objective_max_fields {
  description: String
  id: Int
  name: String
  panel_id: Int
  problem_id: Int
  weight: float8
}
"""
order by max() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_max_order_by {
  description: order_by
  id: order_by
  name: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate min on columns"
type Stakeholder_Needs_Objective_min_fields {
  description: String
  id: Int
  name: String
  panel_id: Int
  problem_id: Int
  weight: float8
}
"""
order by min() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_min_order_by {
  description: order_by
  id: order_by
  name: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"""
response of any mutation on the table "Stakeholder_Needs_Objective"
"""
type Stakeholder_Needs_Objective_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Stakeholder_Needs_Objective!]!
}
"""
input type for inserting object relation for remote table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_obj_rel_insert_input {
  data: Stakeholder_Needs_Objective_insert_input!
  "on conflict condition"
  on_conflict: Stakeholder_Needs_Objective_on_conflict
}
"""
on conflict condition type for table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_on_conflict {
  constraint: Stakeholder_Needs_Objective_constraint!
  update_columns: [Stakeholder_Needs_Objective_update_column!]! = []
  where: Stakeholder_Needs_Objective_bool_exp
}
"""
Ordering options when selecting data from "Stakeholder_Needs_Objective".
"""
input Stakeholder_Needs_Objective_order_by {
  PanelScoreExplanations_aggregate: PanelScoreExplanation_aggregate_order_by
  Problem: Problem_order_by
  Requirement_Rule_Cases_aggregate: Requirement_Rule_Case_aggregate_order_by
  Stakeholder_Needs_Panel: Stakeholder_Needs_Panel_order_by
  Stakeholder_Needs_Subobjectives_aggregate: Stakeholder_Needs_Subobjective_aggregate_order_by
  description: order_by
  id: order_by
  name: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"primary key columns input for table: Stakeholder_Needs_Objective"
input Stakeholder_Needs_Objective_pk_columns_input {
  id: Int!
}
"""
select columns of table "Stakeholder_Needs_Objective"
"""
enum Stakeholder_Needs_Objective_select_column {
  "column name"
  description
  "column name"
  id
  "column name"
  name
  "column name"
  panel_id
  "column name"
  problem_id
  "column name"
  weight
}
"""
input type for updating data in table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_set_input {
  description: String
  id: Int
  name: String
  panel_id: Int
  problem_id: Int
  weight: float8
}
"aggregate stddev on columns"
type Stakeholder_Needs_Objective_stddev_fields {
  id: Float
  panel_id: Float
  problem_id: Float
  weight: Float
}
"""
order by stddev() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_stddev_order_by {
  id: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate stddev_pop on columns"
type Stakeholder_Needs_Objective_stddev_pop_fields {
  id: Float
  panel_id: Float
  problem_id: Float
  weight: Float
}
"""
order by stddev_pop() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_stddev_pop_order_by {
  id: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate stddev_samp on columns"
type Stakeholder_Needs_Objective_stddev_samp_fields {
  id: Float
  panel_id: Float
  problem_id: Float
  weight: Float
}
"""
order by stddev_samp() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_stddev_samp_order_by {
  id: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate sum on columns"
type Stakeholder_Needs_Objective_sum_fields {
  id: Int
  panel_id: Int
  problem_id: Int
  weight: float8
}
"""
order by sum() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_sum_order_by {
  id: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"""
update columns of table "Stakeholder_Needs_Objective"
"""
enum Stakeholder_Needs_Objective_update_column {
  "column name"
  description
  "column name"
  id
  "column name"
  name
  "column name"
  panel_id
  "column name"
  problem_id
  "column name"
  weight
}
"aggregate var_pop on columns"
type Stakeholder_Needs_Objective_var_pop_fields {
  id: Float
  panel_id: Float
  problem_id: Float
  weight: Float
}
"""
order by var_pop() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_var_pop_order_by {
  id: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate var_samp on columns"
type Stakeholder_Needs_Objective_var_samp_fields {
  id: Float
  panel_id: Float
  problem_id: Float
  weight: Float
}
"""
order by var_samp() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_var_samp_order_by {
  id: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate variance on columns"
type Stakeholder_Needs_Objective_variance_fields {
  id: Float
  panel_id: Float
  problem_id: Float
  weight: Float
}
"""
order by variance() on columns of table "Stakeholder_Needs_Objective"
"""
input Stakeholder_Needs_Objective_variance_order_by {
  id: order_by
  panel_id: order_by
  problem_id: order_by
  weight: order_by
}
"""
columns and relationships of "Stakeholder_Needs_Panel"
"""
type Stakeholder_Needs_Panel {
  "An array relationship"
  ArchitectureScoreExplanations("distinct select on columns" distinct_on: [ArchitectureScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureScoreExplanation_order_by!], "filter the rows returned" where: ArchitectureScoreExplanation_bool_exp): [ArchitectureScoreExplanation!]!
  "An aggregate relationship"
  ArchitectureScoreExplanations_aggregate("distinct select on columns" distinct_on: [ArchitectureScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureScoreExplanation_order_by!], "filter the rows returned" where: ArchitectureScoreExplanation_bool_exp): ArchitectureScoreExplanation_aggregate!
  "An object relationship"
  Problem: Problem
  "An array relationship"
  Stakeholder_Needs_Objectives("distinct select on columns" distinct_on: [Stakeholder_Needs_Objective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Objective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Objective_bool_exp): [Stakeholder_Needs_Objective!]!
  "An aggregate relationship"
  Stakeholder_Needs_Objectives_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Objective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Objective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Objective_bool_exp): Stakeholder_Needs_Objective_aggregate!
  description: String
  id: Int!
  index_id: String
  name: String
  problem_id: Int
  weight: float8
}
"""
aggregated selection of "Stakeholder_Needs_Panel"
"""
type Stakeholder_Needs_Panel_aggregate {
  aggregate: Stakeholder_Needs_Panel_aggregate_fields
  nodes: [Stakeholder_Needs_Panel!]!
}
"""
aggregate fields of "Stakeholder_Needs_Panel"
"""
type Stakeholder_Needs_Panel_aggregate_fields {
  avg: Stakeholder_Needs_Panel_avg_fields
  count(columns: [Stakeholder_Needs_Panel_select_column!], distinct: Boolean): Int!
  max: Stakeholder_Needs_Panel_max_fields
  min: Stakeholder_Needs_Panel_min_fields
  stddev: Stakeholder_Needs_Panel_stddev_fields
  stddev_pop: Stakeholder_Needs_Panel_stddev_pop_fields
  stddev_samp: Stakeholder_Needs_Panel_stddev_samp_fields
  sum: Stakeholder_Needs_Panel_sum_fields
  var_pop: Stakeholder_Needs_Panel_var_pop_fields
  var_samp: Stakeholder_Needs_Panel_var_samp_fields
  variance: Stakeholder_Needs_Panel_variance_fields
}
"""
order by aggregate values of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_aggregate_order_by {
  avg: Stakeholder_Needs_Panel_avg_order_by
  count: order_by
  max: Stakeholder_Needs_Panel_max_order_by
  min: Stakeholder_Needs_Panel_min_order_by
  stddev: Stakeholder_Needs_Panel_stddev_order_by
  stddev_pop: Stakeholder_Needs_Panel_stddev_pop_order_by
  stddev_samp: Stakeholder_Needs_Panel_stddev_samp_order_by
  sum: Stakeholder_Needs_Panel_sum_order_by
  var_pop: Stakeholder_Needs_Panel_var_pop_order_by
  var_samp: Stakeholder_Needs_Panel_var_samp_order_by
  variance: Stakeholder_Needs_Panel_variance_order_by
}
"""
input type for inserting array relation for remote table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_arr_rel_insert_input {
  data: [Stakeholder_Needs_Panel_insert_input!]!
  "on conflict condition"
  on_conflict: Stakeholder_Needs_Panel_on_conflict
}
"aggregate avg on columns"
type Stakeholder_Needs_Panel_avg_fields {
  id: Float
  problem_id: Float
  weight: Float
}
"""
order by avg() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_avg_order_by {
  id: order_by
  problem_id: order_by
  weight: order_by
}
"""
Boolean expression to filter rows from the table "Stakeholder_Needs_Panel". All fields are combined with a logical 'AND'.
"""
input Stakeholder_Needs_Panel_bool_exp {
  ArchitectureScoreExplanations: ArchitectureScoreExplanation_bool_exp
  Problem: Problem_bool_exp
  Stakeholder_Needs_Objectives: Stakeholder_Needs_Objective_bool_exp
  _and: [Stakeholder_Needs_Panel_bool_exp!]
  _not: Stakeholder_Needs_Panel_bool_exp
  _or: [Stakeholder_Needs_Panel_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  index_id: String_comparison_exp
  name: String_comparison_exp
  problem_id: Int_comparison_exp
  weight: float8_comparison_exp
}
"""
unique or primary key constraints on table "Stakeholder_Needs_Panel"
"""
enum Stakeholder_Needs_Panel_constraint {
  "unique or primary key constraint"
  Stakeholder_Needs_Panel_pkey
}
"""
input type for incrementing numeric columns in table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_inc_input {
  id: Int
  problem_id: Int
  weight: float8
}
"""
input type for inserting data into table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_insert_input {
  ArchitectureScoreExplanations: ArchitectureScoreExplanation_arr_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  Stakeholder_Needs_Objectives: Stakeholder_Needs_Objective_arr_rel_insert_input
  description: String
  id: Int
  index_id: String
  name: String
  problem_id: Int
  weight: float8
}
"aggregate max on columns"
type Stakeholder_Needs_Panel_max_fields {
  description: String
  id: Int
  index_id: String
  name: String
  problem_id: Int
  weight: float8
}
"""
order by max() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_max_order_by {
  description: order_by
  id: order_by
  index_id: order_by
  name: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate min on columns"
type Stakeholder_Needs_Panel_min_fields {
  description: String
  id: Int
  index_id: String
  name: String
  problem_id: Int
  weight: float8
}
"""
order by min() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_min_order_by {
  description: order_by
  id: order_by
  index_id: order_by
  name: order_by
  problem_id: order_by
  weight: order_by
}
"""
response of any mutation on the table "Stakeholder_Needs_Panel"
"""
type Stakeholder_Needs_Panel_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Stakeholder_Needs_Panel!]!
}
"""
input type for inserting object relation for remote table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_obj_rel_insert_input {
  data: Stakeholder_Needs_Panel_insert_input!
  "on conflict condition"
  on_conflict: Stakeholder_Needs_Panel_on_conflict
}
"""
on conflict condition type for table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_on_conflict {
  constraint: Stakeholder_Needs_Panel_constraint!
  update_columns: [Stakeholder_Needs_Panel_update_column!]! = []
  where: Stakeholder_Needs_Panel_bool_exp
}
"""
Ordering options when selecting data from "Stakeholder_Needs_Panel".
"""
input Stakeholder_Needs_Panel_order_by {
  ArchitectureScoreExplanations_aggregate: ArchitectureScoreExplanation_aggregate_order_by
  Problem: Problem_order_by
  Stakeholder_Needs_Objectives_aggregate: Stakeholder_Needs_Objective_aggregate_order_by
  description: order_by
  id: order_by
  index_id: order_by
  name: order_by
  problem_id: order_by
  weight: order_by
}
"primary key columns input for table: Stakeholder_Needs_Panel"
input Stakeholder_Needs_Panel_pk_columns_input {
  id: Int!
}
"""
select columns of table "Stakeholder_Needs_Panel"
"""
enum Stakeholder_Needs_Panel_select_column {
  "column name"
  description
  "column name"
  id
  "column name"
  index_id
  "column name"
  name
  "column name"
  problem_id
  "column name"
  weight
}
"""
input type for updating data in table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_set_input {
  description: String
  id: Int
  index_id: String
  name: String
  problem_id: Int
  weight: float8
}
"aggregate stddev on columns"
type Stakeholder_Needs_Panel_stddev_fields {
  id: Float
  problem_id: Float
  weight: Float
}
"""
order by stddev() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_stddev_order_by {
  id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate stddev_pop on columns"
type Stakeholder_Needs_Panel_stddev_pop_fields {
  id: Float
  problem_id: Float
  weight: Float
}
"""
order by stddev_pop() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_stddev_pop_order_by {
  id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate stddev_samp on columns"
type Stakeholder_Needs_Panel_stddev_samp_fields {
  id: Float
  problem_id: Float
  weight: Float
}
"""
order by stddev_samp() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_stddev_samp_order_by {
  id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate sum on columns"
type Stakeholder_Needs_Panel_sum_fields {
  id: Int
  problem_id: Int
  weight: float8
}
"""
order by sum() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_sum_order_by {
  id: order_by
  problem_id: order_by
  weight: order_by
}
"""
update columns of table "Stakeholder_Needs_Panel"
"""
enum Stakeholder_Needs_Panel_update_column {
  "column name"
  description
  "column name"
  id
  "column name"
  index_id
  "column name"
  name
  "column name"
  problem_id
  "column name"
  weight
}
"aggregate var_pop on columns"
type Stakeholder_Needs_Panel_var_pop_fields {
  id: Float
  problem_id: Float
  weight: Float
}
"""
order by var_pop() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_var_pop_order_by {
  id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate var_samp on columns"
type Stakeholder_Needs_Panel_var_samp_fields {
  id: Float
  problem_id: Float
  weight: Float
}
"""
order by var_samp() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_var_samp_order_by {
  id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate variance on columns"
type Stakeholder_Needs_Panel_variance_fields {
  id: Float
  problem_id: Float
  weight: Float
}
"""
order by variance() on columns of table "Stakeholder_Needs_Panel"
"""
input Stakeholder_Needs_Panel_variance_order_by {
  id: order_by
  problem_id: order_by
  weight: order_by
}
"""
columns and relationships of "Stakeholder_Needs_Subobjective"
"""
type Stakeholder_Needs_Subobjective {
  "An array relationship"
  ObjectiveScoreExplanations("distinct select on columns" distinct_on: [ObjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ObjectiveScoreExplanation_order_by!], "filter the rows returned" where: ObjectiveScoreExplanation_bool_exp): [ObjectiveScoreExplanation!]!
  "An aggregate relationship"
  ObjectiveScoreExplanations_aggregate("distinct select on columns" distinct_on: [ObjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ObjectiveScoreExplanation_order_by!], "filter the rows returned" where: ObjectiveScoreExplanation_bool_exp): ObjectiveScoreExplanation_aggregate!
  "An object relationship"
  Problem: Problem
  "An array relationship"
  Requirement_Rule_Attributes("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): [Requirement_Rule_Attribute!]!
  "An aggregate relationship"
  Requirement_Rule_Attributes_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): Requirement_Rule_Attribute_aggregate!
  "An array relationship"
  Requirement_Rule_Cases("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): [Requirement_Rule_Case!]!
  "An aggregate relationship"
  Requirement_Rule_Cases_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): Requirement_Rule_Case_aggregate!
  "An object relationship"
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective
  "An array relationship"
  SubobjectiveScoreExplanations("distinct select on columns" distinct_on: [SubobjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [SubobjectiveScoreExplanation_order_by!], "filter the rows returned" where: SubobjectiveScoreExplanation_bool_exp): [SubobjectiveScoreExplanation!]!
  "An aggregate relationship"
  SubobjectiveScoreExplanations_aggregate("distinct select on columns" distinct_on: [SubobjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [SubobjectiveScoreExplanation_order_by!], "filter the rows returned" where: SubobjectiveScoreExplanation_bool_exp): SubobjectiveScoreExplanation_aggregate!
  description: String
  id: Int!
  name: String
  objective_id: Int
  problem_id: Int
  weight: float8
}
"""
aggregated selection of "Stakeholder_Needs_Subobjective"
"""
type Stakeholder_Needs_Subobjective_aggregate {
  aggregate: Stakeholder_Needs_Subobjective_aggregate_fields
  nodes: [Stakeholder_Needs_Subobjective!]!
}
"""
aggregate fields of "Stakeholder_Needs_Subobjective"
"""
type Stakeholder_Needs_Subobjective_aggregate_fields {
  avg: Stakeholder_Needs_Subobjective_avg_fields
  count(columns: [Stakeholder_Needs_Subobjective_select_column!], distinct: Boolean): Int!
  max: Stakeholder_Needs_Subobjective_max_fields
  min: Stakeholder_Needs_Subobjective_min_fields
  stddev: Stakeholder_Needs_Subobjective_stddev_fields
  stddev_pop: Stakeholder_Needs_Subobjective_stddev_pop_fields
  stddev_samp: Stakeholder_Needs_Subobjective_stddev_samp_fields
  sum: Stakeholder_Needs_Subobjective_sum_fields
  var_pop: Stakeholder_Needs_Subobjective_var_pop_fields
  var_samp: Stakeholder_Needs_Subobjective_var_samp_fields
  variance: Stakeholder_Needs_Subobjective_variance_fields
}
"""
order by aggregate values of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_aggregate_order_by {
  avg: Stakeholder_Needs_Subobjective_avg_order_by
  count: order_by
  max: Stakeholder_Needs_Subobjective_max_order_by
  min: Stakeholder_Needs_Subobjective_min_order_by
  stddev: Stakeholder_Needs_Subobjective_stddev_order_by
  stddev_pop: Stakeholder_Needs_Subobjective_stddev_pop_order_by
  stddev_samp: Stakeholder_Needs_Subobjective_stddev_samp_order_by
  sum: Stakeholder_Needs_Subobjective_sum_order_by
  var_pop: Stakeholder_Needs_Subobjective_var_pop_order_by
  var_samp: Stakeholder_Needs_Subobjective_var_samp_order_by
  variance: Stakeholder_Needs_Subobjective_variance_order_by
}
"""
input type for inserting array relation for remote table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_arr_rel_insert_input {
  data: [Stakeholder_Needs_Subobjective_insert_input!]!
  "on conflict condition"
  on_conflict: Stakeholder_Needs_Subobjective_on_conflict
}
"aggregate avg on columns"
type Stakeholder_Needs_Subobjective_avg_fields {
  id: Float
  objective_id: Float
  problem_id: Float
  weight: Float
}
"""
order by avg() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_avg_order_by {
  id: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"""
Boolean expression to filter rows from the table "Stakeholder_Needs_Subobjective". All fields are combined with a logical 'AND'.
"""
input Stakeholder_Needs_Subobjective_bool_exp {
  ObjectiveScoreExplanations: ObjectiveScoreExplanation_bool_exp
  Problem: Problem_bool_exp
  Requirement_Rule_Attributes: Requirement_Rule_Attribute_bool_exp
  Requirement_Rule_Cases: Requirement_Rule_Case_bool_exp
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective_bool_exp
  SubobjectiveScoreExplanations: SubobjectiveScoreExplanation_bool_exp
  _and: [Stakeholder_Needs_Subobjective_bool_exp!]
  _not: Stakeholder_Needs_Subobjective_bool_exp
  _or: [Stakeholder_Needs_Subobjective_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  objective_id: Int_comparison_exp
  problem_id: Int_comparison_exp
  weight: float8_comparison_exp
}
"""
unique or primary key constraints on table "Stakeholder_Needs_Subobjective"
"""
enum Stakeholder_Needs_Subobjective_constraint {
  "unique or primary key constraint"
  Stakeholder_Needs_Subobjective_pkey
}
"""
input type for incrementing numeric columns in table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_inc_input {
  id: Int
  objective_id: Int
  problem_id: Int
  weight: float8
}
"""
input type for inserting data into table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_insert_input {
  ObjectiveScoreExplanations: ObjectiveScoreExplanation_arr_rel_insert_input
  Problem: Problem_obj_rel_insert_input
  Requirement_Rule_Attributes: Requirement_Rule_Attribute_arr_rel_insert_input
  Requirement_Rule_Cases: Requirement_Rule_Case_arr_rel_insert_input
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective_obj_rel_insert_input
  SubobjectiveScoreExplanations: SubobjectiveScoreExplanation_arr_rel_insert_input
  description: String
  id: Int
  name: String
  objective_id: Int
  problem_id: Int
  weight: float8
}
"aggregate max on columns"
type Stakeholder_Needs_Subobjective_max_fields {
  description: String
  id: Int
  name: String
  objective_id: Int
  problem_id: Int
  weight: float8
}
"""
order by max() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_max_order_by {
  description: order_by
  id: order_by
  name: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate min on columns"
type Stakeholder_Needs_Subobjective_min_fields {
  description: String
  id: Int
  name: String
  objective_id: Int
  problem_id: Int
  weight: float8
}
"""
order by min() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_min_order_by {
  description: order_by
  id: order_by
  name: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"""
response of any mutation on the table "Stakeholder_Needs_Subobjective"
"""
type Stakeholder_Needs_Subobjective_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Stakeholder_Needs_Subobjective!]!
}
"""
input type for inserting object relation for remote table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_obj_rel_insert_input {
  data: Stakeholder_Needs_Subobjective_insert_input!
  "on conflict condition"
  on_conflict: Stakeholder_Needs_Subobjective_on_conflict
}
"""
on conflict condition type for table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_on_conflict {
  constraint: Stakeholder_Needs_Subobjective_constraint!
  update_columns: [Stakeholder_Needs_Subobjective_update_column!]! = []
  where: Stakeholder_Needs_Subobjective_bool_exp
}
"""
Ordering options when selecting data from "Stakeholder_Needs_Subobjective".
"""
input Stakeholder_Needs_Subobjective_order_by {
  ObjectiveScoreExplanations_aggregate: ObjectiveScoreExplanation_aggregate_order_by
  Problem: Problem_order_by
  Requirement_Rule_Attributes_aggregate: Requirement_Rule_Attribute_aggregate_order_by
  Requirement_Rule_Cases_aggregate: Requirement_Rule_Case_aggregate_order_by
  Stakeholder_Needs_Objective: Stakeholder_Needs_Objective_order_by
  SubobjectiveScoreExplanations_aggregate: SubobjectiveScoreExplanation_aggregate_order_by
  description: order_by
  id: order_by
  name: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"primary key columns input for table: Stakeholder_Needs_Subobjective"
input Stakeholder_Needs_Subobjective_pk_columns_input {
  id: Int!
}
"""
select columns of table "Stakeholder_Needs_Subobjective"
"""
enum Stakeholder_Needs_Subobjective_select_column {
  "column name"
  description
  "column name"
  id
  "column name"
  name
  "column name"
  objective_id
  "column name"
  problem_id
  "column name"
  weight
}
"""
input type for updating data in table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_set_input {
  description: String
  id: Int
  name: String
  objective_id: Int
  problem_id: Int
  weight: float8
}
"aggregate stddev on columns"
type Stakeholder_Needs_Subobjective_stddev_fields {
  id: Float
  objective_id: Float
  problem_id: Float
  weight: Float
}
"""
order by stddev() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_stddev_order_by {
  id: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate stddev_pop on columns"
type Stakeholder_Needs_Subobjective_stddev_pop_fields {
  id: Float
  objective_id: Float
  problem_id: Float
  weight: Float
}
"""
order by stddev_pop() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_stddev_pop_order_by {
  id: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate stddev_samp on columns"
type Stakeholder_Needs_Subobjective_stddev_samp_fields {
  id: Float
  objective_id: Float
  problem_id: Float
  weight: Float
}
"""
order by stddev_samp() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_stddev_samp_order_by {
  id: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate sum on columns"
type Stakeholder_Needs_Subobjective_sum_fields {
  id: Int
  objective_id: Int
  problem_id: Int
  weight: float8
}
"""
order by sum() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_sum_order_by {
  id: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"""
update columns of table "Stakeholder_Needs_Subobjective"
"""
enum Stakeholder_Needs_Subobjective_update_column {
  "column name"
  description
  "column name"
  id
  "column name"
  name
  "column name"
  objective_id
  "column name"
  problem_id
  "column name"
  weight
}
"aggregate var_pop on columns"
type Stakeholder_Needs_Subobjective_var_pop_fields {
  id: Float
  objective_id: Float
  problem_id: Float
  weight: Float
}
"""
order by var_pop() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_var_pop_order_by {
  id: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate var_samp on columns"
type Stakeholder_Needs_Subobjective_var_samp_fields {
  id: Float
  objective_id: Float
  problem_id: Float
  weight: Float
}
"""
order by var_samp() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_var_samp_order_by {
  id: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"aggregate variance on columns"
type Stakeholder_Needs_Subobjective_variance_fields {
  id: Float
  objective_id: Float
  problem_id: Float
  weight: Float
}
"""
order by variance() on columns of table "Stakeholder_Needs_Subobjective"
"""
input Stakeholder_Needs_Subobjective_variance_order_by {
  id: order_by
  objective_id: order_by
  problem_id: order_by
  weight: order_by
}
"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _is_null: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}
"""
columns and relationships of "SubobjectiveScoreExplanation"
"""
type SubobjectiveScoreExplanation {
  "An object relationship"
  Architecture: Architecture
  "An object relationship"
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective
  architecture_id: Int
  id: Int!
  justifications("JSON select path" path: String): jsonb
  measurement_attribute_values("JSON select path" path: String): jsonb
  score: float8
  subobjective_id: Int
  taken_by: String
}
"""
aggregated selection of "SubobjectiveScoreExplanation"
"""
type SubobjectiveScoreExplanation_aggregate {
  aggregate: SubobjectiveScoreExplanation_aggregate_fields
  nodes: [SubobjectiveScoreExplanation!]!
}
"""
aggregate fields of "SubobjectiveScoreExplanation"
"""
type SubobjectiveScoreExplanation_aggregate_fields {
  avg: SubobjectiveScoreExplanation_avg_fields
  count(columns: [SubobjectiveScoreExplanation_select_column!], distinct: Boolean): Int!
  max: SubobjectiveScoreExplanation_max_fields
  min: SubobjectiveScoreExplanation_min_fields
  stddev: SubobjectiveScoreExplanation_stddev_fields
  stddev_pop: SubobjectiveScoreExplanation_stddev_pop_fields
  stddev_samp: SubobjectiveScoreExplanation_stddev_samp_fields
  sum: SubobjectiveScoreExplanation_sum_fields
  var_pop: SubobjectiveScoreExplanation_var_pop_fields
  var_samp: SubobjectiveScoreExplanation_var_samp_fields
  variance: SubobjectiveScoreExplanation_variance_fields
}
"""
order by aggregate values of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_aggregate_order_by {
  avg: SubobjectiveScoreExplanation_avg_order_by
  count: order_by
  max: SubobjectiveScoreExplanation_max_order_by
  min: SubobjectiveScoreExplanation_min_order_by
  stddev: SubobjectiveScoreExplanation_stddev_order_by
  stddev_pop: SubobjectiveScoreExplanation_stddev_pop_order_by
  stddev_samp: SubobjectiveScoreExplanation_stddev_samp_order_by
  sum: SubobjectiveScoreExplanation_sum_order_by
  var_pop: SubobjectiveScoreExplanation_var_pop_order_by
  var_samp: SubobjectiveScoreExplanation_var_samp_order_by
  variance: SubobjectiveScoreExplanation_variance_order_by
}
"append existing jsonb value of filtered columns with new jsonb value"
input SubobjectiveScoreExplanation_append_input {
  justifications: jsonb
  measurement_attribute_values: jsonb
}
"""
input type for inserting array relation for remote table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_arr_rel_insert_input {
  data: [SubobjectiveScoreExplanation_insert_input!]!
  "on conflict condition"
  on_conflict: SubobjectiveScoreExplanation_on_conflict
}
"aggregate avg on columns"
type SubobjectiveScoreExplanation_avg_fields {
  architecture_id: Float
  id: Float
  score: Float
  subobjective_id: Float
}
"""
order by avg() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_avg_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
}
"""
Boolean expression to filter rows from the table "SubobjectiveScoreExplanation". All fields are combined with a logical 'AND'.
"""
input SubobjectiveScoreExplanation_bool_exp {
  Architecture: Architecture_bool_exp
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_bool_exp
  _and: [SubobjectiveScoreExplanation_bool_exp!]
  _not: SubobjectiveScoreExplanation_bool_exp
  _or: [SubobjectiveScoreExplanation_bool_exp!]
  architecture_id: Int_comparison_exp
  id: Int_comparison_exp
  justifications: jsonb_comparison_exp
  measurement_attribute_values: jsonb_comparison_exp
  score: float8_comparison_exp
  subobjective_id: Int_comparison_exp
  taken_by: String_comparison_exp
}
"""
unique or primary key constraints on table "SubobjectiveScoreExplanation"
"""
enum SubobjectiveScoreExplanation_constraint {
  "unique or primary key constraint"
  SubobjectiveScoreExplanation_pkey
}
"delete the field or element with specified path (for JSON arrays, negative integers count from the end)"
input SubobjectiveScoreExplanation_delete_at_path_input {
  justifications: [String!]
  measurement_attribute_values: [String!]
}
"delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array"
input SubobjectiveScoreExplanation_delete_elem_input {
  justifications: Int
  measurement_attribute_values: Int
}
"delete key/value pair or string element. key/value pairs are matched based on their key value"
input SubobjectiveScoreExplanation_delete_key_input {
  justifications: String
  measurement_attribute_values: String
}
"""
input type for incrementing numeric columns in table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_inc_input {
  architecture_id: Int
  id: Int
  score: float8
  subobjective_id: Int
}
"""
input type for inserting data into table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_insert_input {
  Architecture: Architecture_obj_rel_insert_input
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_obj_rel_insert_input
  architecture_id: Int
  id: Int
  justifications: jsonb
  measurement_attribute_values: jsonb
  score: float8
  subobjective_id: Int
  taken_by: String
}
"aggregate max on columns"
type SubobjectiveScoreExplanation_max_fields {
  architecture_id: Int
  id: Int
  score: float8
  subobjective_id: Int
  taken_by: String
}
"""
order by max() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_max_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
  taken_by: order_by
}
"aggregate min on columns"
type SubobjectiveScoreExplanation_min_fields {
  architecture_id: Int
  id: Int
  score: float8
  subobjective_id: Int
  taken_by: String
}
"""
order by min() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_min_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
  taken_by: order_by
}
"""
response of any mutation on the table "SubobjectiveScoreExplanation"
"""
type SubobjectiveScoreExplanation_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [SubobjectiveScoreExplanation!]!
}
"""
on conflict condition type for table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_on_conflict {
  constraint: SubobjectiveScoreExplanation_constraint!
  update_columns: [SubobjectiveScoreExplanation_update_column!]! = []
  where: SubobjectiveScoreExplanation_bool_exp
}
"""
Ordering options when selecting data from "SubobjectiveScoreExplanation".
"""
input SubobjectiveScoreExplanation_order_by {
  Architecture: Architecture_order_by
  Stakeholder_Needs_Subobjective: Stakeholder_Needs_Subobjective_order_by
  architecture_id: order_by
  id: order_by
  justifications: order_by
  measurement_attribute_values: order_by
  score: order_by
  subobjective_id: order_by
  taken_by: order_by
}
"primary key columns input for table: SubobjectiveScoreExplanation"
input SubobjectiveScoreExplanation_pk_columns_input {
  id: Int!
}
"prepend existing jsonb value of filtered columns with new jsonb value"
input SubobjectiveScoreExplanation_prepend_input {
  justifications: jsonb
  measurement_attribute_values: jsonb
}
"""
select columns of table "SubobjectiveScoreExplanation"
"""
enum SubobjectiveScoreExplanation_select_column {
  "column name"
  architecture_id
  "column name"
  id
  "column name"
  justifications
  "column name"
  measurement_attribute_values
  "column name"
  score
  "column name"
  subobjective_id
  "column name"
  taken_by
}
"""
input type for updating data in table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_set_input {
  architecture_id: Int
  id: Int
  justifications: jsonb
  measurement_attribute_values: jsonb
  score: float8
  subobjective_id: Int
  taken_by: String
}
"aggregate stddev on columns"
type SubobjectiveScoreExplanation_stddev_fields {
  architecture_id: Float
  id: Float
  score: Float
  subobjective_id: Float
}
"""
order by stddev() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_stddev_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
}
"aggregate stddev_pop on columns"
type SubobjectiveScoreExplanation_stddev_pop_fields {
  architecture_id: Float
  id: Float
  score: Float
  subobjective_id: Float
}
"""
order by stddev_pop() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_stddev_pop_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
}
"aggregate stddev_samp on columns"
type SubobjectiveScoreExplanation_stddev_samp_fields {
  architecture_id: Float
  id: Float
  score: Float
  subobjective_id: Float
}
"""
order by stddev_samp() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_stddev_samp_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
}
"aggregate sum on columns"
type SubobjectiveScoreExplanation_sum_fields {
  architecture_id: Int
  id: Int
  score: float8
  subobjective_id: Int
}
"""
order by sum() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_sum_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
}
"""
update columns of table "SubobjectiveScoreExplanation"
"""
enum SubobjectiveScoreExplanation_update_column {
  "column name"
  architecture_id
  "column name"
  id
  "column name"
  justifications
  "column name"
  measurement_attribute_values
  "column name"
  score
  "column name"
  subobjective_id
  "column name"
  taken_by
}
"aggregate var_pop on columns"
type SubobjectiveScoreExplanation_var_pop_fields {
  architecture_id: Float
  id: Float
  score: Float
  subobjective_id: Float
}
"""
order by var_pop() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_var_pop_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
}
"aggregate var_samp on columns"
type SubobjectiveScoreExplanation_var_samp_fields {
  architecture_id: Float
  id: Float
  score: Float
  subobjective_id: Float
}
"""
order by var_samp() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_var_samp_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
}
"aggregate variance on columns"
type SubobjectiveScoreExplanation_variance_fields {
  architecture_id: Float
  id: Float
  score: Float
  subobjective_id: Float
}
"""
order by variance() on columns of table "SubobjectiveScoreExplanation"
"""
input SubobjectiveScoreExplanation_variance_order_by {
  architecture_id: order_by
  id: order_by
  score: order_by
  subobjective_id: order_by
}
"""
columns and relationships of "Walker_Mission_Analysis"
"""
type Walker_Mission_Analysis {
  "An object relationship"
  Problem: Problem
  avg_revisit_time_cold_regiouis: float8
  avg_revisit_time_global: float8
  avg_revisit_time_northern_hemisphere: float8
  avg_revisit_time_southern_hemisphere: float8
  avg_revisit_time_tropics: float8
  avg_revisit_time_us: float8
  id: Int!
  instrument_fov: float8
  mission_architecture: String
  num_planes: float8
  orbit_altitude: float8
  orbit_inclination: String
  problem_id: Int
  sats_per_plane: float8
}
"""
aggregated selection of "Walker_Mission_Analysis"
"""
type Walker_Mission_Analysis_aggregate {
  aggregate: Walker_Mission_Analysis_aggregate_fields
  nodes: [Walker_Mission_Analysis!]!
}
"""
aggregate fields of "Walker_Mission_Analysis"
"""
type Walker_Mission_Analysis_aggregate_fields {
  avg: Walker_Mission_Analysis_avg_fields
  count(columns: [Walker_Mission_Analysis_select_column!], distinct: Boolean): Int!
  max: Walker_Mission_Analysis_max_fields
  min: Walker_Mission_Analysis_min_fields
  stddev: Walker_Mission_Analysis_stddev_fields
  stddev_pop: Walker_Mission_Analysis_stddev_pop_fields
  stddev_samp: Walker_Mission_Analysis_stddev_samp_fields
  sum: Walker_Mission_Analysis_sum_fields
  var_pop: Walker_Mission_Analysis_var_pop_fields
  var_samp: Walker_Mission_Analysis_var_samp_fields
  variance: Walker_Mission_Analysis_variance_fields
}
"""
order by aggregate values of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_aggregate_order_by {
  avg: Walker_Mission_Analysis_avg_order_by
  count: order_by
  max: Walker_Mission_Analysis_max_order_by
  min: Walker_Mission_Analysis_min_order_by
  stddev: Walker_Mission_Analysis_stddev_order_by
  stddev_pop: Walker_Mission_Analysis_stddev_pop_order_by
  stddev_samp: Walker_Mission_Analysis_stddev_samp_order_by
  sum: Walker_Mission_Analysis_sum_order_by
  var_pop: Walker_Mission_Analysis_var_pop_order_by
  var_samp: Walker_Mission_Analysis_var_samp_order_by
  variance: Walker_Mission_Analysis_variance_order_by
}
"""
input type for inserting array relation for remote table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_arr_rel_insert_input {
  data: [Walker_Mission_Analysis_insert_input!]!
  "on conflict condition"
  on_conflict: Walker_Mission_Analysis_on_conflict
}
"aggregate avg on columns"
type Walker_Mission_Analysis_avg_fields {
  avg_revisit_time_cold_regiouis: Float
  avg_revisit_time_global: Float
  avg_revisit_time_northern_hemisphere: Float
  avg_revisit_time_southern_hemisphere: Float
  avg_revisit_time_tropics: Float
  avg_revisit_time_us: Float
  id: Float
  instrument_fov: Float
  num_planes: Float
  orbit_altitude: Float
  problem_id: Float
  sats_per_plane: Float
}
"""
order by avg() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_avg_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  num_planes: order_by
  orbit_altitude: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"""
Boolean expression to filter rows from the table "Walker_Mission_Analysis". All fields are combined with a logical 'AND'.
"""
input Walker_Mission_Analysis_bool_exp {
  Problem: Problem_bool_exp
  _and: [Walker_Mission_Analysis_bool_exp!]
  _not: Walker_Mission_Analysis_bool_exp
  _or: [Walker_Mission_Analysis_bool_exp!]
  avg_revisit_time_cold_regiouis: float8_comparison_exp
  avg_revisit_time_global: float8_comparison_exp
  avg_revisit_time_northern_hemisphere: float8_comparison_exp
  avg_revisit_time_southern_hemisphere: float8_comparison_exp
  avg_revisit_time_tropics: float8_comparison_exp
  avg_revisit_time_us: float8_comparison_exp
  id: Int_comparison_exp
  instrument_fov: float8_comparison_exp
  mission_architecture: String_comparison_exp
  num_planes: float8_comparison_exp
  orbit_altitude: float8_comparison_exp
  orbit_inclination: String_comparison_exp
  problem_id: Int_comparison_exp
  sats_per_plane: float8_comparison_exp
}
"""
unique or primary key constraints on table "Walker_Mission_Analysis"
"""
enum Walker_Mission_Analysis_constraint {
  "unique or primary key constraint"
  Walker_Mission_Analysis_pkey
}
"""
input type for incrementing numeric columns in table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_inc_input {
  avg_revisit_time_cold_regiouis: float8
  avg_revisit_time_global: float8
  avg_revisit_time_northern_hemisphere: float8
  avg_revisit_time_southern_hemisphere: float8
  avg_revisit_time_tropics: float8
  avg_revisit_time_us: float8
  id: Int
  instrument_fov: float8
  num_planes: float8
  orbit_altitude: float8
  problem_id: Int
  sats_per_plane: float8
}
"""
input type for inserting data into table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_insert_input {
  Problem: Problem_obj_rel_insert_input
  avg_revisit_time_cold_regiouis: float8
  avg_revisit_time_global: float8
  avg_revisit_time_northern_hemisphere: float8
  avg_revisit_time_southern_hemisphere: float8
  avg_revisit_time_tropics: float8
  avg_revisit_time_us: float8
  id: Int
  instrument_fov: float8
  mission_architecture: String
  num_planes: float8
  orbit_altitude: float8
  orbit_inclination: String
  problem_id: Int
  sats_per_plane: float8
}
"aggregate max on columns"
type Walker_Mission_Analysis_max_fields {
  avg_revisit_time_cold_regiouis: float8
  avg_revisit_time_global: float8
  avg_revisit_time_northern_hemisphere: float8
  avg_revisit_time_southern_hemisphere: float8
  avg_revisit_time_tropics: float8
  avg_revisit_time_us: float8
  id: Int
  instrument_fov: float8
  mission_architecture: String
  num_planes: float8
  orbit_altitude: float8
  orbit_inclination: String
  problem_id: Int
  sats_per_plane: float8
}
"""
order by max() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_max_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  mission_architecture: order_by
  num_planes: order_by
  orbit_altitude: order_by
  orbit_inclination: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"aggregate min on columns"
type Walker_Mission_Analysis_min_fields {
  avg_revisit_time_cold_regiouis: float8
  avg_revisit_time_global: float8
  avg_revisit_time_northern_hemisphere: float8
  avg_revisit_time_southern_hemisphere: float8
  avg_revisit_time_tropics: float8
  avg_revisit_time_us: float8
  id: Int
  instrument_fov: float8
  mission_architecture: String
  num_planes: float8
  orbit_altitude: float8
  orbit_inclination: String
  problem_id: Int
  sats_per_plane: float8
}
"""
order by min() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_min_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  mission_architecture: order_by
  num_planes: order_by
  orbit_altitude: order_by
  orbit_inclination: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"""
response of any mutation on the table "Walker_Mission_Analysis"
"""
type Walker_Mission_Analysis_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [Walker_Mission_Analysis!]!
}
"""
on conflict condition type for table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_on_conflict {
  constraint: Walker_Mission_Analysis_constraint!
  update_columns: [Walker_Mission_Analysis_update_column!]! = []
  where: Walker_Mission_Analysis_bool_exp
}
"""
Ordering options when selecting data from "Walker_Mission_Analysis".
"""
input Walker_Mission_Analysis_order_by {
  Problem: Problem_order_by
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  mission_architecture: order_by
  num_planes: order_by
  orbit_altitude: order_by
  orbit_inclination: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"primary key columns input for table: Walker_Mission_Analysis"
input Walker_Mission_Analysis_pk_columns_input {
  id: Int!
}
"""
select columns of table "Walker_Mission_Analysis"
"""
enum Walker_Mission_Analysis_select_column {
  "column name"
  avg_revisit_time_cold_regiouis
  "column name"
  avg_revisit_time_global
  "column name"
  avg_revisit_time_northern_hemisphere
  "column name"
  avg_revisit_time_southern_hemisphere
  "column name"
  avg_revisit_time_tropics
  "column name"
  avg_revisit_time_us
  "column name"
  id
  "column name"
  instrument_fov
  "column name"
  mission_architecture
  "column name"
  num_planes
  "column name"
  orbit_altitude
  "column name"
  orbit_inclination
  "column name"
  problem_id
  "column name"
  sats_per_plane
}
"""
input type for updating data in table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_set_input {
  avg_revisit_time_cold_regiouis: float8
  avg_revisit_time_global: float8
  avg_revisit_time_northern_hemisphere: float8
  avg_revisit_time_southern_hemisphere: float8
  avg_revisit_time_tropics: float8
  avg_revisit_time_us: float8
  id: Int
  instrument_fov: float8
  mission_architecture: String
  num_planes: float8
  orbit_altitude: float8
  orbit_inclination: String
  problem_id: Int
  sats_per_plane: float8
}
"aggregate stddev on columns"
type Walker_Mission_Analysis_stddev_fields {
  avg_revisit_time_cold_regiouis: Float
  avg_revisit_time_global: Float
  avg_revisit_time_northern_hemisphere: Float
  avg_revisit_time_southern_hemisphere: Float
  avg_revisit_time_tropics: Float
  avg_revisit_time_us: Float
  id: Float
  instrument_fov: Float
  num_planes: Float
  orbit_altitude: Float
  problem_id: Float
  sats_per_plane: Float
}
"""
order by stddev() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_stddev_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  num_planes: order_by
  orbit_altitude: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"aggregate stddev_pop on columns"
type Walker_Mission_Analysis_stddev_pop_fields {
  avg_revisit_time_cold_regiouis: Float
  avg_revisit_time_global: Float
  avg_revisit_time_northern_hemisphere: Float
  avg_revisit_time_southern_hemisphere: Float
  avg_revisit_time_tropics: Float
  avg_revisit_time_us: Float
  id: Float
  instrument_fov: Float
  num_planes: Float
  orbit_altitude: Float
  problem_id: Float
  sats_per_plane: Float
}
"""
order by stddev_pop() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_stddev_pop_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  num_planes: order_by
  orbit_altitude: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"aggregate stddev_samp on columns"
type Walker_Mission_Analysis_stddev_samp_fields {
  avg_revisit_time_cold_regiouis: Float
  avg_revisit_time_global: Float
  avg_revisit_time_northern_hemisphere: Float
  avg_revisit_time_southern_hemisphere: Float
  avg_revisit_time_tropics: Float
  avg_revisit_time_us: Float
  id: Float
  instrument_fov: Float
  num_planes: Float
  orbit_altitude: Float
  problem_id: Float
  sats_per_plane: Float
}
"""
order by stddev_samp() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_stddev_samp_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  num_planes: order_by
  orbit_altitude: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"aggregate sum on columns"
type Walker_Mission_Analysis_sum_fields {
  avg_revisit_time_cold_regiouis: float8
  avg_revisit_time_global: float8
  avg_revisit_time_northern_hemisphere: float8
  avg_revisit_time_southern_hemisphere: float8
  avg_revisit_time_tropics: float8
  avg_revisit_time_us: float8
  id: Int
  instrument_fov: float8
  num_planes: float8
  orbit_altitude: float8
  problem_id: Int
  sats_per_plane: float8
}
"""
order by sum() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_sum_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  num_planes: order_by
  orbit_altitude: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"""
update columns of table "Walker_Mission_Analysis"
"""
enum Walker_Mission_Analysis_update_column {
  "column name"
  avg_revisit_time_cold_regiouis
  "column name"
  avg_revisit_time_global
  "column name"
  avg_revisit_time_northern_hemisphere
  "column name"
  avg_revisit_time_southern_hemisphere
  "column name"
  avg_revisit_time_tropics
  "column name"
  avg_revisit_time_us
  "column name"
  id
  "column name"
  instrument_fov
  "column name"
  mission_architecture
  "column name"
  num_planes
  "column name"
  orbit_altitude
  "column name"
  orbit_inclination
  "column name"
  problem_id
  "column name"
  sats_per_plane
}
"aggregate var_pop on columns"
type Walker_Mission_Analysis_var_pop_fields {
  avg_revisit_time_cold_regiouis: Float
  avg_revisit_time_global: Float
  avg_revisit_time_northern_hemisphere: Float
  avg_revisit_time_southern_hemisphere: Float
  avg_revisit_time_tropics: Float
  avg_revisit_time_us: Float
  id: Float
  instrument_fov: Float
  num_planes: Float
  orbit_altitude: Float
  problem_id: Float
  sats_per_plane: Float
}
"""
order by var_pop() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_var_pop_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  num_planes: order_by
  orbit_altitude: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"aggregate var_samp on columns"
type Walker_Mission_Analysis_var_samp_fields {
  avg_revisit_time_cold_regiouis: Float
  avg_revisit_time_global: Float
  avg_revisit_time_northern_hemisphere: Float
  avg_revisit_time_southern_hemisphere: Float
  avg_revisit_time_tropics: Float
  avg_revisit_time_us: Float
  id: Float
  instrument_fov: Float
  num_planes: Float
  orbit_altitude: Float
  problem_id: Float
  sats_per_plane: Float
}
"""
order by var_samp() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_var_samp_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  num_planes: order_by
  orbit_altitude: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
"aggregate variance on columns"
type Walker_Mission_Analysis_variance_fields {
  avg_revisit_time_cold_regiouis: Float
  avg_revisit_time_global: Float
  avg_revisit_time_northern_hemisphere: Float
  avg_revisit_time_southern_hemisphere: Float
  avg_revisit_time_tropics: Float
  avg_revisit_time_us: Float
  id: Float
  instrument_fov: Float
  num_planes: Float
  orbit_altitude: Float
  problem_id: Float
  sats_per_plane: Float
}
"""
order by variance() on columns of table "Walker_Mission_Analysis"
"""
input Walker_Mission_Analysis_variance_order_by {
  avg_revisit_time_cold_regiouis: order_by
  avg_revisit_time_global: order_by
  avg_revisit_time_northern_hemisphere: order_by
  avg_revisit_time_southern_hemisphere: order_by
  avg_revisit_time_tropics: order_by
  avg_revisit_time_us: order_by
  id: order_by
  instrument_fov: order_by
  num_planes: order_by
  orbit_altitude: order_by
  problem_id: order_by
  sats_per_plane: order_by
}
scalar _float8
"""
Boolean expression to compare columns of type "_float8". All fields are combined with logical 'AND'.
"""
input _float8_comparison_exp {
  _eq: _float8
  _gt: _float8
  _gte: _float8
  _in: [_float8!]
  _is_null: Boolean
  _lt: _float8
  _lte: _float8
  _neq: _float8
  _nin: [_float8!]
}
scalar _varchar
"""
Boolean expression to compare columns of type "_varchar". All fields are combined with logical 'AND'.
"""
input _varchar_comparison_exp {
  _eq: _varchar
  _gt: _varchar
  _gte: _varchar
  _in: [_varchar!]
  _is_null: Boolean
  _lt: _varchar
  _lte: _varchar
  _neq: _varchar
  _nin: [_varchar!]
}
"""
columns and relationships of "auth_group"
"""
type auth_group {
  "An array relationship"
  auth_group_permissions("distinct select on columns" distinct_on: [auth_group_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_permissions_order_by!], "filter the rows returned" where: auth_group_permissions_bool_exp): [auth_group_permissions!]!
  "An aggregate relationship"
  auth_group_permissions_aggregate("distinct select on columns" distinct_on: [auth_group_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_permissions_order_by!], "filter the rows returned" where: auth_group_permissions_bool_exp): auth_group_permissions_aggregate!
  "An array relationship"
  auth_user_groups("distinct select on columns" distinct_on: [auth_user_groups_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_groups_order_by!], "filter the rows returned" where: auth_user_groups_bool_exp): [auth_user_groups!]!
  "An aggregate relationship"
  auth_user_groups_aggregate("distinct select on columns" distinct_on: [auth_user_groups_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_groups_order_by!], "filter the rows returned" where: auth_user_groups_bool_exp): auth_user_groups_aggregate!
  id: Int!
  name: String!
}
"""
aggregated selection of "auth_group"
"""
type auth_group_aggregate {
  aggregate: auth_group_aggregate_fields
  nodes: [auth_group!]!
}
"""
aggregate fields of "auth_group"
"""
type auth_group_aggregate_fields {
  avg: auth_group_avg_fields
  count(columns: [auth_group_select_column!], distinct: Boolean): Int!
  max: auth_group_max_fields
  min: auth_group_min_fields
  stddev: auth_group_stddev_fields
  stddev_pop: auth_group_stddev_pop_fields
  stddev_samp: auth_group_stddev_samp_fields
  sum: auth_group_sum_fields
  var_pop: auth_group_var_pop_fields
  var_samp: auth_group_var_samp_fields
  variance: auth_group_variance_fields
}
"aggregate avg on columns"
type auth_group_avg_fields {
  id: Float
}
"""
Boolean expression to filter rows from the table "auth_group". All fields are combined with a logical 'AND'.
"""
input auth_group_bool_exp {
  _and: [auth_group_bool_exp!]
  _not: auth_group_bool_exp
  _or: [auth_group_bool_exp!]
  auth_group_permissions: auth_group_permissions_bool_exp
  auth_user_groups: auth_user_groups_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}
"""
unique or primary key constraints on table "auth_group"
"""
enum auth_group_constraint {
  "unique or primary key constraint"
  auth_group_name_key
  "unique or primary key constraint"
  auth_group_pkey
}
"""
input type for incrementing numeric columns in table "auth_group"
"""
input auth_group_inc_input {
  id: Int
}
"""
input type for inserting data into table "auth_group"
"""
input auth_group_insert_input {
  auth_group_permissions: auth_group_permissions_arr_rel_insert_input
  auth_user_groups: auth_user_groups_arr_rel_insert_input
  id: Int
  name: String
}
"aggregate max on columns"
type auth_group_max_fields {
  id: Int
  name: String
}
"aggregate min on columns"
type auth_group_min_fields {
  id: Int
  name: String
}
"""
response of any mutation on the table "auth_group"
"""
type auth_group_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [auth_group!]!
}
"""
input type for inserting object relation for remote table "auth_group"
"""
input auth_group_obj_rel_insert_input {
  data: auth_group_insert_input!
  "on conflict condition"
  on_conflict: auth_group_on_conflict
}
"""
on conflict condition type for table "auth_group"
"""
input auth_group_on_conflict {
  constraint: auth_group_constraint!
  update_columns: [auth_group_update_column!]! = []
  where: auth_group_bool_exp
}
"""
Ordering options when selecting data from "auth_group".
"""
input auth_group_order_by {
  auth_group_permissions_aggregate: auth_group_permissions_aggregate_order_by
  auth_user_groups_aggregate: auth_user_groups_aggregate_order_by
  id: order_by
  name: order_by
}
"""
columns and relationships of "auth_group_permissions"
"""
type auth_group_permissions {
  "An object relationship"
  auth_group: auth_group!
  "An object relationship"
  auth_permission: auth_permission!
  group_id: Int!
  id: Int!
  permission_id: Int!
}
"""
aggregated selection of "auth_group_permissions"
"""
type auth_group_permissions_aggregate {
  aggregate: auth_group_permissions_aggregate_fields
  nodes: [auth_group_permissions!]!
}
"""
aggregate fields of "auth_group_permissions"
"""
type auth_group_permissions_aggregate_fields {
  avg: auth_group_permissions_avg_fields
  count(columns: [auth_group_permissions_select_column!], distinct: Boolean): Int!
  max: auth_group_permissions_max_fields
  min: auth_group_permissions_min_fields
  stddev: auth_group_permissions_stddev_fields
  stddev_pop: auth_group_permissions_stddev_pop_fields
  stddev_samp: auth_group_permissions_stddev_samp_fields
  sum: auth_group_permissions_sum_fields
  var_pop: auth_group_permissions_var_pop_fields
  var_samp: auth_group_permissions_var_samp_fields
  variance: auth_group_permissions_variance_fields
}
"""
order by aggregate values of table "auth_group_permissions"
"""
input auth_group_permissions_aggregate_order_by {
  avg: auth_group_permissions_avg_order_by
  count: order_by
  max: auth_group_permissions_max_order_by
  min: auth_group_permissions_min_order_by
  stddev: auth_group_permissions_stddev_order_by
  stddev_pop: auth_group_permissions_stddev_pop_order_by
  stddev_samp: auth_group_permissions_stddev_samp_order_by
  sum: auth_group_permissions_sum_order_by
  var_pop: auth_group_permissions_var_pop_order_by
  var_samp: auth_group_permissions_var_samp_order_by
  variance: auth_group_permissions_variance_order_by
}
"""
input type for inserting array relation for remote table "auth_group_permissions"
"""
input auth_group_permissions_arr_rel_insert_input {
  data: [auth_group_permissions_insert_input!]!
  "on conflict condition"
  on_conflict: auth_group_permissions_on_conflict
}
"aggregate avg on columns"
type auth_group_permissions_avg_fields {
  group_id: Float
  id: Float
  permission_id: Float
}
"""
order by avg() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_avg_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"""
Boolean expression to filter rows from the table "auth_group_permissions". All fields are combined with a logical 'AND'.
"""
input auth_group_permissions_bool_exp {
  _and: [auth_group_permissions_bool_exp!]
  _not: auth_group_permissions_bool_exp
  _or: [auth_group_permissions_bool_exp!]
  auth_group: auth_group_bool_exp
  auth_permission: auth_permission_bool_exp
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  permission_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "auth_group_permissions"
"""
enum auth_group_permissions_constraint {
  "unique or primary key constraint"
  auth_group_permissions_group_id_permission_id_0cd325b0_uniq
  "unique or primary key constraint"
  auth_group_permissions_pkey
}
"""
input type for incrementing numeric columns in table "auth_group_permissions"
"""
input auth_group_permissions_inc_input {
  group_id: Int
  id: Int
  permission_id: Int
}
"""
input type for inserting data into table "auth_group_permissions"
"""
input auth_group_permissions_insert_input {
  auth_group: auth_group_obj_rel_insert_input
  auth_permission: auth_permission_obj_rel_insert_input
  group_id: Int
  id: Int
  permission_id: Int
}
"aggregate max on columns"
type auth_group_permissions_max_fields {
  group_id: Int
  id: Int
  permission_id: Int
}
"""
order by max() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_max_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"aggregate min on columns"
type auth_group_permissions_min_fields {
  group_id: Int
  id: Int
  permission_id: Int
}
"""
order by min() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_min_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"""
response of any mutation on the table "auth_group_permissions"
"""
type auth_group_permissions_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [auth_group_permissions!]!
}
"""
on conflict condition type for table "auth_group_permissions"
"""
input auth_group_permissions_on_conflict {
  constraint: auth_group_permissions_constraint!
  update_columns: [auth_group_permissions_update_column!]! = []
  where: auth_group_permissions_bool_exp
}
"""
Ordering options when selecting data from "auth_group_permissions".
"""
input auth_group_permissions_order_by {
  auth_group: auth_group_order_by
  auth_permission: auth_permission_order_by
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"primary key columns input for table: auth_group_permissions"
input auth_group_permissions_pk_columns_input {
  id: Int!
}
"""
select columns of table "auth_group_permissions"
"""
enum auth_group_permissions_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  permission_id
}
"""
input type for updating data in table "auth_group_permissions"
"""
input auth_group_permissions_set_input {
  group_id: Int
  id: Int
  permission_id: Int
}
"aggregate stddev on columns"
type auth_group_permissions_stddev_fields {
  group_id: Float
  id: Float
  permission_id: Float
}
"""
order by stddev() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_stddev_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"aggregate stddev_pop on columns"
type auth_group_permissions_stddev_pop_fields {
  group_id: Float
  id: Float
  permission_id: Float
}
"""
order by stddev_pop() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_stddev_pop_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"aggregate stddev_samp on columns"
type auth_group_permissions_stddev_samp_fields {
  group_id: Float
  id: Float
  permission_id: Float
}
"""
order by stddev_samp() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_stddev_samp_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"aggregate sum on columns"
type auth_group_permissions_sum_fields {
  group_id: Int
  id: Int
  permission_id: Int
}
"""
order by sum() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_sum_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"""
update columns of table "auth_group_permissions"
"""
enum auth_group_permissions_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  permission_id
}
"aggregate var_pop on columns"
type auth_group_permissions_var_pop_fields {
  group_id: Float
  id: Float
  permission_id: Float
}
"""
order by var_pop() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_var_pop_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"aggregate var_samp on columns"
type auth_group_permissions_var_samp_fields {
  group_id: Float
  id: Float
  permission_id: Float
}
"""
order by var_samp() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_var_samp_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"aggregate variance on columns"
type auth_group_permissions_variance_fields {
  group_id: Float
  id: Float
  permission_id: Float
}
"""
order by variance() on columns of table "auth_group_permissions"
"""
input auth_group_permissions_variance_order_by {
  group_id: order_by
  id: order_by
  permission_id: order_by
}
"primary key columns input for table: auth_group"
input auth_group_pk_columns_input {
  id: Int!
}
"""
select columns of table "auth_group"
"""
enum auth_group_select_column {
  "column name"
  id
  "column name"
  name
}
"""
input type for updating data in table "auth_group"
"""
input auth_group_set_input {
  id: Int
  name: String
}
"aggregate stddev on columns"
type auth_group_stddev_fields {
  id: Float
}
"aggregate stddev_pop on columns"
type auth_group_stddev_pop_fields {
  id: Float
}
"aggregate stddev_samp on columns"
type auth_group_stddev_samp_fields {
  id: Float
}
"aggregate sum on columns"
type auth_group_sum_fields {
  id: Int
}
"""
update columns of table "auth_group"
"""
enum auth_group_update_column {
  "column name"
  id
  "column name"
  name
}
"aggregate var_pop on columns"
type auth_group_var_pop_fields {
  id: Float
}
"aggregate var_samp on columns"
type auth_group_var_samp_fields {
  id: Float
}
"aggregate variance on columns"
type auth_group_variance_fields {
  id: Float
}
"""
columns and relationships of "auth_permission"
"""
type auth_permission {
  "An array relationship"
  auth_group_permissions("distinct select on columns" distinct_on: [auth_group_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_permissions_order_by!], "filter the rows returned" where: auth_group_permissions_bool_exp): [auth_group_permissions!]!
  "An aggregate relationship"
  auth_group_permissions_aggregate("distinct select on columns" distinct_on: [auth_group_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_permissions_order_by!], "filter the rows returned" where: auth_group_permissions_bool_exp): auth_group_permissions_aggregate!
  "An array relationship"
  auth_user_user_permissions("distinct select on columns" distinct_on: [auth_user_user_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_user_permissions_order_by!], "filter the rows returned" where: auth_user_user_permissions_bool_exp): [auth_user_user_permissions!]!
  "An aggregate relationship"
  auth_user_user_permissions_aggregate("distinct select on columns" distinct_on: [auth_user_user_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_user_permissions_order_by!], "filter the rows returned" where: auth_user_user_permissions_bool_exp): auth_user_user_permissions_aggregate!
  codename: String!
  content_type_id: Int!
  "An object relationship"
  django_content_type: django_content_type!
  id: Int!
  name: String!
}
"""
aggregated selection of "auth_permission"
"""
type auth_permission_aggregate {
  aggregate: auth_permission_aggregate_fields
  nodes: [auth_permission!]!
}
"""
aggregate fields of "auth_permission"
"""
type auth_permission_aggregate_fields {
  avg: auth_permission_avg_fields
  count(columns: [auth_permission_select_column!], distinct: Boolean): Int!
  max: auth_permission_max_fields
  min: auth_permission_min_fields
  stddev: auth_permission_stddev_fields
  stddev_pop: auth_permission_stddev_pop_fields
  stddev_samp: auth_permission_stddev_samp_fields
  sum: auth_permission_sum_fields
  var_pop: auth_permission_var_pop_fields
  var_samp: auth_permission_var_samp_fields
  variance: auth_permission_variance_fields
}
"""
order by aggregate values of table "auth_permission"
"""
input auth_permission_aggregate_order_by {
  avg: auth_permission_avg_order_by
  count: order_by
  max: auth_permission_max_order_by
  min: auth_permission_min_order_by
  stddev: auth_permission_stddev_order_by
  stddev_pop: auth_permission_stddev_pop_order_by
  stddev_samp: auth_permission_stddev_samp_order_by
  sum: auth_permission_sum_order_by
  var_pop: auth_permission_var_pop_order_by
  var_samp: auth_permission_var_samp_order_by
  variance: auth_permission_variance_order_by
}
"""
input type for inserting array relation for remote table "auth_permission"
"""
input auth_permission_arr_rel_insert_input {
  data: [auth_permission_insert_input!]!
  "on conflict condition"
  on_conflict: auth_permission_on_conflict
}
"aggregate avg on columns"
type auth_permission_avg_fields {
  content_type_id: Float
  id: Float
}
"""
order by avg() on columns of table "auth_permission"
"""
input auth_permission_avg_order_by {
  content_type_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "auth_permission". All fields are combined with a logical 'AND'.
"""
input auth_permission_bool_exp {
  _and: [auth_permission_bool_exp!]
  _not: auth_permission_bool_exp
  _or: [auth_permission_bool_exp!]
  auth_group_permissions: auth_group_permissions_bool_exp
  auth_user_user_permissions: auth_user_user_permissions_bool_exp
  codename: String_comparison_exp
  content_type_id: Int_comparison_exp
  django_content_type: django_content_type_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}
"""
unique or primary key constraints on table "auth_permission"
"""
enum auth_permission_constraint {
  "unique or primary key constraint"
  auth_permission_content_type_id_codename_01ab375a_uniq
  "unique or primary key constraint"
  auth_permission_pkey
}
"""
input type for incrementing numeric columns in table "auth_permission"
"""
input auth_permission_inc_input {
  content_type_id: Int
  id: Int
}
"""
input type for inserting data into table "auth_permission"
"""
input auth_permission_insert_input {
  auth_group_permissions: auth_group_permissions_arr_rel_insert_input
  auth_user_user_permissions: auth_user_user_permissions_arr_rel_insert_input
  codename: String
  content_type_id: Int
  django_content_type: django_content_type_obj_rel_insert_input
  id: Int
  name: String
}
"aggregate max on columns"
type auth_permission_max_fields {
  codename: String
  content_type_id: Int
  id: Int
  name: String
}
"""
order by max() on columns of table "auth_permission"
"""
input auth_permission_max_order_by {
  codename: order_by
  content_type_id: order_by
  id: order_by
  name: order_by
}
"aggregate min on columns"
type auth_permission_min_fields {
  codename: String
  content_type_id: Int
  id: Int
  name: String
}
"""
order by min() on columns of table "auth_permission"
"""
input auth_permission_min_order_by {
  codename: order_by
  content_type_id: order_by
  id: order_by
  name: order_by
}
"""
response of any mutation on the table "auth_permission"
"""
type auth_permission_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [auth_permission!]!
}
"""
input type for inserting object relation for remote table "auth_permission"
"""
input auth_permission_obj_rel_insert_input {
  data: auth_permission_insert_input!
  "on conflict condition"
  on_conflict: auth_permission_on_conflict
}
"""
on conflict condition type for table "auth_permission"
"""
input auth_permission_on_conflict {
  constraint: auth_permission_constraint!
  update_columns: [auth_permission_update_column!]! = []
  where: auth_permission_bool_exp
}
"""
Ordering options when selecting data from "auth_permission".
"""
input auth_permission_order_by {
  auth_group_permissions_aggregate: auth_group_permissions_aggregate_order_by
  auth_user_user_permissions_aggregate: auth_user_user_permissions_aggregate_order_by
  codename: order_by
  content_type_id: order_by
  django_content_type: django_content_type_order_by
  id: order_by
  name: order_by
}
"primary key columns input for table: auth_permission"
input auth_permission_pk_columns_input {
  id: Int!
}
"""
select columns of table "auth_permission"
"""
enum auth_permission_select_column {
  "column name"
  codename
  "column name"
  content_type_id
  "column name"
  id
  "column name"
  name
}
"""
input type for updating data in table "auth_permission"
"""
input auth_permission_set_input {
  codename: String
  content_type_id: Int
  id: Int
  name: String
}
"aggregate stddev on columns"
type auth_permission_stddev_fields {
  content_type_id: Float
  id: Float
}
"""
order by stddev() on columns of table "auth_permission"
"""
input auth_permission_stddev_order_by {
  content_type_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type auth_permission_stddev_pop_fields {
  content_type_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "auth_permission"
"""
input auth_permission_stddev_pop_order_by {
  content_type_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type auth_permission_stddev_samp_fields {
  content_type_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "auth_permission"
"""
input auth_permission_stddev_samp_order_by {
  content_type_id: order_by
  id: order_by
}
"aggregate sum on columns"
type auth_permission_sum_fields {
  content_type_id: Int
  id: Int
}
"""
order by sum() on columns of table "auth_permission"
"""
input auth_permission_sum_order_by {
  content_type_id: order_by
  id: order_by
}
"""
update columns of table "auth_permission"
"""
enum auth_permission_update_column {
  "column name"
  codename
  "column name"
  content_type_id
  "column name"
  id
  "column name"
  name
}
"aggregate var_pop on columns"
type auth_permission_var_pop_fields {
  content_type_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "auth_permission"
"""
input auth_permission_var_pop_order_by {
  content_type_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type auth_permission_var_samp_fields {
  content_type_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "auth_permission"
"""
input auth_permission_var_samp_order_by {
  content_type_id: order_by
  id: order_by
}
"aggregate variance on columns"
type auth_permission_variance_fields {
  content_type_id: Float
  id: Float
}
"""
order by variance() on columns of table "auth_permission"
"""
input auth_permission_variance_order_by {
  content_type_id: order_by
  id: order_by
}
"""
columns and relationships of "auth_user"
"""
type auth_user {
  "An array relationship"
  Architectures("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): [Architecture!]!
  "An aggregate relationship"
  Architectures_aggregate("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): Architecture_aggregate!
  "An array relationship"
  Datasets("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): [Dataset!]!
  "An aggregate relationship"
  Datasets_aggregate("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): Dataset_aggregate!
  "An array relationship"
  Join__AuthUser_Groups("distinct select on columns" distinct_on: [Join__AuthUser_Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__AuthUser_Group_order_by!], "filter the rows returned" where: Join__AuthUser_Group_bool_exp): [Join__AuthUser_Group!]!
  "An aggregate relationship"
  Join__AuthUser_Groups_aggregate("distinct select on columns" distinct_on: [Join__AuthUser_Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__AuthUser_Group_order_by!], "filter the rows returned" where: Join__AuthUser_Group_bool_exp): Join__AuthUser_Group_aggregate!
  "An array relationship"
  auth_user_groups("distinct select on columns" distinct_on: [auth_user_groups_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_groups_order_by!], "filter the rows returned" where: auth_user_groups_bool_exp): [auth_user_groups!]!
  "An aggregate relationship"
  auth_user_groups_aggregate("distinct select on columns" distinct_on: [auth_user_groups_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_groups_order_by!], "filter the rows returned" where: auth_user_groups_bool_exp): auth_user_groups_aggregate!
  "An array relationship"
  auth_user_user_permissions("distinct select on columns" distinct_on: [auth_user_user_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_user_permissions_order_by!], "filter the rows returned" where: auth_user_user_permissions_bool_exp): [auth_user_user_permissions!]!
  "An aggregate relationship"
  auth_user_user_permissions_aggregate("distinct select on columns" distinct_on: [auth_user_user_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_user_permissions_order_by!], "filter the rows returned" where: auth_user_user_permissions_bool_exp): auth_user_user_permissions_aggregate!
  "An object relationship"
  daphne_context_mycroftuser: daphne_context_mycroftuser
  "An array relationship"
  daphne_context_userinformations("distinct select on columns" distinct_on: [daphne_context_userinformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_userinformation_order_by!], "filter the rows returned" where: daphne_context_userinformation_bool_exp): [daphne_context_userinformation!]!
  "An aggregate relationship"
  daphne_context_userinformations_aggregate("distinct select on columns" distinct_on: [daphne_context_userinformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_userinformation_order_by!], "filter the rows returned" where: daphne_context_userinformation_bool_exp): daphne_context_userinformation_aggregate!
  date_joined: timestamptz!
  "An array relationship"
  django_admin_logs("distinct select on columns" distinct_on: [django_admin_log_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_admin_log_order_by!], "filter the rows returned" where: django_admin_log_bool_exp): [django_admin_log!]!
  "An aggregate relationship"
  django_admin_logs_aggregate("distinct select on columns" distinct_on: [django_admin_log_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_admin_log_order_by!], "filter the rows returned" where: django_admin_log_bool_exp): django_admin_log_aggregate!
  email: String!
  first_name: String!
  id: Int!
  is_active: Boolean!
  is_staff: Boolean!
  is_superuser: Boolean!
  last_login: timestamptz
  last_name: String!
  password: String!
  username: String!
}
"""
aggregated selection of "auth_user"
"""
type auth_user_aggregate {
  aggregate: auth_user_aggregate_fields
  nodes: [auth_user!]!
}
"""
aggregate fields of "auth_user"
"""
type auth_user_aggregate_fields {
  avg: auth_user_avg_fields
  count(columns: [auth_user_select_column!], distinct: Boolean): Int!
  max: auth_user_max_fields
  min: auth_user_min_fields
  stddev: auth_user_stddev_fields
  stddev_pop: auth_user_stddev_pop_fields
  stddev_samp: auth_user_stddev_samp_fields
  sum: auth_user_sum_fields
  var_pop: auth_user_var_pop_fields
  var_samp: auth_user_var_samp_fields
  variance: auth_user_variance_fields
}
"aggregate avg on columns"
type auth_user_avg_fields {
  id: Float
}
"""
Boolean expression to filter rows from the table "auth_user". All fields are combined with a logical 'AND'.
"""
input auth_user_bool_exp {
  Architectures: Architecture_bool_exp
  Datasets: Dataset_bool_exp
  Join__AuthUser_Groups: Join__AuthUser_Group_bool_exp
  _and: [auth_user_bool_exp!]
  _not: auth_user_bool_exp
  _or: [auth_user_bool_exp!]
  auth_user_groups: auth_user_groups_bool_exp
  auth_user_user_permissions: auth_user_user_permissions_bool_exp
  daphne_context_mycroftuser: daphne_context_mycroftuser_bool_exp
  daphne_context_userinformations: daphne_context_userinformation_bool_exp
  date_joined: timestamptz_comparison_exp
  django_admin_logs: django_admin_log_bool_exp
  email: String_comparison_exp
  first_name: String_comparison_exp
  id: Int_comparison_exp
  is_active: Boolean_comparison_exp
  is_staff: Boolean_comparison_exp
  is_superuser: Boolean_comparison_exp
  last_login: timestamptz_comparison_exp
  last_name: String_comparison_exp
  password: String_comparison_exp
  username: String_comparison_exp
}
"""
unique or primary key constraints on table "auth_user"
"""
enum auth_user_constraint {
  "unique or primary key constraint"
  auth_user_pkey
  "unique or primary key constraint"
  auth_user_username_key
}
"""
columns and relationships of "auth_user_groups"
"""
type auth_user_groups {
  "An object relationship"
  auth_group: auth_group!
  "An object relationship"
  auth_user: auth_user!
  group_id: Int!
  id: Int!
  user_id: Int!
}
"""
aggregated selection of "auth_user_groups"
"""
type auth_user_groups_aggregate {
  aggregate: auth_user_groups_aggregate_fields
  nodes: [auth_user_groups!]!
}
"""
aggregate fields of "auth_user_groups"
"""
type auth_user_groups_aggregate_fields {
  avg: auth_user_groups_avg_fields
  count(columns: [auth_user_groups_select_column!], distinct: Boolean): Int!
  max: auth_user_groups_max_fields
  min: auth_user_groups_min_fields
  stddev: auth_user_groups_stddev_fields
  stddev_pop: auth_user_groups_stddev_pop_fields
  stddev_samp: auth_user_groups_stddev_samp_fields
  sum: auth_user_groups_sum_fields
  var_pop: auth_user_groups_var_pop_fields
  var_samp: auth_user_groups_var_samp_fields
  variance: auth_user_groups_variance_fields
}
"""
order by aggregate values of table "auth_user_groups"
"""
input auth_user_groups_aggregate_order_by {
  avg: auth_user_groups_avg_order_by
  count: order_by
  max: auth_user_groups_max_order_by
  min: auth_user_groups_min_order_by
  stddev: auth_user_groups_stddev_order_by
  stddev_pop: auth_user_groups_stddev_pop_order_by
  stddev_samp: auth_user_groups_stddev_samp_order_by
  sum: auth_user_groups_sum_order_by
  var_pop: auth_user_groups_var_pop_order_by
  var_samp: auth_user_groups_var_samp_order_by
  variance: auth_user_groups_variance_order_by
}
"""
input type for inserting array relation for remote table "auth_user_groups"
"""
input auth_user_groups_arr_rel_insert_input {
  data: [auth_user_groups_insert_input!]!
  "on conflict condition"
  on_conflict: auth_user_groups_on_conflict
}
"aggregate avg on columns"
type auth_user_groups_avg_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by avg() on columns of table "auth_user_groups"
"""
input auth_user_groups_avg_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"""
Boolean expression to filter rows from the table "auth_user_groups". All fields are combined with a logical 'AND'.
"""
input auth_user_groups_bool_exp {
  _and: [auth_user_groups_bool_exp!]
  _not: auth_user_groups_bool_exp
  _or: [auth_user_groups_bool_exp!]
  auth_group: auth_group_bool_exp
  auth_user: auth_user_bool_exp
  group_id: Int_comparison_exp
  id: Int_comparison_exp
  user_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "auth_user_groups"
"""
enum auth_user_groups_constraint {
  "unique or primary key constraint"
  auth_user_groups_pkey
  "unique or primary key constraint"
  auth_user_groups_user_id_group_id_94350c0c_uniq
}
"""
input type for incrementing numeric columns in table "auth_user_groups"
"""
input auth_user_groups_inc_input {
  group_id: Int
  id: Int
  user_id: Int
}
"""
input type for inserting data into table "auth_user_groups"
"""
input auth_user_groups_insert_input {
  auth_group: auth_group_obj_rel_insert_input
  auth_user: auth_user_obj_rel_insert_input
  group_id: Int
  id: Int
  user_id: Int
}
"aggregate max on columns"
type auth_user_groups_max_fields {
  group_id: Int
  id: Int
  user_id: Int
}
"""
order by max() on columns of table "auth_user_groups"
"""
input auth_user_groups_max_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate min on columns"
type auth_user_groups_min_fields {
  group_id: Int
  id: Int
  user_id: Int
}
"""
order by min() on columns of table "auth_user_groups"
"""
input auth_user_groups_min_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"""
response of any mutation on the table "auth_user_groups"
"""
type auth_user_groups_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [auth_user_groups!]!
}
"""
on conflict condition type for table "auth_user_groups"
"""
input auth_user_groups_on_conflict {
  constraint: auth_user_groups_constraint!
  update_columns: [auth_user_groups_update_column!]! = []
  where: auth_user_groups_bool_exp
}
"""
Ordering options when selecting data from "auth_user_groups".
"""
input auth_user_groups_order_by {
  auth_group: auth_group_order_by
  auth_user: auth_user_order_by
  group_id: order_by
  id: order_by
  user_id: order_by
}
"primary key columns input for table: auth_user_groups"
input auth_user_groups_pk_columns_input {
  id: Int!
}
"""
select columns of table "auth_user_groups"
"""
enum auth_user_groups_select_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  user_id
}
"""
input type for updating data in table "auth_user_groups"
"""
input auth_user_groups_set_input {
  group_id: Int
  id: Int
  user_id: Int
}
"aggregate stddev on columns"
type auth_user_groups_stddev_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by stddev() on columns of table "auth_user_groups"
"""
input auth_user_groups_stddev_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate stddev_pop on columns"
type auth_user_groups_stddev_pop_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by stddev_pop() on columns of table "auth_user_groups"
"""
input auth_user_groups_stddev_pop_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate stddev_samp on columns"
type auth_user_groups_stddev_samp_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by stddev_samp() on columns of table "auth_user_groups"
"""
input auth_user_groups_stddev_samp_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate sum on columns"
type auth_user_groups_sum_fields {
  group_id: Int
  id: Int
  user_id: Int
}
"""
order by sum() on columns of table "auth_user_groups"
"""
input auth_user_groups_sum_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"""
update columns of table "auth_user_groups"
"""
enum auth_user_groups_update_column {
  "column name"
  group_id
  "column name"
  id
  "column name"
  user_id
}
"aggregate var_pop on columns"
type auth_user_groups_var_pop_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by var_pop() on columns of table "auth_user_groups"
"""
input auth_user_groups_var_pop_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate var_samp on columns"
type auth_user_groups_var_samp_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by var_samp() on columns of table "auth_user_groups"
"""
input auth_user_groups_var_samp_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate variance on columns"
type auth_user_groups_variance_fields {
  group_id: Float
  id: Float
  user_id: Float
}
"""
order by variance() on columns of table "auth_user_groups"
"""
input auth_user_groups_variance_order_by {
  group_id: order_by
  id: order_by
  user_id: order_by
}
"""
input type for incrementing numeric columns in table "auth_user"
"""
input auth_user_inc_input {
  id: Int
}
"""
input type for inserting data into table "auth_user"
"""
input auth_user_insert_input {
  Architectures: Architecture_arr_rel_insert_input
  Datasets: Dataset_arr_rel_insert_input
  Join__AuthUser_Groups: Join__AuthUser_Group_arr_rel_insert_input
  auth_user_groups: auth_user_groups_arr_rel_insert_input
  auth_user_user_permissions: auth_user_user_permissions_arr_rel_insert_input
  daphne_context_mycroftuser: daphne_context_mycroftuser_obj_rel_insert_input
  daphne_context_userinformations: daphne_context_userinformation_arr_rel_insert_input
  date_joined: timestamptz
  django_admin_logs: django_admin_log_arr_rel_insert_input
  email: String
  first_name: String
  id: Int
  is_active: Boolean
  is_staff: Boolean
  is_superuser: Boolean
  last_login: timestamptz
  last_name: String
  password: String
  username: String
}
"aggregate max on columns"
type auth_user_max_fields {
  date_joined: timestamptz
  email: String
  first_name: String
  id: Int
  last_login: timestamptz
  last_name: String
  password: String
  username: String
}
"aggregate min on columns"
type auth_user_min_fields {
  date_joined: timestamptz
  email: String
  first_name: String
  id: Int
  last_login: timestamptz
  last_name: String
  password: String
  username: String
}
"""
response of any mutation on the table "auth_user"
"""
type auth_user_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [auth_user!]!
}
"""
input type for inserting object relation for remote table "auth_user"
"""
input auth_user_obj_rel_insert_input {
  data: auth_user_insert_input!
  "on conflict condition"
  on_conflict: auth_user_on_conflict
}
"""
on conflict condition type for table "auth_user"
"""
input auth_user_on_conflict {
  constraint: auth_user_constraint!
  update_columns: [auth_user_update_column!]! = []
  where: auth_user_bool_exp
}
"""
Ordering options when selecting data from "auth_user".
"""
input auth_user_order_by {
  Architectures_aggregate: Architecture_aggregate_order_by
  Datasets_aggregate: Dataset_aggregate_order_by
  Join__AuthUser_Groups_aggregate: Join__AuthUser_Group_aggregate_order_by
  auth_user_groups_aggregate: auth_user_groups_aggregate_order_by
  auth_user_user_permissions_aggregate: auth_user_user_permissions_aggregate_order_by
  daphne_context_mycroftuser: daphne_context_mycroftuser_order_by
  daphne_context_userinformations_aggregate: daphne_context_userinformation_aggregate_order_by
  date_joined: order_by
  django_admin_logs_aggregate: django_admin_log_aggregate_order_by
  email: order_by
  first_name: order_by
  id: order_by
  is_active: order_by
  is_staff: order_by
  is_superuser: order_by
  last_login: order_by
  last_name: order_by
  password: order_by
  username: order_by
}
"primary key columns input for table: auth_user"
input auth_user_pk_columns_input {
  id: Int!
}
"""
select columns of table "auth_user"
"""
enum auth_user_select_column {
  "column name"
  date_joined
  "column name"
  email
  "column name"
  first_name
  "column name"
  id
  "column name"
  is_active
  "column name"
  is_staff
  "column name"
  is_superuser
  "column name"
  last_login
  "column name"
  last_name
  "column name"
  password
  "column name"
  username
}
"""
input type for updating data in table "auth_user"
"""
input auth_user_set_input {
  date_joined: timestamptz
  email: String
  first_name: String
  id: Int
  is_active: Boolean
  is_staff: Boolean
  is_superuser: Boolean
  last_login: timestamptz
  last_name: String
  password: String
  username: String
}
"aggregate stddev on columns"
type auth_user_stddev_fields {
  id: Float
}
"aggregate stddev_pop on columns"
type auth_user_stddev_pop_fields {
  id: Float
}
"aggregate stddev_samp on columns"
type auth_user_stddev_samp_fields {
  id: Float
}
"aggregate sum on columns"
type auth_user_sum_fields {
  id: Int
}
"""
update columns of table "auth_user"
"""
enum auth_user_update_column {
  "column name"
  date_joined
  "column name"
  email
  "column name"
  first_name
  "column name"
  id
  "column name"
  is_active
  "column name"
  is_staff
  "column name"
  is_superuser
  "column name"
  last_login
  "column name"
  last_name
  "column name"
  password
  "column name"
  username
}
"""
columns and relationships of "auth_user_user_permissions"
"""
type auth_user_user_permissions {
  "An object relationship"
  auth_permission: auth_permission!
  "An object relationship"
  auth_user: auth_user!
  id: Int!
  permission_id: Int!
  user_id: Int!
}
"""
aggregated selection of "auth_user_user_permissions"
"""
type auth_user_user_permissions_aggregate {
  aggregate: auth_user_user_permissions_aggregate_fields
  nodes: [auth_user_user_permissions!]!
}
"""
aggregate fields of "auth_user_user_permissions"
"""
type auth_user_user_permissions_aggregate_fields {
  avg: auth_user_user_permissions_avg_fields
  count(columns: [auth_user_user_permissions_select_column!], distinct: Boolean): Int!
  max: auth_user_user_permissions_max_fields
  min: auth_user_user_permissions_min_fields
  stddev: auth_user_user_permissions_stddev_fields
  stddev_pop: auth_user_user_permissions_stddev_pop_fields
  stddev_samp: auth_user_user_permissions_stddev_samp_fields
  sum: auth_user_user_permissions_sum_fields
  var_pop: auth_user_user_permissions_var_pop_fields
  var_samp: auth_user_user_permissions_var_samp_fields
  variance: auth_user_user_permissions_variance_fields
}
"""
order by aggregate values of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_aggregate_order_by {
  avg: auth_user_user_permissions_avg_order_by
  count: order_by
  max: auth_user_user_permissions_max_order_by
  min: auth_user_user_permissions_min_order_by
  stddev: auth_user_user_permissions_stddev_order_by
  stddev_pop: auth_user_user_permissions_stddev_pop_order_by
  stddev_samp: auth_user_user_permissions_stddev_samp_order_by
  sum: auth_user_user_permissions_sum_order_by
  var_pop: auth_user_user_permissions_var_pop_order_by
  var_samp: auth_user_user_permissions_var_samp_order_by
  variance: auth_user_user_permissions_variance_order_by
}
"""
input type for inserting array relation for remote table "auth_user_user_permissions"
"""
input auth_user_user_permissions_arr_rel_insert_input {
  data: [auth_user_user_permissions_insert_input!]!
  "on conflict condition"
  on_conflict: auth_user_user_permissions_on_conflict
}
"aggregate avg on columns"
type auth_user_user_permissions_avg_fields {
  id: Float
  permission_id: Float
  user_id: Float
}
"""
order by avg() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_avg_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"""
Boolean expression to filter rows from the table "auth_user_user_permissions". All fields are combined with a logical 'AND'.
"""
input auth_user_user_permissions_bool_exp {
  _and: [auth_user_user_permissions_bool_exp!]
  _not: auth_user_user_permissions_bool_exp
  _or: [auth_user_user_permissions_bool_exp!]
  auth_permission: auth_permission_bool_exp
  auth_user: auth_user_bool_exp
  id: Int_comparison_exp
  permission_id: Int_comparison_exp
  user_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "auth_user_user_permissions"
"""
enum auth_user_user_permissions_constraint {
  "unique or primary key constraint"
  auth_user_user_permissions_pkey
  "unique or primary key constraint"
  auth_user_user_permissions_user_id_permission_id_14a6b632_uniq
}
"""
input type for incrementing numeric columns in table "auth_user_user_permissions"
"""
input auth_user_user_permissions_inc_input {
  id: Int
  permission_id: Int
  user_id: Int
}
"""
input type for inserting data into table "auth_user_user_permissions"
"""
input auth_user_user_permissions_insert_input {
  auth_permission: auth_permission_obj_rel_insert_input
  auth_user: auth_user_obj_rel_insert_input
  id: Int
  permission_id: Int
  user_id: Int
}
"aggregate max on columns"
type auth_user_user_permissions_max_fields {
  id: Int
  permission_id: Int
  user_id: Int
}
"""
order by max() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_max_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"aggregate min on columns"
type auth_user_user_permissions_min_fields {
  id: Int
  permission_id: Int
  user_id: Int
}
"""
order by min() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_min_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"""
response of any mutation on the table "auth_user_user_permissions"
"""
type auth_user_user_permissions_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [auth_user_user_permissions!]!
}
"""
on conflict condition type for table "auth_user_user_permissions"
"""
input auth_user_user_permissions_on_conflict {
  constraint: auth_user_user_permissions_constraint!
  update_columns: [auth_user_user_permissions_update_column!]! = []
  where: auth_user_user_permissions_bool_exp
}
"""
Ordering options when selecting data from "auth_user_user_permissions".
"""
input auth_user_user_permissions_order_by {
  auth_permission: auth_permission_order_by
  auth_user: auth_user_order_by
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"primary key columns input for table: auth_user_user_permissions"
input auth_user_user_permissions_pk_columns_input {
  id: Int!
}
"""
select columns of table "auth_user_user_permissions"
"""
enum auth_user_user_permissions_select_column {
  "column name"
  id
  "column name"
  permission_id
  "column name"
  user_id
}
"""
input type for updating data in table "auth_user_user_permissions"
"""
input auth_user_user_permissions_set_input {
  id: Int
  permission_id: Int
  user_id: Int
}
"aggregate stddev on columns"
type auth_user_user_permissions_stddev_fields {
  id: Float
  permission_id: Float
  user_id: Float
}
"""
order by stddev() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_stddev_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"aggregate stddev_pop on columns"
type auth_user_user_permissions_stddev_pop_fields {
  id: Float
  permission_id: Float
  user_id: Float
}
"""
order by stddev_pop() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_stddev_pop_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"aggregate stddev_samp on columns"
type auth_user_user_permissions_stddev_samp_fields {
  id: Float
  permission_id: Float
  user_id: Float
}
"""
order by stddev_samp() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_stddev_samp_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"aggregate sum on columns"
type auth_user_user_permissions_sum_fields {
  id: Int
  permission_id: Int
  user_id: Int
}
"""
order by sum() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_sum_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"""
update columns of table "auth_user_user_permissions"
"""
enum auth_user_user_permissions_update_column {
  "column name"
  id
  "column name"
  permission_id
  "column name"
  user_id
}
"aggregate var_pop on columns"
type auth_user_user_permissions_var_pop_fields {
  id: Float
  permission_id: Float
  user_id: Float
}
"""
order by var_pop() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_var_pop_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"aggregate var_samp on columns"
type auth_user_user_permissions_var_samp_fields {
  id: Float
  permission_id: Float
  user_id: Float
}
"""
order by var_samp() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_var_samp_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"aggregate variance on columns"
type auth_user_user_permissions_variance_fields {
  id: Float
  permission_id: Float
  user_id: Float
}
"""
order by variance() on columns of table "auth_user_user_permissions"
"""
input auth_user_user_permissions_variance_order_by {
  id: order_by
  permission_id: order_by
  user_id: order_by
}
"aggregate var_pop on columns"
type auth_user_var_pop_fields {
  id: Float
}
"aggregate var_samp on columns"
type auth_user_var_samp_fields {
  id: Float
}
"aggregate variance on columns"
type auth_user_variance_fields {
  id: Float
}
"""
columns and relationships of "daphne_context_dialoguecontext"
"""
type daphne_context_dialoguecontext {
  "An object relationship"
  EOSS_eossdialoguecontext: EOSS_eossdialoguecontext
  clarifying_commands: String
  clarifying_role: Int
  "An object relationship"
  daphne_context_dialoguehistory: daphne_context_dialoguehistory!
  dialogue_history_id: Int!
  id: Int!
  is_clarifying_input: Boolean!
}
"""
aggregated selection of "daphne_context_dialoguecontext"
"""
type daphne_context_dialoguecontext_aggregate {
  aggregate: daphne_context_dialoguecontext_aggregate_fields
  nodes: [daphne_context_dialoguecontext!]!
}
"""
aggregate fields of "daphne_context_dialoguecontext"
"""
type daphne_context_dialoguecontext_aggregate_fields {
  avg: daphne_context_dialoguecontext_avg_fields
  count(columns: [daphne_context_dialoguecontext_select_column!], distinct: Boolean): Int!
  max: daphne_context_dialoguecontext_max_fields
  min: daphne_context_dialoguecontext_min_fields
  stddev: daphne_context_dialoguecontext_stddev_fields
  stddev_pop: daphne_context_dialoguecontext_stddev_pop_fields
  stddev_samp: daphne_context_dialoguecontext_stddev_samp_fields
  sum: daphne_context_dialoguecontext_sum_fields
  var_pop: daphne_context_dialoguecontext_var_pop_fields
  var_samp: daphne_context_dialoguecontext_var_samp_fields
  variance: daphne_context_dialoguecontext_variance_fields
}
"aggregate avg on columns"
type daphne_context_dialoguecontext_avg_fields {
  clarifying_role: Float
  dialogue_history_id: Float
  id: Float
}
"""
Boolean expression to filter rows from the table "daphne_context_dialoguecontext". All fields are combined with a logical 'AND'.
"""
input daphne_context_dialoguecontext_bool_exp {
  EOSS_eossdialoguecontext: EOSS_eossdialoguecontext_bool_exp
  _and: [daphne_context_dialoguecontext_bool_exp!]
  _not: daphne_context_dialoguecontext_bool_exp
  _or: [daphne_context_dialoguecontext_bool_exp!]
  clarifying_commands: String_comparison_exp
  clarifying_role: Int_comparison_exp
  daphne_context_dialoguehistory: daphne_context_dialoguehistory_bool_exp
  dialogue_history_id: Int_comparison_exp
  id: Int_comparison_exp
  is_clarifying_input: Boolean_comparison_exp
}
"""
unique or primary key constraints on table "daphne_context_dialoguecontext"
"""
enum daphne_context_dialoguecontext_constraint {
  "unique or primary key constraint"
  daphne_context_dialoguecontext_dialogue_history_id_key
  "unique or primary key constraint"
  daphne_context_dialoguecontext_pkey
}
"""
input type for incrementing numeric columns in table "daphne_context_dialoguecontext"
"""
input daphne_context_dialoguecontext_inc_input {
  clarifying_role: Int
  dialogue_history_id: Int
  id: Int
}
"""
input type for inserting data into table "daphne_context_dialoguecontext"
"""
input daphne_context_dialoguecontext_insert_input {
  EOSS_eossdialoguecontext: EOSS_eossdialoguecontext_obj_rel_insert_input
  clarifying_commands: String
  clarifying_role: Int
  daphne_context_dialoguehistory: daphne_context_dialoguehistory_obj_rel_insert_input
  dialogue_history_id: Int
  id: Int
  is_clarifying_input: Boolean
}
"aggregate max on columns"
type daphne_context_dialoguecontext_max_fields {
  clarifying_commands: String
  clarifying_role: Int
  dialogue_history_id: Int
  id: Int
}
"aggregate min on columns"
type daphne_context_dialoguecontext_min_fields {
  clarifying_commands: String
  clarifying_role: Int
  dialogue_history_id: Int
  id: Int
}
"""
response of any mutation on the table "daphne_context_dialoguecontext"
"""
type daphne_context_dialoguecontext_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [daphne_context_dialoguecontext!]!
}
"""
input type for inserting object relation for remote table "daphne_context_dialoguecontext"
"""
input daphne_context_dialoguecontext_obj_rel_insert_input {
  data: daphne_context_dialoguecontext_insert_input!
  "on conflict condition"
  on_conflict: daphne_context_dialoguecontext_on_conflict
}
"""
on conflict condition type for table "daphne_context_dialoguecontext"
"""
input daphne_context_dialoguecontext_on_conflict {
  constraint: daphne_context_dialoguecontext_constraint!
  update_columns: [daphne_context_dialoguecontext_update_column!]! = []
  where: daphne_context_dialoguecontext_bool_exp
}
"""
Ordering options when selecting data from "daphne_context_dialoguecontext".
"""
input daphne_context_dialoguecontext_order_by {
  EOSS_eossdialoguecontext: EOSS_eossdialoguecontext_order_by
  clarifying_commands: order_by
  clarifying_role: order_by
  daphne_context_dialoguehistory: daphne_context_dialoguehistory_order_by
  dialogue_history_id: order_by
  id: order_by
  is_clarifying_input: order_by
}
"primary key columns input for table: daphne_context_dialoguecontext"
input daphne_context_dialoguecontext_pk_columns_input {
  id: Int!
}
"""
select columns of table "daphne_context_dialoguecontext"
"""
enum daphne_context_dialoguecontext_select_column {
  "column name"
  clarifying_commands
  "column name"
  clarifying_role
  "column name"
  dialogue_history_id
  "column name"
  id
  "column name"
  is_clarifying_input
}
"""
input type for updating data in table "daphne_context_dialoguecontext"
"""
input daphne_context_dialoguecontext_set_input {
  clarifying_commands: String
  clarifying_role: Int
  dialogue_history_id: Int
  id: Int
  is_clarifying_input: Boolean
}
"aggregate stddev on columns"
type daphne_context_dialoguecontext_stddev_fields {
  clarifying_role: Float
  dialogue_history_id: Float
  id: Float
}
"aggregate stddev_pop on columns"
type daphne_context_dialoguecontext_stddev_pop_fields {
  clarifying_role: Float
  dialogue_history_id: Float
  id: Float
}
"aggregate stddev_samp on columns"
type daphne_context_dialoguecontext_stddev_samp_fields {
  clarifying_role: Float
  dialogue_history_id: Float
  id: Float
}
"aggregate sum on columns"
type daphne_context_dialoguecontext_sum_fields {
  clarifying_role: Int
  dialogue_history_id: Int
  id: Int
}
"""
update columns of table "daphne_context_dialoguecontext"
"""
enum daphne_context_dialoguecontext_update_column {
  "column name"
  clarifying_commands
  "column name"
  clarifying_role
  "column name"
  dialogue_history_id
  "column name"
  id
  "column name"
  is_clarifying_input
}
"aggregate var_pop on columns"
type daphne_context_dialoguecontext_var_pop_fields {
  clarifying_role: Float
  dialogue_history_id: Float
  id: Float
}
"aggregate var_samp on columns"
type daphne_context_dialoguecontext_var_samp_fields {
  clarifying_role: Float
  dialogue_history_id: Float
  id: Float
}
"aggregate variance on columns"
type daphne_context_dialoguecontext_variance_fields {
  clarifying_role: Float
  dialogue_history_id: Float
  id: Float
}
"""
columns and relationships of "daphne_context_dialoguehistory"
"""
type daphne_context_dialoguehistory {
  "An object relationship"
  daphne_context_dialoguecontext: daphne_context_dialoguecontext
  "An object relationship"
  daphne_context_userinformation: daphne_context_userinformation!
  date: timestamptz!
  dwriter: String!
  id: Int!
  user_information_id: Int!
  visual_message: String!
  visual_message_type: String!
  voice_message: String!
}
"""
aggregated selection of "daphne_context_dialoguehistory"
"""
type daphne_context_dialoguehistory_aggregate {
  aggregate: daphne_context_dialoguehistory_aggregate_fields
  nodes: [daphne_context_dialoguehistory!]!
}
"""
aggregate fields of "daphne_context_dialoguehistory"
"""
type daphne_context_dialoguehistory_aggregate_fields {
  avg: daphne_context_dialoguehistory_avg_fields
  count(columns: [daphne_context_dialoguehistory_select_column!], distinct: Boolean): Int!
  max: daphne_context_dialoguehistory_max_fields
  min: daphne_context_dialoguehistory_min_fields
  stddev: daphne_context_dialoguehistory_stddev_fields
  stddev_pop: daphne_context_dialoguehistory_stddev_pop_fields
  stddev_samp: daphne_context_dialoguehistory_stddev_samp_fields
  sum: daphne_context_dialoguehistory_sum_fields
  var_pop: daphne_context_dialoguehistory_var_pop_fields
  var_samp: daphne_context_dialoguehistory_var_samp_fields
  variance: daphne_context_dialoguehistory_variance_fields
}
"""
order by aggregate values of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_aggregate_order_by {
  avg: daphne_context_dialoguehistory_avg_order_by
  count: order_by
  max: daphne_context_dialoguehistory_max_order_by
  min: daphne_context_dialoguehistory_min_order_by
  stddev: daphne_context_dialoguehistory_stddev_order_by
  stddev_pop: daphne_context_dialoguehistory_stddev_pop_order_by
  stddev_samp: daphne_context_dialoguehistory_stddev_samp_order_by
  sum: daphne_context_dialoguehistory_sum_order_by
  var_pop: daphne_context_dialoguehistory_var_pop_order_by
  var_samp: daphne_context_dialoguehistory_var_samp_order_by
  variance: daphne_context_dialoguehistory_variance_order_by
}
"""
input type for inserting array relation for remote table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_arr_rel_insert_input {
  data: [daphne_context_dialoguehistory_insert_input!]!
  "on conflict condition"
  on_conflict: daphne_context_dialoguehistory_on_conflict
}
"aggregate avg on columns"
type daphne_context_dialoguehistory_avg_fields {
  id: Float
  user_information_id: Float
}
"""
order by avg() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_avg_order_by {
  id: order_by
  user_information_id: order_by
}
"""
Boolean expression to filter rows from the table "daphne_context_dialoguehistory". All fields are combined with a logical 'AND'.
"""
input daphne_context_dialoguehistory_bool_exp {
  _and: [daphne_context_dialoguehistory_bool_exp!]
  _not: daphne_context_dialoguehistory_bool_exp
  _or: [daphne_context_dialoguehistory_bool_exp!]
  daphne_context_dialoguecontext: daphne_context_dialoguecontext_bool_exp
  daphne_context_userinformation: daphne_context_userinformation_bool_exp
  date: timestamptz_comparison_exp
  dwriter: String_comparison_exp
  id: Int_comparison_exp
  user_information_id: Int_comparison_exp
  visual_message: String_comparison_exp
  visual_message_type: String_comparison_exp
  voice_message: String_comparison_exp
}
"""
unique or primary key constraints on table "daphne_context_dialoguehistory"
"""
enum daphne_context_dialoguehistory_constraint {
  "unique or primary key constraint"
  daphne_context_dialoguehistory_pkey
}
"""
input type for incrementing numeric columns in table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_inc_input {
  id: Int
  user_information_id: Int
}
"""
input type for inserting data into table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_insert_input {
  daphne_context_dialoguecontext: daphne_context_dialoguecontext_obj_rel_insert_input
  daphne_context_userinformation: daphne_context_userinformation_obj_rel_insert_input
  date: timestamptz
  dwriter: String
  id: Int
  user_information_id: Int
  visual_message: String
  visual_message_type: String
  voice_message: String
}
"aggregate max on columns"
type daphne_context_dialoguehistory_max_fields {
  date: timestamptz
  dwriter: String
  id: Int
  user_information_id: Int
  visual_message: String
  visual_message_type: String
  voice_message: String
}
"""
order by max() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_max_order_by {
  date: order_by
  dwriter: order_by
  id: order_by
  user_information_id: order_by
  visual_message: order_by
  visual_message_type: order_by
  voice_message: order_by
}
"aggregate min on columns"
type daphne_context_dialoguehistory_min_fields {
  date: timestamptz
  dwriter: String
  id: Int
  user_information_id: Int
  visual_message: String
  visual_message_type: String
  voice_message: String
}
"""
order by min() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_min_order_by {
  date: order_by
  dwriter: order_by
  id: order_by
  user_information_id: order_by
  visual_message: order_by
  visual_message_type: order_by
  voice_message: order_by
}
"""
response of any mutation on the table "daphne_context_dialoguehistory"
"""
type daphne_context_dialoguehistory_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [daphne_context_dialoguehistory!]!
}
"""
input type for inserting object relation for remote table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_obj_rel_insert_input {
  data: daphne_context_dialoguehistory_insert_input!
  "on conflict condition"
  on_conflict: daphne_context_dialoguehistory_on_conflict
}
"""
on conflict condition type for table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_on_conflict {
  constraint: daphne_context_dialoguehistory_constraint!
  update_columns: [daphne_context_dialoguehistory_update_column!]! = []
  where: daphne_context_dialoguehistory_bool_exp
}
"""
Ordering options when selecting data from "daphne_context_dialoguehistory".
"""
input daphne_context_dialoguehistory_order_by {
  daphne_context_dialoguecontext: daphne_context_dialoguecontext_order_by
  daphne_context_userinformation: daphne_context_userinformation_order_by
  date: order_by
  dwriter: order_by
  id: order_by
  user_information_id: order_by
  visual_message: order_by
  visual_message_type: order_by
  voice_message: order_by
}
"primary key columns input for table: daphne_context_dialoguehistory"
input daphne_context_dialoguehistory_pk_columns_input {
  id: Int!
}
"""
select columns of table "daphne_context_dialoguehistory"
"""
enum daphne_context_dialoguehistory_select_column {
  "column name"
  date
  "column name"
  dwriter
  "column name"
  id
  "column name"
  user_information_id
  "column name"
  visual_message
  "column name"
  visual_message_type
  "column name"
  voice_message
}
"""
input type for updating data in table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_set_input {
  date: timestamptz
  dwriter: String
  id: Int
  user_information_id: Int
  visual_message: String
  visual_message_type: String
  voice_message: String
}
"aggregate stddev on columns"
type daphne_context_dialoguehistory_stddev_fields {
  id: Float
  user_information_id: Float
}
"""
order by stddev() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_stddev_order_by {
  id: order_by
  user_information_id: order_by
}
"aggregate stddev_pop on columns"
type daphne_context_dialoguehistory_stddev_pop_fields {
  id: Float
  user_information_id: Float
}
"""
order by stddev_pop() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_stddev_pop_order_by {
  id: order_by
  user_information_id: order_by
}
"aggregate stddev_samp on columns"
type daphne_context_dialoguehistory_stddev_samp_fields {
  id: Float
  user_information_id: Float
}
"""
order by stddev_samp() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_stddev_samp_order_by {
  id: order_by
  user_information_id: order_by
}
"aggregate sum on columns"
type daphne_context_dialoguehistory_sum_fields {
  id: Int
  user_information_id: Int
}
"""
order by sum() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_sum_order_by {
  id: order_by
  user_information_id: order_by
}
"""
update columns of table "daphne_context_dialoguehistory"
"""
enum daphne_context_dialoguehistory_update_column {
  "column name"
  date
  "column name"
  dwriter
  "column name"
  id
  "column name"
  user_information_id
  "column name"
  visual_message
  "column name"
  visual_message_type
  "column name"
  voice_message
}
"aggregate var_pop on columns"
type daphne_context_dialoguehistory_var_pop_fields {
  id: Float
  user_information_id: Float
}
"""
order by var_pop() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_var_pop_order_by {
  id: order_by
  user_information_id: order_by
}
"aggregate var_samp on columns"
type daphne_context_dialoguehistory_var_samp_fields {
  id: Float
  user_information_id: Float
}
"""
order by var_samp() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_var_samp_order_by {
  id: order_by
  user_information_id: order_by
}
"aggregate variance on columns"
type daphne_context_dialoguehistory_variance_fields {
  id: Float
  user_information_id: Float
}
"""
order by variance() on columns of table "daphne_context_dialoguehistory"
"""
input daphne_context_dialoguehistory_variance_order_by {
  id: order_by
  user_information_id: order_by
}
"""
columns and relationships of "daphne_context_mycroftuser"
"""
type daphne_context_mycroftuser {
  "An object relationship"
  auth_user: auth_user!
  mycroft_session: String
  user_id: Int!
}
"""
aggregated selection of "daphne_context_mycroftuser"
"""
type daphne_context_mycroftuser_aggregate {
  aggregate: daphne_context_mycroftuser_aggregate_fields
  nodes: [daphne_context_mycroftuser!]!
}
"""
aggregate fields of "daphne_context_mycroftuser"
"""
type daphne_context_mycroftuser_aggregate_fields {
  avg: daphne_context_mycroftuser_avg_fields
  count(columns: [daphne_context_mycroftuser_select_column!], distinct: Boolean): Int!
  max: daphne_context_mycroftuser_max_fields
  min: daphne_context_mycroftuser_min_fields
  stddev: daphne_context_mycroftuser_stddev_fields
  stddev_pop: daphne_context_mycroftuser_stddev_pop_fields
  stddev_samp: daphne_context_mycroftuser_stddev_samp_fields
  sum: daphne_context_mycroftuser_sum_fields
  var_pop: daphne_context_mycroftuser_var_pop_fields
  var_samp: daphne_context_mycroftuser_var_samp_fields
  variance: daphne_context_mycroftuser_variance_fields
}
"aggregate avg on columns"
type daphne_context_mycroftuser_avg_fields {
  user_id: Float
}
"""
Boolean expression to filter rows from the table "daphne_context_mycroftuser". All fields are combined with a logical 'AND'.
"""
input daphne_context_mycroftuser_bool_exp {
  _and: [daphne_context_mycroftuser_bool_exp!]
  _not: daphne_context_mycroftuser_bool_exp
  _or: [daphne_context_mycroftuser_bool_exp!]
  auth_user: auth_user_bool_exp
  mycroft_session: String_comparison_exp
  user_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "daphne_context_mycroftuser"
"""
enum daphne_context_mycroftuser_constraint {
  "unique or primary key constraint"
  daphne_context_mycroftuser_user_id_73b4f714_pk
}
"""
input type for incrementing numeric columns in table "daphne_context_mycroftuser"
"""
input daphne_context_mycroftuser_inc_input {
  user_id: Int
}
"""
input type for inserting data into table "daphne_context_mycroftuser"
"""
input daphne_context_mycroftuser_insert_input {
  auth_user: auth_user_obj_rel_insert_input
  mycroft_session: String
  user_id: Int
}
"aggregate max on columns"
type daphne_context_mycroftuser_max_fields {
  mycroft_session: String
  user_id: Int
}
"aggregate min on columns"
type daphne_context_mycroftuser_min_fields {
  mycroft_session: String
  user_id: Int
}
"""
response of any mutation on the table "daphne_context_mycroftuser"
"""
type daphne_context_mycroftuser_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [daphne_context_mycroftuser!]!
}
"""
input type for inserting object relation for remote table "daphne_context_mycroftuser"
"""
input daphne_context_mycroftuser_obj_rel_insert_input {
  data: daphne_context_mycroftuser_insert_input!
  "on conflict condition"
  on_conflict: daphne_context_mycroftuser_on_conflict
}
"""
on conflict condition type for table "daphne_context_mycroftuser"
"""
input daphne_context_mycroftuser_on_conflict {
  constraint: daphne_context_mycroftuser_constraint!
  update_columns: [daphne_context_mycroftuser_update_column!]! = []
  where: daphne_context_mycroftuser_bool_exp
}
"""
Ordering options when selecting data from "daphne_context_mycroftuser".
"""
input daphne_context_mycroftuser_order_by {
  auth_user: auth_user_order_by
  mycroft_session: order_by
  user_id: order_by
}
"primary key columns input for table: daphne_context_mycroftuser"
input daphne_context_mycroftuser_pk_columns_input {
  user_id: Int!
}
"""
select columns of table "daphne_context_mycroftuser"
"""
enum daphne_context_mycroftuser_select_column {
  "column name"
  mycroft_session
  "column name"
  user_id
}
"""
input type for updating data in table "daphne_context_mycroftuser"
"""
input daphne_context_mycroftuser_set_input {
  mycroft_session: String
  user_id: Int
}
"aggregate stddev on columns"
type daphne_context_mycroftuser_stddev_fields {
  user_id: Float
}
"aggregate stddev_pop on columns"
type daphne_context_mycroftuser_stddev_pop_fields {
  user_id: Float
}
"aggregate stddev_samp on columns"
type daphne_context_mycroftuser_stddev_samp_fields {
  user_id: Float
}
"aggregate sum on columns"
type daphne_context_mycroftuser_sum_fields {
  user_id: Int
}
"""
update columns of table "daphne_context_mycroftuser"
"""
enum daphne_context_mycroftuser_update_column {
  "column name"
  mycroft_session
  "column name"
  user_id
}
"aggregate var_pop on columns"
type daphne_context_mycroftuser_var_pop_fields {
  user_id: Float
}
"aggregate var_samp on columns"
type daphne_context_mycroftuser_var_samp_fields {
  user_id: Float
}
"aggregate variance on columns"
type daphne_context_mycroftuser_variance_fields {
  user_id: Float
}
"""
columns and relationships of "daphne_context_userinformation"
"""
type daphne_context_userinformation {
  "An object relationship"
  EDL_edlcontext: EDL_edlcontext
  "An object relationship"
  EOSS_eosscontext: EOSS_eosscontext
  "An object relationship"
  auth_user: auth_user
  channel_name: String!
  "An array relationship"
  daphne_context_dialoguehistories("distinct select on columns" distinct_on: [daphne_context_dialoguehistory_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguehistory_order_by!], "filter the rows returned" where: daphne_context_dialoguehistory_bool_exp): [daphne_context_dialoguehistory!]!
  "An aggregate relationship"
  daphne_context_dialoguehistories_aggregate("distinct select on columns" distinct_on: [daphne_context_dialoguehistory_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguehistory_order_by!], "filter the rows returned" where: daphne_context_dialoguehistory_bool_exp): daphne_context_dialoguehistory_aggregate!
  daphne_version: String!
  "An object relationship"
  django_session: django_session
  eval_request_queue: String
  eval_response_queue: String
  "An array relationship"
  experiment_allowedcommands("distinct select on columns" distinct_on: [experiment_allowedcommand_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_allowedcommand_order_by!], "filter the rows returned" where: experiment_allowedcommand_bool_exp): [experiment_allowedcommand!]!
  "An aggregate relationship"
  experiment_allowedcommands_aggregate("distinct select on columns" distinct_on: [experiment_allowedcommand_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_allowedcommand_order_by!], "filter the rows returned" where: experiment_allowedcommand_bool_exp): experiment_allowedcommand_aggregate!
  "An object relationship"
  experiment_experimentcontext: experiment_experimentcontext
  id: Int!
  mycroft_channel_name: String
  mycroft_connection: Boolean!
  session_id: String
  user_id: Int
}
"""
aggregated selection of "daphne_context_userinformation"
"""
type daphne_context_userinformation_aggregate {
  aggregate: daphne_context_userinformation_aggregate_fields
  nodes: [daphne_context_userinformation!]!
}
"""
aggregate fields of "daphne_context_userinformation"
"""
type daphne_context_userinformation_aggregate_fields {
  avg: daphne_context_userinformation_avg_fields
  count(columns: [daphne_context_userinformation_select_column!], distinct: Boolean): Int!
  max: daphne_context_userinformation_max_fields
  min: daphne_context_userinformation_min_fields
  stddev: daphne_context_userinformation_stddev_fields
  stddev_pop: daphne_context_userinformation_stddev_pop_fields
  stddev_samp: daphne_context_userinformation_stddev_samp_fields
  sum: daphne_context_userinformation_sum_fields
  var_pop: daphne_context_userinformation_var_pop_fields
  var_samp: daphne_context_userinformation_var_samp_fields
  variance: daphne_context_userinformation_variance_fields
}
"""
order by aggregate values of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_aggregate_order_by {
  avg: daphne_context_userinformation_avg_order_by
  count: order_by
  max: daphne_context_userinformation_max_order_by
  min: daphne_context_userinformation_min_order_by
  stddev: daphne_context_userinformation_stddev_order_by
  stddev_pop: daphne_context_userinformation_stddev_pop_order_by
  stddev_samp: daphne_context_userinformation_stddev_samp_order_by
  sum: daphne_context_userinformation_sum_order_by
  var_pop: daphne_context_userinformation_var_pop_order_by
  var_samp: daphne_context_userinformation_var_samp_order_by
  variance: daphne_context_userinformation_variance_order_by
}
"""
input type for inserting array relation for remote table "daphne_context_userinformation"
"""
input daphne_context_userinformation_arr_rel_insert_input {
  data: [daphne_context_userinformation_insert_input!]!
  "on conflict condition"
  on_conflict: daphne_context_userinformation_on_conflict
}
"aggregate avg on columns"
type daphne_context_userinformation_avg_fields {
  id: Float
  user_id: Float
}
"""
order by avg() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_avg_order_by {
  id: order_by
  user_id: order_by
}
"""
Boolean expression to filter rows from the table "daphne_context_userinformation". All fields are combined with a logical 'AND'.
"""
input daphne_context_userinformation_bool_exp {
  EDL_edlcontext: EDL_edlcontext_bool_exp
  EOSS_eosscontext: EOSS_eosscontext_bool_exp
  _and: [daphne_context_userinformation_bool_exp!]
  _not: daphne_context_userinformation_bool_exp
  _or: [daphne_context_userinformation_bool_exp!]
  auth_user: auth_user_bool_exp
  channel_name: String_comparison_exp
  daphne_context_dialoguehistories: daphne_context_dialoguehistory_bool_exp
  daphne_version: String_comparison_exp
  django_session: django_session_bool_exp
  eval_request_queue: String_comparison_exp
  eval_response_queue: String_comparison_exp
  experiment_allowedcommands: experiment_allowedcommand_bool_exp
  experiment_experimentcontext: experiment_experimentcontext_bool_exp
  id: Int_comparison_exp
  mycroft_channel_name: String_comparison_exp
  mycroft_connection: Boolean_comparison_exp
  session_id: String_comparison_exp
  user_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "daphne_context_userinformation"
"""
enum daphne_context_userinformation_constraint {
  "unique or primary key constraint"
  daphne_context_userinformation_pkey
  "unique or primary key constraint"
  daphne_context_userinformation_session_id_user_id_ea8e029c_uniq
}
"""
input type for incrementing numeric columns in table "daphne_context_userinformation"
"""
input daphne_context_userinformation_inc_input {
  id: Int
  user_id: Int
}
"""
input type for inserting data into table "daphne_context_userinformation"
"""
input daphne_context_userinformation_insert_input {
  EDL_edlcontext: EDL_edlcontext_obj_rel_insert_input
  EOSS_eosscontext: EOSS_eosscontext_obj_rel_insert_input
  auth_user: auth_user_obj_rel_insert_input
  channel_name: String
  daphne_context_dialoguehistories: daphne_context_dialoguehistory_arr_rel_insert_input
  daphne_version: String
  django_session: django_session_obj_rel_insert_input
  eval_request_queue: String
  eval_response_queue: String
  experiment_allowedcommands: experiment_allowedcommand_arr_rel_insert_input
  experiment_experimentcontext: experiment_experimentcontext_obj_rel_insert_input
  id: Int
  mycroft_channel_name: String
  mycroft_connection: Boolean
  session_id: String
  user_id: Int
}
"aggregate max on columns"
type daphne_context_userinformation_max_fields {
  channel_name: String
  daphne_version: String
  eval_request_queue: String
  eval_response_queue: String
  id: Int
  mycroft_channel_name: String
  session_id: String
  user_id: Int
}
"""
order by max() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_max_order_by {
  channel_name: order_by
  daphne_version: order_by
  eval_request_queue: order_by
  eval_response_queue: order_by
  id: order_by
  mycroft_channel_name: order_by
  session_id: order_by
  user_id: order_by
}
"aggregate min on columns"
type daphne_context_userinformation_min_fields {
  channel_name: String
  daphne_version: String
  eval_request_queue: String
  eval_response_queue: String
  id: Int
  mycroft_channel_name: String
  session_id: String
  user_id: Int
}
"""
order by min() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_min_order_by {
  channel_name: order_by
  daphne_version: order_by
  eval_request_queue: order_by
  eval_response_queue: order_by
  id: order_by
  mycroft_channel_name: order_by
  session_id: order_by
  user_id: order_by
}
"""
response of any mutation on the table "daphne_context_userinformation"
"""
type daphne_context_userinformation_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [daphne_context_userinformation!]!
}
"""
input type for inserting object relation for remote table "daphne_context_userinformation"
"""
input daphne_context_userinformation_obj_rel_insert_input {
  data: daphne_context_userinformation_insert_input!
  "on conflict condition"
  on_conflict: daphne_context_userinformation_on_conflict
}
"""
on conflict condition type for table "daphne_context_userinformation"
"""
input daphne_context_userinformation_on_conflict {
  constraint: daphne_context_userinformation_constraint!
  update_columns: [daphne_context_userinformation_update_column!]! = []
  where: daphne_context_userinformation_bool_exp
}
"""
Ordering options when selecting data from "daphne_context_userinformation".
"""
input daphne_context_userinformation_order_by {
  EDL_edlcontext: EDL_edlcontext_order_by
  EOSS_eosscontext: EOSS_eosscontext_order_by
  auth_user: auth_user_order_by
  channel_name: order_by
  daphne_context_dialoguehistories_aggregate: daphne_context_dialoguehistory_aggregate_order_by
  daphne_version: order_by
  django_session: django_session_order_by
  eval_request_queue: order_by
  eval_response_queue: order_by
  experiment_allowedcommands_aggregate: experiment_allowedcommand_aggregate_order_by
  experiment_experimentcontext: experiment_experimentcontext_order_by
  id: order_by
  mycroft_channel_name: order_by
  mycroft_connection: order_by
  session_id: order_by
  user_id: order_by
}
"primary key columns input for table: daphne_context_userinformation"
input daphne_context_userinformation_pk_columns_input {
  id: Int!
}
"""
select columns of table "daphne_context_userinformation"
"""
enum daphne_context_userinformation_select_column {
  "column name"
  channel_name
  "column name"
  daphne_version
  "column name"
  eval_request_queue
  "column name"
  eval_response_queue
  "column name"
  id
  "column name"
  mycroft_channel_name
  "column name"
  mycroft_connection
  "column name"
  session_id
  "column name"
  user_id
}
"""
input type for updating data in table "daphne_context_userinformation"
"""
input daphne_context_userinformation_set_input {
  channel_name: String
  daphne_version: String
  eval_request_queue: String
  eval_response_queue: String
  id: Int
  mycroft_channel_name: String
  mycroft_connection: Boolean
  session_id: String
  user_id: Int
}
"aggregate stddev on columns"
type daphne_context_userinformation_stddev_fields {
  id: Float
  user_id: Float
}
"""
order by stddev() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_stddev_order_by {
  id: order_by
  user_id: order_by
}
"aggregate stddev_pop on columns"
type daphne_context_userinformation_stddev_pop_fields {
  id: Float
  user_id: Float
}
"""
order by stddev_pop() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_stddev_pop_order_by {
  id: order_by
  user_id: order_by
}
"aggregate stddev_samp on columns"
type daphne_context_userinformation_stddev_samp_fields {
  id: Float
  user_id: Float
}
"""
order by stddev_samp() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_stddev_samp_order_by {
  id: order_by
  user_id: order_by
}
"aggregate sum on columns"
type daphne_context_userinformation_sum_fields {
  id: Int
  user_id: Int
}
"""
order by sum() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_sum_order_by {
  id: order_by
  user_id: order_by
}
"""
update columns of table "daphne_context_userinformation"
"""
enum daphne_context_userinformation_update_column {
  "column name"
  channel_name
  "column name"
  daphne_version
  "column name"
  eval_request_queue
  "column name"
  eval_response_queue
  "column name"
  id
  "column name"
  mycroft_channel_name
  "column name"
  mycroft_connection
  "column name"
  session_id
  "column name"
  user_id
}
"aggregate var_pop on columns"
type daphne_context_userinformation_var_pop_fields {
  id: Float
  user_id: Float
}
"""
order by var_pop() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_var_pop_order_by {
  id: order_by
  user_id: order_by
}
"aggregate var_samp on columns"
type daphne_context_userinformation_var_samp_fields {
  id: Float
  user_id: Float
}
"""
order by var_samp() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_var_samp_order_by {
  id: order_by
  user_id: order_by
}
"aggregate variance on columns"
type daphne_context_userinformation_variance_fields {
  id: Float
  user_id: Float
}
"""
order by variance() on columns of table "daphne_context_userinformation"
"""
input daphne_context_userinformation_variance_order_by {
  id: order_by
  user_id: order_by
}
"""
columns and relationships of "django_admin_log"
"""
type django_admin_log {
  action_flag: smallint!
  action_time: timestamptz!
  "An object relationship"
  auth_user: auth_user!
  change_message: String!
  content_type_id: Int
  "An object relationship"
  django_content_type: django_content_type
  id: Int!
  object_id: String
  object_repr: String!
  user_id: Int!
}
"""
aggregated selection of "django_admin_log"
"""
type django_admin_log_aggregate {
  aggregate: django_admin_log_aggregate_fields
  nodes: [django_admin_log!]!
}
"""
aggregate fields of "django_admin_log"
"""
type django_admin_log_aggregate_fields {
  avg: django_admin_log_avg_fields
  count(columns: [django_admin_log_select_column!], distinct: Boolean): Int!
  max: django_admin_log_max_fields
  min: django_admin_log_min_fields
  stddev: django_admin_log_stddev_fields
  stddev_pop: django_admin_log_stddev_pop_fields
  stddev_samp: django_admin_log_stddev_samp_fields
  sum: django_admin_log_sum_fields
  var_pop: django_admin_log_var_pop_fields
  var_samp: django_admin_log_var_samp_fields
  variance: django_admin_log_variance_fields
}
"""
order by aggregate values of table "django_admin_log"
"""
input django_admin_log_aggregate_order_by {
  avg: django_admin_log_avg_order_by
  count: order_by
  max: django_admin_log_max_order_by
  min: django_admin_log_min_order_by
  stddev: django_admin_log_stddev_order_by
  stddev_pop: django_admin_log_stddev_pop_order_by
  stddev_samp: django_admin_log_stddev_samp_order_by
  sum: django_admin_log_sum_order_by
  var_pop: django_admin_log_var_pop_order_by
  var_samp: django_admin_log_var_samp_order_by
  variance: django_admin_log_variance_order_by
}
"""
input type for inserting array relation for remote table "django_admin_log"
"""
input django_admin_log_arr_rel_insert_input {
  data: [django_admin_log_insert_input!]!
  "on conflict condition"
  on_conflict: django_admin_log_on_conflict
}
"aggregate avg on columns"
type django_admin_log_avg_fields {
  action_flag: Float
  content_type_id: Float
  id: Float
  user_id: Float
}
"""
order by avg() on columns of table "django_admin_log"
"""
input django_admin_log_avg_order_by {
  action_flag: order_by
  content_type_id: order_by
  id: order_by
  user_id: order_by
}
"""
Boolean expression to filter rows from the table "django_admin_log". All fields are combined with a logical 'AND'.
"""
input django_admin_log_bool_exp {
  _and: [django_admin_log_bool_exp!]
  _not: django_admin_log_bool_exp
  _or: [django_admin_log_bool_exp!]
  action_flag: smallint_comparison_exp
  action_time: timestamptz_comparison_exp
  auth_user: auth_user_bool_exp
  change_message: String_comparison_exp
  content_type_id: Int_comparison_exp
  django_content_type: django_content_type_bool_exp
  id: Int_comparison_exp
  object_id: String_comparison_exp
  object_repr: String_comparison_exp
  user_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "django_admin_log"
"""
enum django_admin_log_constraint {
  "unique or primary key constraint"
  django_admin_log_pkey
}
"""
input type for incrementing numeric columns in table "django_admin_log"
"""
input django_admin_log_inc_input {
  action_flag: smallint
  content_type_id: Int
  id: Int
  user_id: Int
}
"""
input type for inserting data into table "django_admin_log"
"""
input django_admin_log_insert_input {
  action_flag: smallint
  action_time: timestamptz
  auth_user: auth_user_obj_rel_insert_input
  change_message: String
  content_type_id: Int
  django_content_type: django_content_type_obj_rel_insert_input
  id: Int
  object_id: String
  object_repr: String
  user_id: Int
}
"aggregate max on columns"
type django_admin_log_max_fields {
  action_flag: smallint
  action_time: timestamptz
  change_message: String
  content_type_id: Int
  id: Int
  object_id: String
  object_repr: String
  user_id: Int
}
"""
order by max() on columns of table "django_admin_log"
"""
input django_admin_log_max_order_by {
  action_flag: order_by
  action_time: order_by
  change_message: order_by
  content_type_id: order_by
  id: order_by
  object_id: order_by
  object_repr: order_by
  user_id: order_by
}
"aggregate min on columns"
type django_admin_log_min_fields {
  action_flag: smallint
  action_time: timestamptz
  change_message: String
  content_type_id: Int
  id: Int
  object_id: String
  object_repr: String
  user_id: Int
}
"""
order by min() on columns of table "django_admin_log"
"""
input django_admin_log_min_order_by {
  action_flag: order_by
  action_time: order_by
  change_message: order_by
  content_type_id: order_by
  id: order_by
  object_id: order_by
  object_repr: order_by
  user_id: order_by
}
"""
response of any mutation on the table "django_admin_log"
"""
type django_admin_log_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [django_admin_log!]!
}
"""
on conflict condition type for table "django_admin_log"
"""
input django_admin_log_on_conflict {
  constraint: django_admin_log_constraint!
  update_columns: [django_admin_log_update_column!]! = []
  where: django_admin_log_bool_exp
}
"""
Ordering options when selecting data from "django_admin_log".
"""
input django_admin_log_order_by {
  action_flag: order_by
  action_time: order_by
  auth_user: auth_user_order_by
  change_message: order_by
  content_type_id: order_by
  django_content_type: django_content_type_order_by
  id: order_by
  object_id: order_by
  object_repr: order_by
  user_id: order_by
}
"primary key columns input for table: django_admin_log"
input django_admin_log_pk_columns_input {
  id: Int!
}
"""
select columns of table "django_admin_log"
"""
enum django_admin_log_select_column {
  "column name"
  action_flag
  "column name"
  action_time
  "column name"
  change_message
  "column name"
  content_type_id
  "column name"
  id
  "column name"
  object_id
  "column name"
  object_repr
  "column name"
  user_id
}
"""
input type for updating data in table "django_admin_log"
"""
input django_admin_log_set_input {
  action_flag: smallint
  action_time: timestamptz
  change_message: String
  content_type_id: Int
  id: Int
  object_id: String
  object_repr: String
  user_id: Int
}
"aggregate stddev on columns"
type django_admin_log_stddev_fields {
  action_flag: Float
  content_type_id: Float
  id: Float
  user_id: Float
}
"""
order by stddev() on columns of table "django_admin_log"
"""
input django_admin_log_stddev_order_by {
  action_flag: order_by
  content_type_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate stddev_pop on columns"
type django_admin_log_stddev_pop_fields {
  action_flag: Float
  content_type_id: Float
  id: Float
  user_id: Float
}
"""
order by stddev_pop() on columns of table "django_admin_log"
"""
input django_admin_log_stddev_pop_order_by {
  action_flag: order_by
  content_type_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate stddev_samp on columns"
type django_admin_log_stddev_samp_fields {
  action_flag: Float
  content_type_id: Float
  id: Float
  user_id: Float
}
"""
order by stddev_samp() on columns of table "django_admin_log"
"""
input django_admin_log_stddev_samp_order_by {
  action_flag: order_by
  content_type_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate sum on columns"
type django_admin_log_sum_fields {
  action_flag: smallint
  content_type_id: Int
  id: Int
  user_id: Int
}
"""
order by sum() on columns of table "django_admin_log"
"""
input django_admin_log_sum_order_by {
  action_flag: order_by
  content_type_id: order_by
  id: order_by
  user_id: order_by
}
"""
update columns of table "django_admin_log"
"""
enum django_admin_log_update_column {
  "column name"
  action_flag
  "column name"
  action_time
  "column name"
  change_message
  "column name"
  content_type_id
  "column name"
  id
  "column name"
  object_id
  "column name"
  object_repr
  "column name"
  user_id
}
"aggregate var_pop on columns"
type django_admin_log_var_pop_fields {
  action_flag: Float
  content_type_id: Float
  id: Float
  user_id: Float
}
"""
order by var_pop() on columns of table "django_admin_log"
"""
input django_admin_log_var_pop_order_by {
  action_flag: order_by
  content_type_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate var_samp on columns"
type django_admin_log_var_samp_fields {
  action_flag: Float
  content_type_id: Float
  id: Float
  user_id: Float
}
"""
order by var_samp() on columns of table "django_admin_log"
"""
input django_admin_log_var_samp_order_by {
  action_flag: order_by
  content_type_id: order_by
  id: order_by
  user_id: order_by
}
"aggregate variance on columns"
type django_admin_log_variance_fields {
  action_flag: Float
  content_type_id: Float
  id: Float
  user_id: Float
}
"""
order by variance() on columns of table "django_admin_log"
"""
input django_admin_log_variance_order_by {
  action_flag: order_by
  content_type_id: order_by
  id: order_by
  user_id: order_by
}
"""
columns and relationships of "django_content_type"
"""
type django_content_type {
  app_label: String!
  "An array relationship"
  auth_permissions("distinct select on columns" distinct_on: [auth_permission_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_permission_order_by!], "filter the rows returned" where: auth_permission_bool_exp): [auth_permission!]!
  "An aggregate relationship"
  auth_permissions_aggregate("distinct select on columns" distinct_on: [auth_permission_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_permission_order_by!], "filter the rows returned" where: auth_permission_bool_exp): auth_permission_aggregate!
  "An array relationship"
  django_admin_logs("distinct select on columns" distinct_on: [django_admin_log_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_admin_log_order_by!], "filter the rows returned" where: django_admin_log_bool_exp): [django_admin_log!]!
  "An aggregate relationship"
  django_admin_logs_aggregate("distinct select on columns" distinct_on: [django_admin_log_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_admin_log_order_by!], "filter the rows returned" where: django_admin_log_bool_exp): django_admin_log_aggregate!
  id: Int!
  model: String!
}
"""
aggregated selection of "django_content_type"
"""
type django_content_type_aggregate {
  aggregate: django_content_type_aggregate_fields
  nodes: [django_content_type!]!
}
"""
aggregate fields of "django_content_type"
"""
type django_content_type_aggregate_fields {
  avg: django_content_type_avg_fields
  count(columns: [django_content_type_select_column!], distinct: Boolean): Int!
  max: django_content_type_max_fields
  min: django_content_type_min_fields
  stddev: django_content_type_stddev_fields
  stddev_pop: django_content_type_stddev_pop_fields
  stddev_samp: django_content_type_stddev_samp_fields
  sum: django_content_type_sum_fields
  var_pop: django_content_type_var_pop_fields
  var_samp: django_content_type_var_samp_fields
  variance: django_content_type_variance_fields
}
"aggregate avg on columns"
type django_content_type_avg_fields {
  id: Float
}
"""
Boolean expression to filter rows from the table "django_content_type". All fields are combined with a logical 'AND'.
"""
input django_content_type_bool_exp {
  _and: [django_content_type_bool_exp!]
  _not: django_content_type_bool_exp
  _or: [django_content_type_bool_exp!]
  app_label: String_comparison_exp
  auth_permissions: auth_permission_bool_exp
  django_admin_logs: django_admin_log_bool_exp
  id: Int_comparison_exp
  model: String_comparison_exp
}
"""
unique or primary key constraints on table "django_content_type"
"""
enum django_content_type_constraint {
  "unique or primary key constraint"
  django_content_type_app_label_model_76bd3d3b_uniq
  "unique or primary key constraint"
  django_content_type_pkey
}
"""
input type for incrementing numeric columns in table "django_content_type"
"""
input django_content_type_inc_input {
  id: Int
}
"""
input type for inserting data into table "django_content_type"
"""
input django_content_type_insert_input {
  app_label: String
  auth_permissions: auth_permission_arr_rel_insert_input
  django_admin_logs: django_admin_log_arr_rel_insert_input
  id: Int
  model: String
}
"aggregate max on columns"
type django_content_type_max_fields {
  app_label: String
  id: Int
  model: String
}
"aggregate min on columns"
type django_content_type_min_fields {
  app_label: String
  id: Int
  model: String
}
"""
response of any mutation on the table "django_content_type"
"""
type django_content_type_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [django_content_type!]!
}
"""
input type for inserting object relation for remote table "django_content_type"
"""
input django_content_type_obj_rel_insert_input {
  data: django_content_type_insert_input!
  "on conflict condition"
  on_conflict: django_content_type_on_conflict
}
"""
on conflict condition type for table "django_content_type"
"""
input django_content_type_on_conflict {
  constraint: django_content_type_constraint!
  update_columns: [django_content_type_update_column!]! = []
  where: django_content_type_bool_exp
}
"""
Ordering options when selecting data from "django_content_type".
"""
input django_content_type_order_by {
  app_label: order_by
  auth_permissions_aggregate: auth_permission_aggregate_order_by
  django_admin_logs_aggregate: django_admin_log_aggregate_order_by
  id: order_by
  model: order_by
}
"primary key columns input for table: django_content_type"
input django_content_type_pk_columns_input {
  id: Int!
}
"""
select columns of table "django_content_type"
"""
enum django_content_type_select_column {
  "column name"
  app_label
  "column name"
  id
  "column name"
  model
}
"""
input type for updating data in table "django_content_type"
"""
input django_content_type_set_input {
  app_label: String
  id: Int
  model: String
}
"aggregate stddev on columns"
type django_content_type_stddev_fields {
  id: Float
}
"aggregate stddev_pop on columns"
type django_content_type_stddev_pop_fields {
  id: Float
}
"aggregate stddev_samp on columns"
type django_content_type_stddev_samp_fields {
  id: Float
}
"aggregate sum on columns"
type django_content_type_sum_fields {
  id: Int
}
"""
update columns of table "django_content_type"
"""
enum django_content_type_update_column {
  "column name"
  app_label
  "column name"
  id
  "column name"
  model
}
"aggregate var_pop on columns"
type django_content_type_var_pop_fields {
  id: Float
}
"aggregate var_samp on columns"
type django_content_type_var_samp_fields {
  id: Float
}
"aggregate variance on columns"
type django_content_type_variance_fields {
  id: Float
}
"""
columns and relationships of "django_migrations"
"""
type django_migrations {
  app: String!
  applied: timestamptz!
  id: Int!
  name: String!
}
"""
aggregated selection of "django_migrations"
"""
type django_migrations_aggregate {
  aggregate: django_migrations_aggregate_fields
  nodes: [django_migrations!]!
}
"""
aggregate fields of "django_migrations"
"""
type django_migrations_aggregate_fields {
  avg: django_migrations_avg_fields
  count(columns: [django_migrations_select_column!], distinct: Boolean): Int!
  max: django_migrations_max_fields
  min: django_migrations_min_fields
  stddev: django_migrations_stddev_fields
  stddev_pop: django_migrations_stddev_pop_fields
  stddev_samp: django_migrations_stddev_samp_fields
  sum: django_migrations_sum_fields
  var_pop: django_migrations_var_pop_fields
  var_samp: django_migrations_var_samp_fields
  variance: django_migrations_variance_fields
}
"aggregate avg on columns"
type django_migrations_avg_fields {
  id: Float
}
"""
Boolean expression to filter rows from the table "django_migrations". All fields are combined with a logical 'AND'.
"""
input django_migrations_bool_exp {
  _and: [django_migrations_bool_exp!]
  _not: django_migrations_bool_exp
  _or: [django_migrations_bool_exp!]
  app: String_comparison_exp
  applied: timestamptz_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}
"""
unique or primary key constraints on table "django_migrations"
"""
enum django_migrations_constraint {
  "unique or primary key constraint"
  django_migrations_pkey
}
"""
input type for incrementing numeric columns in table "django_migrations"
"""
input django_migrations_inc_input {
  id: Int
}
"""
input type for inserting data into table "django_migrations"
"""
input django_migrations_insert_input {
  app: String
  applied: timestamptz
  id: Int
  name: String
}
"aggregate max on columns"
type django_migrations_max_fields {
  app: String
  applied: timestamptz
  id: Int
  name: String
}
"aggregate min on columns"
type django_migrations_min_fields {
  app: String
  applied: timestamptz
  id: Int
  name: String
}
"""
response of any mutation on the table "django_migrations"
"""
type django_migrations_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [django_migrations!]!
}
"""
on conflict condition type for table "django_migrations"
"""
input django_migrations_on_conflict {
  constraint: django_migrations_constraint!
  update_columns: [django_migrations_update_column!]! = []
  where: django_migrations_bool_exp
}
"""
Ordering options when selecting data from "django_migrations".
"""
input django_migrations_order_by {
  app: order_by
  applied: order_by
  id: order_by
  name: order_by
}
"primary key columns input for table: django_migrations"
input django_migrations_pk_columns_input {
  id: Int!
}
"""
select columns of table "django_migrations"
"""
enum django_migrations_select_column {
  "column name"
  app
  "column name"
  applied
  "column name"
  id
  "column name"
  name
}
"""
input type for updating data in table "django_migrations"
"""
input django_migrations_set_input {
  app: String
  applied: timestamptz
  id: Int
  name: String
}
"aggregate stddev on columns"
type django_migrations_stddev_fields {
  id: Float
}
"aggregate stddev_pop on columns"
type django_migrations_stddev_pop_fields {
  id: Float
}
"aggregate stddev_samp on columns"
type django_migrations_stddev_samp_fields {
  id: Float
}
"aggregate sum on columns"
type django_migrations_sum_fields {
  id: Int
}
"""
update columns of table "django_migrations"
"""
enum django_migrations_update_column {
  "column name"
  app
  "column name"
  applied
  "column name"
  id
  "column name"
  name
}
"aggregate var_pop on columns"
type django_migrations_var_pop_fields {
  id: Float
}
"aggregate var_samp on columns"
type django_migrations_var_samp_fields {
  id: Float
}
"aggregate variance on columns"
type django_migrations_variance_fields {
  id: Float
}
"""
columns and relationships of "django_session"
"""
type django_session {
  "An array relationship"
  daphne_context_userinformations("distinct select on columns" distinct_on: [daphne_context_userinformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_userinformation_order_by!], "filter the rows returned" where: daphne_context_userinformation_bool_exp): [daphne_context_userinformation!]!
  "An aggregate relationship"
  daphne_context_userinformations_aggregate("distinct select on columns" distinct_on: [daphne_context_userinformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_userinformation_order_by!], "filter the rows returned" where: daphne_context_userinformation_bool_exp): daphne_context_userinformation_aggregate!
  expire_date: timestamptz!
  session_data: String!
  session_key: String!
}
"""
aggregated selection of "django_session"
"""
type django_session_aggregate {
  aggregate: django_session_aggregate_fields
  nodes: [django_session!]!
}
"""
aggregate fields of "django_session"
"""
type django_session_aggregate_fields {
  count(columns: [django_session_select_column!], distinct: Boolean): Int!
  max: django_session_max_fields
  min: django_session_min_fields
}
"""
Boolean expression to filter rows from the table "django_session". All fields are combined with a logical 'AND'.
"""
input django_session_bool_exp {
  _and: [django_session_bool_exp!]
  _not: django_session_bool_exp
  _or: [django_session_bool_exp!]
  daphne_context_userinformations: daphne_context_userinformation_bool_exp
  expire_date: timestamptz_comparison_exp
  session_data: String_comparison_exp
  session_key: String_comparison_exp
}
"""
unique or primary key constraints on table "django_session"
"""
enum django_session_constraint {
  "unique or primary key constraint"
  django_session_pkey
}
"""
input type for inserting data into table "django_session"
"""
input django_session_insert_input {
  daphne_context_userinformations: daphne_context_userinformation_arr_rel_insert_input
  expire_date: timestamptz
  session_data: String
  session_key: String
}
"aggregate max on columns"
type django_session_max_fields {
  expire_date: timestamptz
  session_data: String
  session_key: String
}
"aggregate min on columns"
type django_session_min_fields {
  expire_date: timestamptz
  session_data: String
  session_key: String
}
"""
response of any mutation on the table "django_session"
"""
type django_session_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [django_session!]!
}
"""
input type for inserting object relation for remote table "django_session"
"""
input django_session_obj_rel_insert_input {
  data: django_session_insert_input!
  "on conflict condition"
  on_conflict: django_session_on_conflict
}
"""
on conflict condition type for table "django_session"
"""
input django_session_on_conflict {
  constraint: django_session_constraint!
  update_columns: [django_session_update_column!]! = []
  where: django_session_bool_exp
}
"""
Ordering options when selecting data from "django_session".
"""
input django_session_order_by {
  daphne_context_userinformations_aggregate: daphne_context_userinformation_aggregate_order_by
  expire_date: order_by
  session_data: order_by
  session_key: order_by
}
"primary key columns input for table: django_session"
input django_session_pk_columns_input {
  session_key: String!
}
"""
select columns of table "django_session"
"""
enum django_session_select_column {
  "column name"
  expire_date
  "column name"
  session_data
  "column name"
  session_key
}
"""
input type for updating data in table "django_session"
"""
input django_session_set_input {
  expire_date: timestamptz
  session_data: String
  session_key: String
}
"""
update columns of table "django_session"
"""
enum django_session_update_column {
  "column name"
  expire_date
  "column name"
  session_data
  "column name"
  session_key
}
"""
columns and relationships of "experiment_allowedcommand"
"""
type experiment_allowedcommand {
  command_descriptor: Int!
  command_type: String!
  "An object relationship"
  daphne_context_userinformation: daphne_context_userinformation!
  id: Int!
  user_information_id: Int!
}
"""
aggregated selection of "experiment_allowedcommand"
"""
type experiment_allowedcommand_aggregate {
  aggregate: experiment_allowedcommand_aggregate_fields
  nodes: [experiment_allowedcommand!]!
}
"""
aggregate fields of "experiment_allowedcommand"
"""
type experiment_allowedcommand_aggregate_fields {
  avg: experiment_allowedcommand_avg_fields
  count(columns: [experiment_allowedcommand_select_column!], distinct: Boolean): Int!
  max: experiment_allowedcommand_max_fields
  min: experiment_allowedcommand_min_fields
  stddev: experiment_allowedcommand_stddev_fields
  stddev_pop: experiment_allowedcommand_stddev_pop_fields
  stddev_samp: experiment_allowedcommand_stddev_samp_fields
  sum: experiment_allowedcommand_sum_fields
  var_pop: experiment_allowedcommand_var_pop_fields
  var_samp: experiment_allowedcommand_var_samp_fields
  variance: experiment_allowedcommand_variance_fields
}
"""
order by aggregate values of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_aggregate_order_by {
  avg: experiment_allowedcommand_avg_order_by
  count: order_by
  max: experiment_allowedcommand_max_order_by
  min: experiment_allowedcommand_min_order_by
  stddev: experiment_allowedcommand_stddev_order_by
  stddev_pop: experiment_allowedcommand_stddev_pop_order_by
  stddev_samp: experiment_allowedcommand_stddev_samp_order_by
  sum: experiment_allowedcommand_sum_order_by
  var_pop: experiment_allowedcommand_var_pop_order_by
  var_samp: experiment_allowedcommand_var_samp_order_by
  variance: experiment_allowedcommand_variance_order_by
}
"""
input type for inserting array relation for remote table "experiment_allowedcommand"
"""
input experiment_allowedcommand_arr_rel_insert_input {
  data: [experiment_allowedcommand_insert_input!]!
  "on conflict condition"
  on_conflict: experiment_allowedcommand_on_conflict
}
"aggregate avg on columns"
type experiment_allowedcommand_avg_fields {
  command_descriptor: Float
  id: Float
  user_information_id: Float
}
"""
order by avg() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_avg_order_by {
  command_descriptor: order_by
  id: order_by
  user_information_id: order_by
}
"""
Boolean expression to filter rows from the table "experiment_allowedcommand". All fields are combined with a logical 'AND'.
"""
input experiment_allowedcommand_bool_exp {
  _and: [experiment_allowedcommand_bool_exp!]
  _not: experiment_allowedcommand_bool_exp
  _or: [experiment_allowedcommand_bool_exp!]
  command_descriptor: Int_comparison_exp
  command_type: String_comparison_exp
  daphne_context_userinformation: daphne_context_userinformation_bool_exp
  id: Int_comparison_exp
  user_information_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "experiment_allowedcommand"
"""
enum experiment_allowedcommand_constraint {
  "unique or primary key constraint"
  experiment_allowedcommand_pkey
}
"""
input type for incrementing numeric columns in table "experiment_allowedcommand"
"""
input experiment_allowedcommand_inc_input {
  command_descriptor: Int
  id: Int
  user_information_id: Int
}
"""
input type for inserting data into table "experiment_allowedcommand"
"""
input experiment_allowedcommand_insert_input {
  command_descriptor: Int
  command_type: String
  daphne_context_userinformation: daphne_context_userinformation_obj_rel_insert_input
  id: Int
  user_information_id: Int
}
"aggregate max on columns"
type experiment_allowedcommand_max_fields {
  command_descriptor: Int
  command_type: String
  id: Int
  user_information_id: Int
}
"""
order by max() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_max_order_by {
  command_descriptor: order_by
  command_type: order_by
  id: order_by
  user_information_id: order_by
}
"aggregate min on columns"
type experiment_allowedcommand_min_fields {
  command_descriptor: Int
  command_type: String
  id: Int
  user_information_id: Int
}
"""
order by min() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_min_order_by {
  command_descriptor: order_by
  command_type: order_by
  id: order_by
  user_information_id: order_by
}
"""
response of any mutation on the table "experiment_allowedcommand"
"""
type experiment_allowedcommand_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [experiment_allowedcommand!]!
}
"""
on conflict condition type for table "experiment_allowedcommand"
"""
input experiment_allowedcommand_on_conflict {
  constraint: experiment_allowedcommand_constraint!
  update_columns: [experiment_allowedcommand_update_column!]! = []
  where: experiment_allowedcommand_bool_exp
}
"""
Ordering options when selecting data from "experiment_allowedcommand".
"""
input experiment_allowedcommand_order_by {
  command_descriptor: order_by
  command_type: order_by
  daphne_context_userinformation: daphne_context_userinformation_order_by
  id: order_by
  user_information_id: order_by
}
"primary key columns input for table: experiment_allowedcommand"
input experiment_allowedcommand_pk_columns_input {
  id: Int!
}
"""
select columns of table "experiment_allowedcommand"
"""
enum experiment_allowedcommand_select_column {
  "column name"
  command_descriptor
  "column name"
  command_type
  "column name"
  id
  "column name"
  user_information_id
}
"""
input type for updating data in table "experiment_allowedcommand"
"""
input experiment_allowedcommand_set_input {
  command_descriptor: Int
  command_type: String
  id: Int
  user_information_id: Int
}
"aggregate stddev on columns"
type experiment_allowedcommand_stddev_fields {
  command_descriptor: Float
  id: Float
  user_information_id: Float
}
"""
order by stddev() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_stddev_order_by {
  command_descriptor: order_by
  id: order_by
  user_information_id: order_by
}
"aggregate stddev_pop on columns"
type experiment_allowedcommand_stddev_pop_fields {
  command_descriptor: Float
  id: Float
  user_information_id: Float
}
"""
order by stddev_pop() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_stddev_pop_order_by {
  command_descriptor: order_by
  id: order_by
  user_information_id: order_by
}
"aggregate stddev_samp on columns"
type experiment_allowedcommand_stddev_samp_fields {
  command_descriptor: Float
  id: Float
  user_information_id: Float
}
"""
order by stddev_samp() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_stddev_samp_order_by {
  command_descriptor: order_by
  id: order_by
  user_information_id: order_by
}
"aggregate sum on columns"
type experiment_allowedcommand_sum_fields {
  command_descriptor: Int
  id: Int
  user_information_id: Int
}
"""
order by sum() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_sum_order_by {
  command_descriptor: order_by
  id: order_by
  user_information_id: order_by
}
"""
update columns of table "experiment_allowedcommand"
"""
enum experiment_allowedcommand_update_column {
  "column name"
  command_descriptor
  "column name"
  command_type
  "column name"
  id
  "column name"
  user_information_id
}
"aggregate var_pop on columns"
type experiment_allowedcommand_var_pop_fields {
  command_descriptor: Float
  id: Float
  user_information_id: Float
}
"""
order by var_pop() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_var_pop_order_by {
  command_descriptor: order_by
  id: order_by
  user_information_id: order_by
}
"aggregate var_samp on columns"
type experiment_allowedcommand_var_samp_fields {
  command_descriptor: Float
  id: Float
  user_information_id: Float
}
"""
order by var_samp() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_var_samp_order_by {
  command_descriptor: order_by
  id: order_by
  user_information_id: order_by
}
"aggregate variance on columns"
type experiment_allowedcommand_variance_fields {
  command_descriptor: Float
  id: Float
  user_information_id: Float
}
"""
order by variance() on columns of table "experiment_allowedcommand"
"""
input experiment_allowedcommand_variance_order_by {
  command_descriptor: order_by
  id: order_by
  user_information_id: order_by
}
"""
columns and relationships of "experiment_experimentaction"
"""
type experiment_experimentaction {
  action: String!
  date: timestamptz!
  "An object relationship"
  experiment_experimentstage: experiment_experimentstage!
  experimentstage_id: Int!
  id: Int!
}
"""
aggregated selection of "experiment_experimentaction"
"""
type experiment_experimentaction_aggregate {
  aggregate: experiment_experimentaction_aggregate_fields
  nodes: [experiment_experimentaction!]!
}
"""
aggregate fields of "experiment_experimentaction"
"""
type experiment_experimentaction_aggregate_fields {
  avg: experiment_experimentaction_avg_fields
  count(columns: [experiment_experimentaction_select_column!], distinct: Boolean): Int!
  max: experiment_experimentaction_max_fields
  min: experiment_experimentaction_min_fields
  stddev: experiment_experimentaction_stddev_fields
  stddev_pop: experiment_experimentaction_stddev_pop_fields
  stddev_samp: experiment_experimentaction_stddev_samp_fields
  sum: experiment_experimentaction_sum_fields
  var_pop: experiment_experimentaction_var_pop_fields
  var_samp: experiment_experimentaction_var_samp_fields
  variance: experiment_experimentaction_variance_fields
}
"""
order by aggregate values of table "experiment_experimentaction"
"""
input experiment_experimentaction_aggregate_order_by {
  avg: experiment_experimentaction_avg_order_by
  count: order_by
  max: experiment_experimentaction_max_order_by
  min: experiment_experimentaction_min_order_by
  stddev: experiment_experimentaction_stddev_order_by
  stddev_pop: experiment_experimentaction_stddev_pop_order_by
  stddev_samp: experiment_experimentaction_stddev_samp_order_by
  sum: experiment_experimentaction_sum_order_by
  var_pop: experiment_experimentaction_var_pop_order_by
  var_samp: experiment_experimentaction_var_samp_order_by
  variance: experiment_experimentaction_variance_order_by
}
"""
input type for inserting array relation for remote table "experiment_experimentaction"
"""
input experiment_experimentaction_arr_rel_insert_input {
  data: [experiment_experimentaction_insert_input!]!
  "on conflict condition"
  on_conflict: experiment_experimentaction_on_conflict
}
"aggregate avg on columns"
type experiment_experimentaction_avg_fields {
  experimentstage_id: Float
  id: Float
}
"""
order by avg() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_avg_order_by {
  experimentstage_id: order_by
  id: order_by
}
"""
Boolean expression to filter rows from the table "experiment_experimentaction". All fields are combined with a logical 'AND'.
"""
input experiment_experimentaction_bool_exp {
  _and: [experiment_experimentaction_bool_exp!]
  _not: experiment_experimentaction_bool_exp
  _or: [experiment_experimentaction_bool_exp!]
  action: String_comparison_exp
  date: timestamptz_comparison_exp
  experiment_experimentstage: experiment_experimentstage_bool_exp
  experimentstage_id: Int_comparison_exp
  id: Int_comparison_exp
}
"""
unique or primary key constraints on table "experiment_experimentaction"
"""
enum experiment_experimentaction_constraint {
  "unique or primary key constraint"
  experiment_experimentaction_pkey
}
"""
input type for incrementing numeric columns in table "experiment_experimentaction"
"""
input experiment_experimentaction_inc_input {
  experimentstage_id: Int
  id: Int
}
"""
input type for inserting data into table "experiment_experimentaction"
"""
input experiment_experimentaction_insert_input {
  action: String
  date: timestamptz
  experiment_experimentstage: experiment_experimentstage_obj_rel_insert_input
  experimentstage_id: Int
  id: Int
}
"aggregate max on columns"
type experiment_experimentaction_max_fields {
  action: String
  date: timestamptz
  experimentstage_id: Int
  id: Int
}
"""
order by max() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_max_order_by {
  action: order_by
  date: order_by
  experimentstage_id: order_by
  id: order_by
}
"aggregate min on columns"
type experiment_experimentaction_min_fields {
  action: String
  date: timestamptz
  experimentstage_id: Int
  id: Int
}
"""
order by min() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_min_order_by {
  action: order_by
  date: order_by
  experimentstage_id: order_by
  id: order_by
}
"""
response of any mutation on the table "experiment_experimentaction"
"""
type experiment_experimentaction_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [experiment_experimentaction!]!
}
"""
on conflict condition type for table "experiment_experimentaction"
"""
input experiment_experimentaction_on_conflict {
  constraint: experiment_experimentaction_constraint!
  update_columns: [experiment_experimentaction_update_column!]! = []
  where: experiment_experimentaction_bool_exp
}
"""
Ordering options when selecting data from "experiment_experimentaction".
"""
input experiment_experimentaction_order_by {
  action: order_by
  date: order_by
  experiment_experimentstage: experiment_experimentstage_order_by
  experimentstage_id: order_by
  id: order_by
}
"primary key columns input for table: experiment_experimentaction"
input experiment_experimentaction_pk_columns_input {
  id: Int!
}
"""
select columns of table "experiment_experimentaction"
"""
enum experiment_experimentaction_select_column {
  "column name"
  action
  "column name"
  date
  "column name"
  experimentstage_id
  "column name"
  id
}
"""
input type for updating data in table "experiment_experimentaction"
"""
input experiment_experimentaction_set_input {
  action: String
  date: timestamptz
  experimentstage_id: Int
  id: Int
}
"aggregate stddev on columns"
type experiment_experimentaction_stddev_fields {
  experimentstage_id: Float
  id: Float
}
"""
order by stddev() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_stddev_order_by {
  experimentstage_id: order_by
  id: order_by
}
"aggregate stddev_pop on columns"
type experiment_experimentaction_stddev_pop_fields {
  experimentstage_id: Float
  id: Float
}
"""
order by stddev_pop() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_stddev_pop_order_by {
  experimentstage_id: order_by
  id: order_by
}
"aggregate stddev_samp on columns"
type experiment_experimentaction_stddev_samp_fields {
  experimentstage_id: Float
  id: Float
}
"""
order by stddev_samp() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_stddev_samp_order_by {
  experimentstage_id: order_by
  id: order_by
}
"aggregate sum on columns"
type experiment_experimentaction_sum_fields {
  experimentstage_id: Int
  id: Int
}
"""
order by sum() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_sum_order_by {
  experimentstage_id: order_by
  id: order_by
}
"""
update columns of table "experiment_experimentaction"
"""
enum experiment_experimentaction_update_column {
  "column name"
  action
  "column name"
  date
  "column name"
  experimentstage_id
  "column name"
  id
}
"aggregate var_pop on columns"
type experiment_experimentaction_var_pop_fields {
  experimentstage_id: Float
  id: Float
}
"""
order by var_pop() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_var_pop_order_by {
  experimentstage_id: order_by
  id: order_by
}
"aggregate var_samp on columns"
type experiment_experimentaction_var_samp_fields {
  experimentstage_id: Float
  id: Float
}
"""
order by var_samp() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_var_samp_order_by {
  experimentstage_id: order_by
  id: order_by
}
"aggregate variance on columns"
type experiment_experimentaction_variance_fields {
  experimentstage_id: Float
  id: Float
}
"""
order by variance() on columns of table "experiment_experimentaction"
"""
input experiment_experimentaction_variance_order_by {
  experimentstage_id: order_by
  id: order_by
}
"""
columns and relationships of "experiment_experimentcontext"
"""
type experiment_experimentcontext {
  current_state: String!
  "An object relationship"
  daphne_context_userinformation: daphne_context_userinformation!
  "An array relationship"
  experiment_experimentstages("distinct select on columns" distinct_on: [experiment_experimentstage_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentstage_order_by!], "filter the rows returned" where: experiment_experimentstage_bool_exp): [experiment_experimentstage!]!
  "An aggregate relationship"
  experiment_experimentstages_aggregate("distinct select on columns" distinct_on: [experiment_experimentstage_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentstage_order_by!], "filter the rows returned" where: experiment_experimentstage_bool_exp): experiment_experimentstage_aggregate!
  experiment_id: Int!
  id: Int!
  is_running: Boolean!
  user_information_id: Int!
}
"""
aggregated selection of "experiment_experimentcontext"
"""
type experiment_experimentcontext_aggregate {
  aggregate: experiment_experimentcontext_aggregate_fields
  nodes: [experiment_experimentcontext!]!
}
"""
aggregate fields of "experiment_experimentcontext"
"""
type experiment_experimentcontext_aggregate_fields {
  avg: experiment_experimentcontext_avg_fields
  count(columns: [experiment_experimentcontext_select_column!], distinct: Boolean): Int!
  max: experiment_experimentcontext_max_fields
  min: experiment_experimentcontext_min_fields
  stddev: experiment_experimentcontext_stddev_fields
  stddev_pop: experiment_experimentcontext_stddev_pop_fields
  stddev_samp: experiment_experimentcontext_stddev_samp_fields
  sum: experiment_experimentcontext_sum_fields
  var_pop: experiment_experimentcontext_var_pop_fields
  var_samp: experiment_experimentcontext_var_samp_fields
  variance: experiment_experimentcontext_variance_fields
}
"aggregate avg on columns"
type experiment_experimentcontext_avg_fields {
  experiment_id: Float
  id: Float
  user_information_id: Float
}
"""
Boolean expression to filter rows from the table "experiment_experimentcontext". All fields are combined with a logical 'AND'.
"""
input experiment_experimentcontext_bool_exp {
  _and: [experiment_experimentcontext_bool_exp!]
  _not: experiment_experimentcontext_bool_exp
  _or: [experiment_experimentcontext_bool_exp!]
  current_state: String_comparison_exp
  daphne_context_userinformation: daphne_context_userinformation_bool_exp
  experiment_experimentstages: experiment_experimentstage_bool_exp
  experiment_id: Int_comparison_exp
  id: Int_comparison_exp
  is_running: Boolean_comparison_exp
  user_information_id: Int_comparison_exp
}
"""
unique or primary key constraints on table "experiment_experimentcontext"
"""
enum experiment_experimentcontext_constraint {
  "unique or primary key constraint"
  experiment_experimentcontext_pkey
  "unique or primary key constraint"
  experiment_experimentcontext_user_information_id_key
}
"""
input type for incrementing numeric columns in table "experiment_experimentcontext"
"""
input experiment_experimentcontext_inc_input {
  experiment_id: Int
  id: Int
  user_information_id: Int
}
"""
input type for inserting data into table "experiment_experimentcontext"
"""
input experiment_experimentcontext_insert_input {
  current_state: String
  daphne_context_userinformation: daphne_context_userinformation_obj_rel_insert_input
  experiment_experimentstages: experiment_experimentstage_arr_rel_insert_input
  experiment_id: Int
  id: Int
  is_running: Boolean
  user_information_id: Int
}
"aggregate max on columns"
type experiment_experimentcontext_max_fields {
  current_state: String
  experiment_id: Int
  id: Int
  user_information_id: Int
}
"aggregate min on columns"
type experiment_experimentcontext_min_fields {
  current_state: String
  experiment_id: Int
  id: Int
  user_information_id: Int
}
"""
response of any mutation on the table "experiment_experimentcontext"
"""
type experiment_experimentcontext_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [experiment_experimentcontext!]!
}
"""
input type for inserting object relation for remote table "experiment_experimentcontext"
"""
input experiment_experimentcontext_obj_rel_insert_input {
  data: experiment_experimentcontext_insert_input!
  "on conflict condition"
  on_conflict: experiment_experimentcontext_on_conflict
}
"""
on conflict condition type for table "experiment_experimentcontext"
"""
input experiment_experimentcontext_on_conflict {
  constraint: experiment_experimentcontext_constraint!
  update_columns: [experiment_experimentcontext_update_column!]! = []
  where: experiment_experimentcontext_bool_exp
}
"""
Ordering options when selecting data from "experiment_experimentcontext".
"""
input experiment_experimentcontext_order_by {
  current_state: order_by
  daphne_context_userinformation: daphne_context_userinformation_order_by
  experiment_experimentstages_aggregate: experiment_experimentstage_aggregate_order_by
  experiment_id: order_by
  id: order_by
  is_running: order_by
  user_information_id: order_by
}
"primary key columns input for table: experiment_experimentcontext"
input experiment_experimentcontext_pk_columns_input {
  id: Int!
}
"""
select columns of table "experiment_experimentcontext"
"""
enum experiment_experimentcontext_select_column {
  "column name"
  current_state
  "column name"
  experiment_id
  "column name"
  id
  "column name"
  is_running
  "column name"
  user_information_id
}
"""
input type for updating data in table "experiment_experimentcontext"
"""
input experiment_experimentcontext_set_input {
  current_state: String
  experiment_id: Int
  id: Int
  is_running: Boolean
  user_information_id: Int
}
"aggregate stddev on columns"
type experiment_experimentcontext_stddev_fields {
  experiment_id: Float
  id: Float
  user_information_id: Float
}
"aggregate stddev_pop on columns"
type experiment_experimentcontext_stddev_pop_fields {
  experiment_id: Float
  id: Float
  user_information_id: Float
}
"aggregate stddev_samp on columns"
type experiment_experimentcontext_stddev_samp_fields {
  experiment_id: Float
  id: Float
  user_information_id: Float
}
"aggregate sum on columns"
type experiment_experimentcontext_sum_fields {
  experiment_id: Int
  id: Int
  user_information_id: Int
}
"""
update columns of table "experiment_experimentcontext"
"""
enum experiment_experimentcontext_update_column {
  "column name"
  current_state
  "column name"
  experiment_id
  "column name"
  id
  "column name"
  is_running
  "column name"
  user_information_id
}
"aggregate var_pop on columns"
type experiment_experimentcontext_var_pop_fields {
  experiment_id: Float
  id: Float
  user_information_id: Float
}
"aggregate var_samp on columns"
type experiment_experimentcontext_var_samp_fields {
  experiment_id: Float
  id: Float
  user_information_id: Float
}
"aggregate variance on columns"
type experiment_experimentcontext_variance_fields {
  experiment_id: Float
  id: Float
  user_information_id: Float
}
"""
columns and relationships of "experiment_experimentstage"
"""
type experiment_experimentstage {
  end_date: timestamptz!
  end_state: String!
  "An array relationship"
  experiment_experimentactions("distinct select on columns" distinct_on: [experiment_experimentaction_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentaction_order_by!], "filter the rows returned" where: experiment_experimentaction_bool_exp): [experiment_experimentaction!]!
  "An aggregate relationship"
  experiment_experimentactions_aggregate("distinct select on columns" distinct_on: [experiment_experimentaction_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentaction_order_by!], "filter the rows returned" where: experiment_experimentaction_bool_exp): experiment_experimentaction_aggregate!
  "An object relationship"
  experiment_experimentcontext: experiment_experimentcontext!
  experimentcontext_id: Int!
  id: Int!
  problem_id: Int
  start_date: timestamptz!
  type: String!
}
"""
aggregated selection of "experiment_experimentstage"
"""
type experiment_experimentstage_aggregate {
  aggregate: experiment_experimentstage_aggregate_fields
  nodes: [experiment_experimentstage!]!
}
"""
aggregate fields of "experiment_experimentstage"
"""
type experiment_experimentstage_aggregate_fields {
  avg: experiment_experimentstage_avg_fields
  count(columns: [experiment_experimentstage_select_column!], distinct: Boolean): Int!
  max: experiment_experimentstage_max_fields
  min: experiment_experimentstage_min_fields
  stddev: experiment_experimentstage_stddev_fields
  stddev_pop: experiment_experimentstage_stddev_pop_fields
  stddev_samp: experiment_experimentstage_stddev_samp_fields
  sum: experiment_experimentstage_sum_fields
  var_pop: experiment_experimentstage_var_pop_fields
  var_samp: experiment_experimentstage_var_samp_fields
  variance: experiment_experimentstage_variance_fields
}
"""
order by aggregate values of table "experiment_experimentstage"
"""
input experiment_experimentstage_aggregate_order_by {
  avg: experiment_experimentstage_avg_order_by
  count: order_by
  max: experiment_experimentstage_max_order_by
  min: experiment_experimentstage_min_order_by
  stddev: experiment_experimentstage_stddev_order_by
  stddev_pop: experiment_experimentstage_stddev_pop_order_by
  stddev_samp: experiment_experimentstage_stddev_samp_order_by
  sum: experiment_experimentstage_sum_order_by
  var_pop: experiment_experimentstage_var_pop_order_by
  var_samp: experiment_experimentstage_var_samp_order_by
  variance: experiment_experimentstage_variance_order_by
}
"""
input type for inserting array relation for remote table "experiment_experimentstage"
"""
input experiment_experimentstage_arr_rel_insert_input {
  data: [experiment_experimentstage_insert_input!]!
  "on conflict condition"
  on_conflict: experiment_experimentstage_on_conflict
}
"aggregate avg on columns"
type experiment_experimentstage_avg_fields {
  experimentcontext_id: Float
  id: Float
  problem_id: Float
}
"""
order by avg() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_avg_order_by {
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
}
"""
Boolean expression to filter rows from the table "experiment_experimentstage". All fields are combined with a logical 'AND'.
"""
input experiment_experimentstage_bool_exp {
  _and: [experiment_experimentstage_bool_exp!]
  _not: experiment_experimentstage_bool_exp
  _or: [experiment_experimentstage_bool_exp!]
  end_date: timestamptz_comparison_exp
  end_state: String_comparison_exp
  experiment_experimentactions: experiment_experimentaction_bool_exp
  experiment_experimentcontext: experiment_experimentcontext_bool_exp
  experimentcontext_id: Int_comparison_exp
  id: Int_comparison_exp
  problem_id: Int_comparison_exp
  start_date: timestamptz_comparison_exp
  type: String_comparison_exp
}
"""
unique or primary key constraints on table "experiment_experimentstage"
"""
enum experiment_experimentstage_constraint {
  "unique or primary key constraint"
  experiment_experimentstage_pkey
}
"""
input type for incrementing numeric columns in table "experiment_experimentstage"
"""
input experiment_experimentstage_inc_input {
  experimentcontext_id: Int
  id: Int
  problem_id: Int
}
"""
input type for inserting data into table "experiment_experimentstage"
"""
input experiment_experimentstage_insert_input {
  end_date: timestamptz
  end_state: String
  experiment_experimentactions: experiment_experimentaction_arr_rel_insert_input
  experiment_experimentcontext: experiment_experimentcontext_obj_rel_insert_input
  experimentcontext_id: Int
  id: Int
  problem_id: Int
  start_date: timestamptz
  type: String
}
"aggregate max on columns"
type experiment_experimentstage_max_fields {
  end_date: timestamptz
  end_state: String
  experimentcontext_id: Int
  id: Int
  problem_id: Int
  start_date: timestamptz
  type: String
}
"""
order by max() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_max_order_by {
  end_date: order_by
  end_state: order_by
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
  start_date: order_by
  type: order_by
}
"aggregate min on columns"
type experiment_experimentstage_min_fields {
  end_date: timestamptz
  end_state: String
  experimentcontext_id: Int
  id: Int
  problem_id: Int
  start_date: timestamptz
  type: String
}
"""
order by min() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_min_order_by {
  end_date: order_by
  end_state: order_by
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
  start_date: order_by
  type: order_by
}
"""
response of any mutation on the table "experiment_experimentstage"
"""
type experiment_experimentstage_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [experiment_experimentstage!]!
}
"""
input type for inserting object relation for remote table "experiment_experimentstage"
"""
input experiment_experimentstage_obj_rel_insert_input {
  data: experiment_experimentstage_insert_input!
  "on conflict condition"
  on_conflict: experiment_experimentstage_on_conflict
}
"""
on conflict condition type for table "experiment_experimentstage"
"""
input experiment_experimentstage_on_conflict {
  constraint: experiment_experimentstage_constraint!
  update_columns: [experiment_experimentstage_update_column!]! = []
  where: experiment_experimentstage_bool_exp
}
"""
Ordering options when selecting data from "experiment_experimentstage".
"""
input experiment_experimentstage_order_by {
  end_date: order_by
  end_state: order_by
  experiment_experimentactions_aggregate: experiment_experimentaction_aggregate_order_by
  experiment_experimentcontext: experiment_experimentcontext_order_by
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
  start_date: order_by
  type: order_by
}
"primary key columns input for table: experiment_experimentstage"
input experiment_experimentstage_pk_columns_input {
  id: Int!
}
"""
select columns of table "experiment_experimentstage"
"""
enum experiment_experimentstage_select_column {
  "column name"
  end_date
  "column name"
  end_state
  "column name"
  experimentcontext_id
  "column name"
  id
  "column name"
  problem_id
  "column name"
  start_date
  "column name"
  type
}
"""
input type for updating data in table "experiment_experimentstage"
"""
input experiment_experimentstage_set_input {
  end_date: timestamptz
  end_state: String
  experimentcontext_id: Int
  id: Int
  problem_id: Int
  start_date: timestamptz
  type: String
}
"aggregate stddev on columns"
type experiment_experimentstage_stddev_fields {
  experimentcontext_id: Float
  id: Float
  problem_id: Float
}
"""
order by stddev() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_stddev_order_by {
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
}
"aggregate stddev_pop on columns"
type experiment_experimentstage_stddev_pop_fields {
  experimentcontext_id: Float
  id: Float
  problem_id: Float
}
"""
order by stddev_pop() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_stddev_pop_order_by {
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
}
"aggregate stddev_samp on columns"
type experiment_experimentstage_stddev_samp_fields {
  experimentcontext_id: Float
  id: Float
  problem_id: Float
}
"""
order by stddev_samp() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_stddev_samp_order_by {
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
}
"aggregate sum on columns"
type experiment_experimentstage_sum_fields {
  experimentcontext_id: Int
  id: Int
  problem_id: Int
}
"""
order by sum() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_sum_order_by {
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
}
"""
update columns of table "experiment_experimentstage"
"""
enum experiment_experimentstage_update_column {
  "column name"
  end_date
  "column name"
  end_state
  "column name"
  experimentcontext_id
  "column name"
  id
  "column name"
  problem_id
  "column name"
  start_date
  "column name"
  type
}
"aggregate var_pop on columns"
type experiment_experimentstage_var_pop_fields {
  experimentcontext_id: Float
  id: Float
  problem_id: Float
}
"""
order by var_pop() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_var_pop_order_by {
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
}
"aggregate var_samp on columns"
type experiment_experimentstage_var_samp_fields {
  experimentcontext_id: Float
  id: Float
  problem_id: Float
}
"""
order by var_samp() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_var_samp_order_by {
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
}
"aggregate variance on columns"
type experiment_experimentstage_variance_fields {
  experimentcontext_id: Float
  id: Float
  problem_id: Float
}
"""
order by variance() on columns of table "experiment_experimentstage"
"""
input experiment_experimentstage_variance_order_by {
  experimentcontext_id: order_by
  id: order_by
  problem_id: order_by
}
scalar float8
"""
Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'.
"""
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}
scalar jsonb
"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  "is the column contained in the given json value"
  _contained_in: jsonb
  "does the column contain the given json value at the top level"
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  "does the string exist as a top-level key in the column"
  _has_key: String
  "do all of these strings exist as top-level keys in the column"
  _has_keys_all: [String!]
  "do any of these strings exist as top-level keys in the column"
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}
"mutation root"
type mutation_root {
  """
  delete data from the table: "Accepted_Value"
  """
  delete_Accepted_Value("filter the rows which have to be deleted" where: Accepted_Value_bool_exp!): Accepted_Value_mutation_response
  """
  delete single row from the table: "Accepted_Value"
  """
  delete_Accepted_Value_by_pk(id: Int!): Accepted_Value
  """
  delete data from the table: "Architecture"
  """
  delete_Architecture("filter the rows which have to be deleted" where: Architecture_bool_exp!): Architecture_mutation_response
  """
  delete data from the table: "ArchitectureBudget"
  """
  delete_ArchitectureBudget("filter the rows which have to be deleted" where: ArchitectureBudget_bool_exp!): ArchitectureBudget_mutation_response
  """
  delete single row from the table: "ArchitectureBudget"
  """
  delete_ArchitectureBudget_by_pk(id: Int!): ArchitectureBudget
  """
  delete data from the table: "ArchitectureCostInformation"
  """
  delete_ArchitectureCostInformation("filter the rows which have to be deleted" where: ArchitectureCostInformation_bool_exp!): ArchitectureCostInformation_mutation_response
  """
  delete single row from the table: "ArchitectureCostInformation"
  """
  delete_ArchitectureCostInformation_by_pk(id: Int!): ArchitectureCostInformation
  """
  delete data from the table: "ArchitecturePayload"
  """
  delete_ArchitecturePayload("filter the rows which have to be deleted" where: ArchitecturePayload_bool_exp!): ArchitecturePayload_mutation_response
  """
  delete single row from the table: "ArchitecturePayload"
  """
  delete_ArchitecturePayload_by_pk(id: Int!): ArchitecturePayload
  """
  delete data from the table: "ArchitectureScoreExplanation"
  """
  delete_ArchitectureScoreExplanation("filter the rows which have to be deleted" where: ArchitectureScoreExplanation_bool_exp!): ArchitectureScoreExplanation_mutation_response
  """
  delete single row from the table: "ArchitectureScoreExplanation"
  """
  delete_ArchitectureScoreExplanation_by_pk(id: Int!): ArchitectureScoreExplanation
  """
  delete single row from the table: "Architecture"
  """
  delete_Architecture_by_pk(id: Int!): Architecture
  """
  delete data from the table: "Dataset"
  """
  delete_Dataset("filter the rows which have to be deleted" where: Dataset_bool_exp!): Dataset_mutation_response
  """
  delete single row from the table: "Dataset"
  """
  delete_Dataset_by_pk(id: Int!): Dataset
  """
  delete data from the table: "EDL_edlcontext"
  """
  delete_EDL_edlcontext("filter the rows which have to be deleted" where: EDL_edlcontext_bool_exp!): EDL_edlcontext_mutation_response
  """
  delete single row from the table: "EDL_edlcontext"
  """
  delete_EDL_edlcontext_by_pk(id: Int!): EDL_edlcontext
  """
  delete data from the table: "EOSS_activecontext"
  """
  delete_EOSS_activecontext("filter the rows which have to be deleted" where: EOSS_activecontext_bool_exp!): EOSS_activecontext_mutation_response
  """
  delete single row from the table: "EOSS_activecontext"
  """
  delete_EOSS_activecontext_by_pk(id: Int!): EOSS_activecontext
  """
  delete data from the table: "EOSS_engineercontext"
  """
  delete_EOSS_engineercontext("filter the rows which have to be deleted" where: EOSS_engineercontext_bool_exp!): EOSS_engineercontext_mutation_response
  """
  delete single row from the table: "EOSS_engineercontext"
  """
  delete_EOSS_engineercontext_by_pk(id: Int!): EOSS_engineercontext
  """
  delete data from the table: "EOSS_eosscontext"
  """
  delete_EOSS_eosscontext("filter the rows which have to be deleted" where: EOSS_eosscontext_bool_exp!): EOSS_eosscontext_mutation_response
  """
  delete single row from the table: "EOSS_eosscontext"
  """
  delete_EOSS_eosscontext_by_pk(id: Int!): EOSS_eosscontext
  """
  delete data from the table: "EOSS_eossdialoguecontext"
  """
  delete_EOSS_eossdialoguecontext("filter the rows which have to be deleted" where: EOSS_eossdialoguecontext_bool_exp!): EOSS_eossdialoguecontext_mutation_response
  """
  delete single row from the table: "EOSS_eossdialoguecontext"
  """
  delete_EOSS_eossdialoguecontext_by_pk(id: Int!): EOSS_eossdialoguecontext
  """
  delete data from the table: "Fuzzy_Attribute"
  """
  delete_Fuzzy_Attribute("filter the rows which have to be deleted" where: Fuzzy_Attribute_bool_exp!): Fuzzy_Attribute_mutation_response
  """
  delete single row from the table: "Fuzzy_Attribute"
  """
  delete_Fuzzy_Attribute_by_pk(id: Int!): Fuzzy_Attribute
  """
  delete data from the table: "Fuzzy_Value"
  """
  delete_Fuzzy_Value("filter the rows which have to be deleted" where: Fuzzy_Value_bool_exp!): Fuzzy_Value_mutation_response
  """
  delete single row from the table: "Fuzzy_Value"
  """
  delete_Fuzzy_Value_by_pk(id: Int!): Fuzzy_Value
  """
  delete data from the table: "Group"
  """
  delete_Group("filter the rows which have to be deleted" where: Group_bool_exp!): Group_mutation_response
  """
  delete single row from the table: "Group"
  """
  delete_Group_by_pk(id: Int!): Group
  """
  delete data from the table: "Inheritence_Attribute"
  """
  delete_Inheritence_Attribute("filter the rows which have to be deleted" where: Inheritence_Attribute_bool_exp!): Inheritence_Attribute_mutation_response
  """
  delete single row from the table: "Inheritence_Attribute"
  """
  delete_Inheritence_Attribute_by_pk(id: Int!): Inheritence_Attribute
  """
  delete data from the table: "Instrument"
  """
  delete_Instrument("filter the rows which have to be deleted" where: Instrument_bool_exp!): Instrument_mutation_response
  """
  delete data from the table: "Instrument_Attribute"
  """
  delete_Instrument_Attribute("filter the rows which have to be deleted" where: Instrument_Attribute_bool_exp!): Instrument_Attribute_mutation_response
  """
  delete single row from the table: "Instrument_Attribute"
  """
  delete_Instrument_Attribute_by_pk(id: Int!): Instrument_Attribute
  """
  delete single row from the table: "Instrument"
  """
  delete_Instrument_by_pk(id: Int!): Instrument
  """
  delete data from the table: "Join__AuthUser_Group"
  """
  delete_Join__AuthUser_Group("filter the rows which have to be deleted" where: Join__AuthUser_Group_bool_exp!): Join__AuthUser_Group_mutation_response
  """
  delete single row from the table: "Join__AuthUser_Group"
  """
  delete_Join__AuthUser_Group_by_pk(id: Int!): Join__AuthUser_Group
  """
  delete data from the table: "Join__Case_Attribute"
  """
  delete_Join__Case_Attribute("filter the rows which have to be deleted" where: Join__Case_Attribute_bool_exp!): Join__Case_Attribute_mutation_response
  """
  delete single row from the table: "Join__Case_Attribute"
  """
  delete_Join__Case_Attribute_by_pk(id: Int!): Join__Case_Attribute
  """
  delete data from the table: "Join__Instrument_Attribute_Values"
  """
  delete_Join__Instrument_Attribute_Values("filter the rows which have to be deleted" where: Join__Instrument_Attribute_Values_bool_exp!): Join__Instrument_Attribute_Values_mutation_response
  """
  delete single row from the table: "Join__Instrument_Attribute_Values"
  """
  delete_Join__Instrument_Attribute_Values_by_pk(id: Int!): Join__Instrument_Attribute_Values
  """
  delete data from the table: "Join__Instrument_Capability"
  """
  delete_Join__Instrument_Capability("filter the rows which have to be deleted" where: Join__Instrument_Capability_bool_exp!): Join__Instrument_Capability_mutation_response
  """
  delete single row from the table: "Join__Instrument_Capability"
  """
  delete_Join__Instrument_Capability_by_pk(id: Int!): Join__Instrument_Capability
  """
  delete data from the table: "Join__Instrument_Characteristic"
  """
  delete_Join__Instrument_Characteristic("filter the rows which have to be deleted" where: Join__Instrument_Characteristic_bool_exp!): Join__Instrument_Characteristic_mutation_response
  """
  delete single row from the table: "Join__Instrument_Characteristic"
  """
  delete_Join__Instrument_Characteristic_by_pk(id: Int!): Join__Instrument_Characteristic
  """
  delete data from the table: "Join__Instrument_Measurement"
  """
  delete_Join__Instrument_Measurement("filter the rows which have to be deleted" where: Join__Instrument_Measurement_bool_exp!): Join__Instrument_Measurement_mutation_response
  """
  delete single row from the table: "Join__Instrument_Measurement"
  """
  delete_Join__Instrument_Measurement_by_pk(id: Int!): Join__Instrument_Measurement
  """
  delete data from the table: "Join__Launch_Vehicle_Attribute"
  """
  delete_Join__Launch_Vehicle_Attribute("filter the rows which have to be deleted" where: Join__Launch_Vehicle_Attribute_bool_exp!): Join__Launch_Vehicle_Attribute_mutation_response
  """
  delete data from the table: "Join__Launch_Vehicle_Attribute_Values"
  """
  delete_Join__Launch_Vehicle_Attribute_Values("filter the rows which have to be deleted" where: Join__Launch_Vehicle_Attribute_Values_bool_exp!): Join__Launch_Vehicle_Attribute_Values_mutation_response
  """
  delete single row from the table: "Join__Launch_Vehicle_Attribute_Values"
  """
  delete_Join__Launch_Vehicle_Attribute_Values_by_pk(id: Int!): Join__Launch_Vehicle_Attribute_Values
  """
  delete single row from the table: "Join__Launch_Vehicle_Attribute"
  """
  delete_Join__Launch_Vehicle_Attribute_by_pk(id: Int!): Join__Launch_Vehicle_Attribute
  """
  delete data from the table: "Join__Measurement_Attribute_Values"
  """
  delete_Join__Measurement_Attribute_Values("filter the rows which have to be deleted" where: Join__Measurement_Attribute_Values_bool_exp!): Join__Measurement_Attribute_Values_mutation_response
  """
  delete single row from the table: "Join__Measurement_Attribute_Values"
  """
  delete_Join__Measurement_Attribute_Values_by_pk(id: Int!): Join__Measurement_Attribute_Values
  """
  delete data from the table: "Join__Mission_Attribute_Values"
  """
  delete_Join__Mission_Attribute_Values("filter the rows which have to be deleted" where: Join__Mission_Attribute_Values_bool_exp!): Join__Mission_Attribute_Values_mutation_response
  """
  delete single row from the table: "Join__Mission_Attribute_Values"
  """
  delete_Join__Mission_Attribute_Values_by_pk(id: Int!): Join__Mission_Attribute_Values
  """
  delete data from the table: "Join__Orbit_Attribute"
  """
  delete_Join__Orbit_Attribute("filter the rows which have to be deleted" where: Join__Orbit_Attribute_bool_exp!): Join__Orbit_Attribute_mutation_response
  """
  delete data from the table: "Join__Orbit_Attribute_Values"
  """
  delete_Join__Orbit_Attribute_Values("filter the rows which have to be deleted" where: Join__Orbit_Attribute_Values_bool_exp!): Join__Orbit_Attribute_Values_mutation_response
  """
  delete single row from the table: "Join__Orbit_Attribute_Values"
  """
  delete_Join__Orbit_Attribute_Values_by_pk(id: Int!): Join__Orbit_Attribute_Values
  """
  delete single row from the table: "Join__Orbit_Attribute"
  """
  delete_Join__Orbit_Attribute_by_pk(id: Int!): Join__Orbit_Attribute
  """
  delete data from the table: "Join__Problem_Instrument"
  """
  delete_Join__Problem_Instrument("filter the rows which have to be deleted" where: Join__Problem_Instrument_bool_exp!): Join__Problem_Instrument_mutation_response
  """
  delete single row from the table: "Join__Problem_Instrument"
  """
  delete_Join__Problem_Instrument_by_pk(id: Int!): Join__Problem_Instrument
  """
  delete data from the table: "Join__Problem_Launch_Vehicle"
  """
  delete_Join__Problem_Launch_Vehicle("filter the rows which have to be deleted" where: Join__Problem_Launch_Vehicle_bool_exp!): Join__Problem_Launch_Vehicle_mutation_response
  """
  delete single row from the table: "Join__Problem_Launch_Vehicle"
  """
  delete_Join__Problem_Launch_Vehicle_by_pk(id: Int!): Join__Problem_Launch_Vehicle
  """
  delete data from the table: "Join__Problem_Orbit"
  """
  delete_Join__Problem_Orbit("filter the rows which have to be deleted" where: Join__Problem_Orbit_bool_exp!): Join__Problem_Orbit_mutation_response
  """
  delete single row from the table: "Join__Problem_Orbit"
  """
  delete_Join__Problem_Orbit_by_pk(id: Int!): Join__Problem_Orbit
  """
  delete data from the table: "Launch_Vehicle"
  """
  delete_Launch_Vehicle("filter the rows which have to be deleted" where: Launch_Vehicle_bool_exp!): Launch_Vehicle_mutation_response
  """
  delete data from the table: "Launch_Vehicle_Attribute"
  """
  delete_Launch_Vehicle_Attribute("filter the rows which have to be deleted" where: Launch_Vehicle_Attribute_bool_exp!): Launch_Vehicle_Attribute_mutation_response
  """
  delete single row from the table: "Launch_Vehicle_Attribute"
  """
  delete_Launch_Vehicle_Attribute_by_pk(id: Int!): Launch_Vehicle_Attribute
  """
  delete data from the table: "Launch_Vehicle_Mission_Analysis"
  """
  delete_Launch_Vehicle_Mission_Analysis("filter the rows which have to be deleted" where: Launch_Vehicle_Mission_Analysis_bool_exp!): Launch_Vehicle_Mission_Analysis_mutation_response
  """
  delete single row from the table: "Launch_Vehicle_Mission_Analysis"
  """
  delete_Launch_Vehicle_Mission_Analysis_by_pk(id: Int!): Launch_Vehicle_Mission_Analysis
  """
  delete single row from the table: "Launch_Vehicle"
  """
  delete_Launch_Vehicle_by_pk(id: Int!): Launch_Vehicle
  """
  delete data from the table: "Measurement"
  """
  delete_Measurement("filter the rows which have to be deleted" where: Measurement_bool_exp!): Measurement_mutation_response
  """
  delete data from the table: "Measurement_Attribute"
  """
  delete_Measurement_Attribute("filter the rows which have to be deleted" where: Measurement_Attribute_bool_exp!): Measurement_Attribute_mutation_response
  """
  delete single row from the table: "Measurement_Attribute"
  """
  delete_Measurement_Attribute_by_pk(id: Int!): Measurement_Attribute
  """
  delete single row from the table: "Measurement"
  """
  delete_Measurement_by_pk(id: Int!): Measurement
  """
  delete data from the table: "Mission_Attribute"
  """
  delete_Mission_Attribute("filter the rows which have to be deleted" where: Mission_Attribute_bool_exp!): Mission_Attribute_mutation_response
  """
  delete single row from the table: "Mission_Attribute"
  """
  delete_Mission_Attribute_by_pk(id: Int!): Mission_Attribute
  """
  delete data from the table: "ObjectiveScoreExplanation"
  """
  delete_ObjectiveScoreExplanation("filter the rows which have to be deleted" where: ObjectiveScoreExplanation_bool_exp!): ObjectiveScoreExplanation_mutation_response
  """
  delete single row from the table: "ObjectiveScoreExplanation"
  """
  delete_ObjectiveScoreExplanation_by_pk(id: Int!): ObjectiveScoreExplanation
  """
  delete data from the table: "Orbit"
  """
  delete_Orbit("filter the rows which have to be deleted" where: Orbit_bool_exp!): Orbit_mutation_response
  """
  delete data from the table: "Orbit_Attribute"
  """
  delete_Orbit_Attribute("filter the rows which have to be deleted" where: Orbit_Attribute_bool_exp!): Orbit_Attribute_mutation_response
  """
  delete single row from the table: "Orbit_Attribute"
  """
  delete_Orbit_Attribute_by_pk(id: Int!): Orbit_Attribute
  """
  delete single row from the table: "Orbit"
  """
  delete_Orbit_by_pk(id: Int!): Orbit
  """
  delete data from the table: "PanelScoreExplanation"
  """
  delete_PanelScoreExplanation("filter the rows which have to be deleted" where: PanelScoreExplanation_bool_exp!): PanelScoreExplanation_mutation_response
  """
  delete single row from the table: "PanelScoreExplanation"
  """
  delete_PanelScoreExplanation_by_pk(id: Int!): PanelScoreExplanation
  """
  delete data from the table: "Power_Mission_Analysis"
  """
  delete_Power_Mission_Analysis("filter the rows which have to be deleted" where: Power_Mission_Analysis_bool_exp!): Power_Mission_Analysis_mutation_response
  """
  delete single row from the table: "Power_Mission_Analysis"
  """
  delete_Power_Mission_Analysis_by_pk(id: Int!): Power_Mission_Analysis
  """
  delete data from the table: "Problem"
  """
  delete_Problem("filter the rows which have to be deleted" where: Problem_bool_exp!): Problem_mutation_response
  """
  delete single row from the table: "Problem"
  """
  delete_Problem_by_pk(id: Int!): Problem
  """
  delete data from the table: "Requirement_Rule_Attribute"
  """
  delete_Requirement_Rule_Attribute("filter the rows which have to be deleted" where: Requirement_Rule_Attribute_bool_exp!): Requirement_Rule_Attribute_mutation_response
  """
  delete single row from the table: "Requirement_Rule_Attribute"
  """
  delete_Requirement_Rule_Attribute_by_pk(id: Int!): Requirement_Rule_Attribute
  """
  delete data from the table: "Requirement_Rule_Case"
  """
  delete_Requirement_Rule_Case("filter the rows which have to be deleted" where: Requirement_Rule_Case_bool_exp!): Requirement_Rule_Case_mutation_response
  """
  delete single row from the table: "Requirement_Rule_Case"
  """
  delete_Requirement_Rule_Case_by_pk(id: Int!): Requirement_Rule_Case
  """
  delete data from the table: "Stakeholder_Needs_Objective"
  """
  delete_Stakeholder_Needs_Objective("filter the rows which have to be deleted" where: Stakeholder_Needs_Objective_bool_exp!): Stakeholder_Needs_Objective_mutation_response
  """
  delete single row from the table: "Stakeholder_Needs_Objective"
  """
  delete_Stakeholder_Needs_Objective_by_pk(id: Int!): Stakeholder_Needs_Objective
  """
  delete data from the table: "Stakeholder_Needs_Panel"
  """
  delete_Stakeholder_Needs_Panel("filter the rows which have to be deleted" where: Stakeholder_Needs_Panel_bool_exp!): Stakeholder_Needs_Panel_mutation_response
  """
  delete single row from the table: "Stakeholder_Needs_Panel"
  """
  delete_Stakeholder_Needs_Panel_by_pk(id: Int!): Stakeholder_Needs_Panel
  """
  delete data from the table: "Stakeholder_Needs_Subobjective"
  """
  delete_Stakeholder_Needs_Subobjective("filter the rows which have to be deleted" where: Stakeholder_Needs_Subobjective_bool_exp!): Stakeholder_Needs_Subobjective_mutation_response
  """
  delete single row from the table: "Stakeholder_Needs_Subobjective"
  """
  delete_Stakeholder_Needs_Subobjective_by_pk(id: Int!): Stakeholder_Needs_Subobjective
  """
  delete data from the table: "SubobjectiveScoreExplanation"
  """
  delete_SubobjectiveScoreExplanation("filter the rows which have to be deleted" where: SubobjectiveScoreExplanation_bool_exp!): SubobjectiveScoreExplanation_mutation_response
  """
  delete single row from the table: "SubobjectiveScoreExplanation"
  """
  delete_SubobjectiveScoreExplanation_by_pk(id: Int!): SubobjectiveScoreExplanation
  """
  delete data from the table: "Walker_Mission_Analysis"
  """
  delete_Walker_Mission_Analysis("filter the rows which have to be deleted" where: Walker_Mission_Analysis_bool_exp!): Walker_Mission_Analysis_mutation_response
  """
  delete single row from the table: "Walker_Mission_Analysis"
  """
  delete_Walker_Mission_Analysis_by_pk(id: Int!): Walker_Mission_Analysis
  """
  delete data from the table: "auth_group"
  """
  delete_auth_group("filter the rows which have to be deleted" where: auth_group_bool_exp!): auth_group_mutation_response
  """
  delete single row from the table: "auth_group"
  """
  delete_auth_group_by_pk(id: Int!): auth_group
  """
  delete data from the table: "auth_group_permissions"
  """
  delete_auth_group_permissions("filter the rows which have to be deleted" where: auth_group_permissions_bool_exp!): auth_group_permissions_mutation_response
  """
  delete single row from the table: "auth_group_permissions"
  """
  delete_auth_group_permissions_by_pk(id: Int!): auth_group_permissions
  """
  delete data from the table: "auth_permission"
  """
  delete_auth_permission("filter the rows which have to be deleted" where: auth_permission_bool_exp!): auth_permission_mutation_response
  """
  delete single row from the table: "auth_permission"
  """
  delete_auth_permission_by_pk(id: Int!): auth_permission
  """
  delete data from the table: "auth_user"
  """
  delete_auth_user("filter the rows which have to be deleted" where: auth_user_bool_exp!): auth_user_mutation_response
  """
  delete single row from the table: "auth_user"
  """
  delete_auth_user_by_pk(id: Int!): auth_user
  """
  delete data from the table: "auth_user_groups"
  """
  delete_auth_user_groups("filter the rows which have to be deleted" where: auth_user_groups_bool_exp!): auth_user_groups_mutation_response
  """
  delete single row from the table: "auth_user_groups"
  """
  delete_auth_user_groups_by_pk(id: Int!): auth_user_groups
  """
  delete data from the table: "auth_user_user_permissions"
  """
  delete_auth_user_user_permissions("filter the rows which have to be deleted" where: auth_user_user_permissions_bool_exp!): auth_user_user_permissions_mutation_response
  """
  delete single row from the table: "auth_user_user_permissions"
  """
  delete_auth_user_user_permissions_by_pk(id: Int!): auth_user_user_permissions
  """
  delete data from the table: "daphne_context_dialoguecontext"
  """
  delete_daphne_context_dialoguecontext("filter the rows which have to be deleted" where: daphne_context_dialoguecontext_bool_exp!): daphne_context_dialoguecontext_mutation_response
  """
  delete single row from the table: "daphne_context_dialoguecontext"
  """
  delete_daphne_context_dialoguecontext_by_pk(id: Int!): daphne_context_dialoguecontext
  """
  delete data from the table: "daphne_context_dialoguehistory"
  """
  delete_daphne_context_dialoguehistory("filter the rows which have to be deleted" where: daphne_context_dialoguehistory_bool_exp!): daphne_context_dialoguehistory_mutation_response
  """
  delete single row from the table: "daphne_context_dialoguehistory"
  """
  delete_daphne_context_dialoguehistory_by_pk(id: Int!): daphne_context_dialoguehistory
  """
  delete data from the table: "daphne_context_mycroftuser"
  """
  delete_daphne_context_mycroftuser("filter the rows which have to be deleted" where: daphne_context_mycroftuser_bool_exp!): daphne_context_mycroftuser_mutation_response
  """
  delete single row from the table: "daphne_context_mycroftuser"
  """
  delete_daphne_context_mycroftuser_by_pk(user_id: Int!): daphne_context_mycroftuser
  """
  delete data from the table: "daphne_context_userinformation"
  """
  delete_daphne_context_userinformation("filter the rows which have to be deleted" where: daphne_context_userinformation_bool_exp!): daphne_context_userinformation_mutation_response
  """
  delete single row from the table: "daphne_context_userinformation"
  """
  delete_daphne_context_userinformation_by_pk(id: Int!): daphne_context_userinformation
  """
  delete data from the table: "django_admin_log"
  """
  delete_django_admin_log("filter the rows which have to be deleted" where: django_admin_log_bool_exp!): django_admin_log_mutation_response
  """
  delete single row from the table: "django_admin_log"
  """
  delete_django_admin_log_by_pk(id: Int!): django_admin_log
  """
  delete data from the table: "django_content_type"
  """
  delete_django_content_type("filter the rows which have to be deleted" where: django_content_type_bool_exp!): django_content_type_mutation_response
  """
  delete single row from the table: "django_content_type"
  """
  delete_django_content_type_by_pk(id: Int!): django_content_type
  """
  delete data from the table: "django_migrations"
  """
  delete_django_migrations("filter the rows which have to be deleted" where: django_migrations_bool_exp!): django_migrations_mutation_response
  """
  delete single row from the table: "django_migrations"
  """
  delete_django_migrations_by_pk(id: Int!): django_migrations
  """
  delete data from the table: "django_session"
  """
  delete_django_session("filter the rows which have to be deleted" where: django_session_bool_exp!): django_session_mutation_response
  """
  delete single row from the table: "django_session"
  """
  delete_django_session_by_pk(session_key: String!): django_session
  """
  delete data from the table: "experiment_allowedcommand"
  """
  delete_experiment_allowedcommand("filter the rows which have to be deleted" where: experiment_allowedcommand_bool_exp!): experiment_allowedcommand_mutation_response
  """
  delete single row from the table: "experiment_allowedcommand"
  """
  delete_experiment_allowedcommand_by_pk(id: Int!): experiment_allowedcommand
  """
  delete data from the table: "experiment_experimentaction"
  """
  delete_experiment_experimentaction("filter the rows which have to be deleted" where: experiment_experimentaction_bool_exp!): experiment_experimentaction_mutation_response
  """
  delete single row from the table: "experiment_experimentaction"
  """
  delete_experiment_experimentaction_by_pk(id: Int!): experiment_experimentaction
  """
  delete data from the table: "experiment_experimentcontext"
  """
  delete_experiment_experimentcontext("filter the rows which have to be deleted" where: experiment_experimentcontext_bool_exp!): experiment_experimentcontext_mutation_response
  """
  delete single row from the table: "experiment_experimentcontext"
  """
  delete_experiment_experimentcontext_by_pk(id: Int!): experiment_experimentcontext
  """
  delete data from the table: "experiment_experimentstage"
  """
  delete_experiment_experimentstage("filter the rows which have to be deleted" where: experiment_experimentstage_bool_exp!): experiment_experimentstage_mutation_response
  """
  delete single row from the table: "experiment_experimentstage"
  """
  delete_experiment_experimentstage_by_pk(id: Int!): experiment_experimentstage
  """
  insert data into the table: "Accepted_Value"
  """
  insert_Accepted_Value("the rows to be inserted" objects: [Accepted_Value_insert_input!]!, "on conflict condition" on_conflict: Accepted_Value_on_conflict): Accepted_Value_mutation_response
  """
  insert a single row into the table: "Accepted_Value"
  """
  insert_Accepted_Value_one("the row to be inserted" object: Accepted_Value_insert_input!, "on conflict condition" on_conflict: Accepted_Value_on_conflict): Accepted_Value
  """
  insert data into the table: "Architecture"
  """
  insert_Architecture("the rows to be inserted" objects: [Architecture_insert_input!]!, "on conflict condition" on_conflict: Architecture_on_conflict): Architecture_mutation_response
  """
  insert data into the table: "ArchitectureBudget"
  """
  insert_ArchitectureBudget("the rows to be inserted" objects: [ArchitectureBudget_insert_input!]!, "on conflict condition" on_conflict: ArchitectureBudget_on_conflict): ArchitectureBudget_mutation_response
  """
  insert a single row into the table: "ArchitectureBudget"
  """
  insert_ArchitectureBudget_one("the row to be inserted" object: ArchitectureBudget_insert_input!, "on conflict condition" on_conflict: ArchitectureBudget_on_conflict): ArchitectureBudget
  """
  insert data into the table: "ArchitectureCostInformation"
  """
  insert_ArchitectureCostInformation("the rows to be inserted" objects: [ArchitectureCostInformation_insert_input!]!, "on conflict condition" on_conflict: ArchitectureCostInformation_on_conflict): ArchitectureCostInformation_mutation_response
  """
  insert a single row into the table: "ArchitectureCostInformation"
  """
  insert_ArchitectureCostInformation_one("the row to be inserted" object: ArchitectureCostInformation_insert_input!, "on conflict condition" on_conflict: ArchitectureCostInformation_on_conflict): ArchitectureCostInformation
  """
  insert data into the table: "ArchitecturePayload"
  """
  insert_ArchitecturePayload("the rows to be inserted" objects: [ArchitecturePayload_insert_input!]!, "on conflict condition" on_conflict: ArchitecturePayload_on_conflict): ArchitecturePayload_mutation_response
  """
  insert a single row into the table: "ArchitecturePayload"
  """
  insert_ArchitecturePayload_one("the row to be inserted" object: ArchitecturePayload_insert_input!, "on conflict condition" on_conflict: ArchitecturePayload_on_conflict): ArchitecturePayload
  """
  insert data into the table: "ArchitectureScoreExplanation"
  """
  insert_ArchitectureScoreExplanation("the rows to be inserted" objects: [ArchitectureScoreExplanation_insert_input!]!, "on conflict condition" on_conflict: ArchitectureScoreExplanation_on_conflict): ArchitectureScoreExplanation_mutation_response
  """
  insert a single row into the table: "ArchitectureScoreExplanation"
  """
  insert_ArchitectureScoreExplanation_one("the row to be inserted" object: ArchitectureScoreExplanation_insert_input!, "on conflict condition" on_conflict: ArchitectureScoreExplanation_on_conflict): ArchitectureScoreExplanation
  """
  insert a single row into the table: "Architecture"
  """
  insert_Architecture_one("the row to be inserted" object: Architecture_insert_input!, "on conflict condition" on_conflict: Architecture_on_conflict): Architecture
  """
  insert data into the table: "Dataset"
  """
  insert_Dataset("the rows to be inserted" objects: [Dataset_insert_input!]!, "on conflict condition" on_conflict: Dataset_on_conflict): Dataset_mutation_response
  """
  insert a single row into the table: "Dataset"
  """
  insert_Dataset_one("the row to be inserted" object: Dataset_insert_input!, "on conflict condition" on_conflict: Dataset_on_conflict): Dataset
  """
  insert data into the table: "EDL_edlcontext"
  """
  insert_EDL_edlcontext("the rows to be inserted" objects: [EDL_edlcontext_insert_input!]!, "on conflict condition" on_conflict: EDL_edlcontext_on_conflict): EDL_edlcontext_mutation_response
  """
  insert a single row into the table: "EDL_edlcontext"
  """
  insert_EDL_edlcontext_one("the row to be inserted" object: EDL_edlcontext_insert_input!, "on conflict condition" on_conflict: EDL_edlcontext_on_conflict): EDL_edlcontext
  """
  insert data into the table: "EOSS_activecontext"
  """
  insert_EOSS_activecontext("the rows to be inserted" objects: [EOSS_activecontext_insert_input!]!, "on conflict condition" on_conflict: EOSS_activecontext_on_conflict): EOSS_activecontext_mutation_response
  """
  insert a single row into the table: "EOSS_activecontext"
  """
  insert_EOSS_activecontext_one("the row to be inserted" object: EOSS_activecontext_insert_input!, "on conflict condition" on_conflict: EOSS_activecontext_on_conflict): EOSS_activecontext
  """
  insert data into the table: "EOSS_engineercontext"
  """
  insert_EOSS_engineercontext("the rows to be inserted" objects: [EOSS_engineercontext_insert_input!]!, "on conflict condition" on_conflict: EOSS_engineercontext_on_conflict): EOSS_engineercontext_mutation_response
  """
  insert a single row into the table: "EOSS_engineercontext"
  """
  insert_EOSS_engineercontext_one("the row to be inserted" object: EOSS_engineercontext_insert_input!, "on conflict condition" on_conflict: EOSS_engineercontext_on_conflict): EOSS_engineercontext
  """
  insert data into the table: "EOSS_eosscontext"
  """
  insert_EOSS_eosscontext("the rows to be inserted" objects: [EOSS_eosscontext_insert_input!]!, "on conflict condition" on_conflict: EOSS_eosscontext_on_conflict): EOSS_eosscontext_mutation_response
  """
  insert a single row into the table: "EOSS_eosscontext"
  """
  insert_EOSS_eosscontext_one("the row to be inserted" object: EOSS_eosscontext_insert_input!, "on conflict condition" on_conflict: EOSS_eosscontext_on_conflict): EOSS_eosscontext
  """
  insert data into the table: "EOSS_eossdialoguecontext"
  """
  insert_EOSS_eossdialoguecontext("the rows to be inserted" objects: [EOSS_eossdialoguecontext_insert_input!]!, "on conflict condition" on_conflict: EOSS_eossdialoguecontext_on_conflict): EOSS_eossdialoguecontext_mutation_response
  """
  insert a single row into the table: "EOSS_eossdialoguecontext"
  """
  insert_EOSS_eossdialoguecontext_one("the row to be inserted" object: EOSS_eossdialoguecontext_insert_input!, "on conflict condition" on_conflict: EOSS_eossdialoguecontext_on_conflict): EOSS_eossdialoguecontext
  """
  insert data into the table: "Fuzzy_Attribute"
  """
  insert_Fuzzy_Attribute("the rows to be inserted" objects: [Fuzzy_Attribute_insert_input!]!, "on conflict condition" on_conflict: Fuzzy_Attribute_on_conflict): Fuzzy_Attribute_mutation_response
  """
  insert a single row into the table: "Fuzzy_Attribute"
  """
  insert_Fuzzy_Attribute_one("the row to be inserted" object: Fuzzy_Attribute_insert_input!, "on conflict condition" on_conflict: Fuzzy_Attribute_on_conflict): Fuzzy_Attribute
  """
  insert data into the table: "Fuzzy_Value"
  """
  insert_Fuzzy_Value("the rows to be inserted" objects: [Fuzzy_Value_insert_input!]!, "on conflict condition" on_conflict: Fuzzy_Value_on_conflict): Fuzzy_Value_mutation_response
  """
  insert a single row into the table: "Fuzzy_Value"
  """
  insert_Fuzzy_Value_one("the row to be inserted" object: Fuzzy_Value_insert_input!, "on conflict condition" on_conflict: Fuzzy_Value_on_conflict): Fuzzy_Value
  """
  insert data into the table: "Group"
  """
  insert_Group("the rows to be inserted" objects: [Group_insert_input!]!, "on conflict condition" on_conflict: Group_on_conflict): Group_mutation_response
  """
  insert a single row into the table: "Group"
  """
  insert_Group_one("the row to be inserted" object: Group_insert_input!, "on conflict condition" on_conflict: Group_on_conflict): Group
  """
  insert data into the table: "Inheritence_Attribute"
  """
  insert_Inheritence_Attribute("the rows to be inserted" objects: [Inheritence_Attribute_insert_input!]!, "on conflict condition" on_conflict: Inheritence_Attribute_on_conflict): Inheritence_Attribute_mutation_response
  """
  insert a single row into the table: "Inheritence_Attribute"
  """
  insert_Inheritence_Attribute_one("the row to be inserted" object: Inheritence_Attribute_insert_input!, "on conflict condition" on_conflict: Inheritence_Attribute_on_conflict): Inheritence_Attribute
  """
  insert data into the table: "Instrument"
  """
  insert_Instrument("the rows to be inserted" objects: [Instrument_insert_input!]!, "on conflict condition" on_conflict: Instrument_on_conflict): Instrument_mutation_response
  """
  insert data into the table: "Instrument_Attribute"
  """
  insert_Instrument_Attribute("the rows to be inserted" objects: [Instrument_Attribute_insert_input!]!, "on conflict condition" on_conflict: Instrument_Attribute_on_conflict): Instrument_Attribute_mutation_response
  """
  insert a single row into the table: "Instrument_Attribute"
  """
  insert_Instrument_Attribute_one("the row to be inserted" object: Instrument_Attribute_insert_input!, "on conflict condition" on_conflict: Instrument_Attribute_on_conflict): Instrument_Attribute
  """
  insert a single row into the table: "Instrument"
  """
  insert_Instrument_one("the row to be inserted" object: Instrument_insert_input!, "on conflict condition" on_conflict: Instrument_on_conflict): Instrument
  """
  insert data into the table: "Join__AuthUser_Group"
  """
  insert_Join__AuthUser_Group("the rows to be inserted" objects: [Join__AuthUser_Group_insert_input!]!, "on conflict condition" on_conflict: Join__AuthUser_Group_on_conflict): Join__AuthUser_Group_mutation_response
  """
  insert a single row into the table: "Join__AuthUser_Group"
  """
  insert_Join__AuthUser_Group_one("the row to be inserted" object: Join__AuthUser_Group_insert_input!, "on conflict condition" on_conflict: Join__AuthUser_Group_on_conflict): Join__AuthUser_Group
  """
  insert data into the table: "Join__Case_Attribute"
  """
  insert_Join__Case_Attribute("the rows to be inserted" objects: [Join__Case_Attribute_insert_input!]!, "on conflict condition" on_conflict: Join__Case_Attribute_on_conflict): Join__Case_Attribute_mutation_response
  """
  insert a single row into the table: "Join__Case_Attribute"
  """
  insert_Join__Case_Attribute_one("the row to be inserted" object: Join__Case_Attribute_insert_input!, "on conflict condition" on_conflict: Join__Case_Attribute_on_conflict): Join__Case_Attribute
  """
  insert data into the table: "Join__Instrument_Attribute_Values"
  """
  insert_Join__Instrument_Attribute_Values("the rows to be inserted" objects: [Join__Instrument_Attribute_Values_insert_input!]!, "on conflict condition" on_conflict: Join__Instrument_Attribute_Values_on_conflict): Join__Instrument_Attribute_Values_mutation_response
  """
  insert a single row into the table: "Join__Instrument_Attribute_Values"
  """
  insert_Join__Instrument_Attribute_Values_one("the row to be inserted" object: Join__Instrument_Attribute_Values_insert_input!, "on conflict condition" on_conflict: Join__Instrument_Attribute_Values_on_conflict): Join__Instrument_Attribute_Values
  """
  insert data into the table: "Join__Instrument_Capability"
  """
  insert_Join__Instrument_Capability("the rows to be inserted" objects: [Join__Instrument_Capability_insert_input!]!, "on conflict condition" on_conflict: Join__Instrument_Capability_on_conflict): Join__Instrument_Capability_mutation_response
  """
  insert a single row into the table: "Join__Instrument_Capability"
  """
  insert_Join__Instrument_Capability_one("the row to be inserted" object: Join__Instrument_Capability_insert_input!, "on conflict condition" on_conflict: Join__Instrument_Capability_on_conflict): Join__Instrument_Capability
  """
  insert data into the table: "Join__Instrument_Characteristic"
  """
  insert_Join__Instrument_Characteristic("the rows to be inserted" objects: [Join__Instrument_Characteristic_insert_input!]!, "on conflict condition" on_conflict: Join__Instrument_Characteristic_on_conflict): Join__Instrument_Characteristic_mutation_response
  """
  insert a single row into the table: "Join__Instrument_Characteristic"
  """
  insert_Join__Instrument_Characteristic_one("the row to be inserted" object: Join__Instrument_Characteristic_insert_input!, "on conflict condition" on_conflict: Join__Instrument_Characteristic_on_conflict): Join__Instrument_Characteristic
  """
  insert data into the table: "Join__Instrument_Measurement"
  """
  insert_Join__Instrument_Measurement("the rows to be inserted" objects: [Join__Instrument_Measurement_insert_input!]!, "on conflict condition" on_conflict: Join__Instrument_Measurement_on_conflict): Join__Instrument_Measurement_mutation_response
  """
  insert a single row into the table: "Join__Instrument_Measurement"
  """
  insert_Join__Instrument_Measurement_one("the row to be inserted" object: Join__Instrument_Measurement_insert_input!, "on conflict condition" on_conflict: Join__Instrument_Measurement_on_conflict): Join__Instrument_Measurement
  """
  insert data into the table: "Join__Launch_Vehicle_Attribute"
  """
  insert_Join__Launch_Vehicle_Attribute("the rows to be inserted" objects: [Join__Launch_Vehicle_Attribute_insert_input!]!, "on conflict condition" on_conflict: Join__Launch_Vehicle_Attribute_on_conflict): Join__Launch_Vehicle_Attribute_mutation_response
  """
  insert data into the table: "Join__Launch_Vehicle_Attribute_Values"
  """
  insert_Join__Launch_Vehicle_Attribute_Values("the rows to be inserted" objects: [Join__Launch_Vehicle_Attribute_Values_insert_input!]!, "on conflict condition" on_conflict: Join__Launch_Vehicle_Attribute_Values_on_conflict): Join__Launch_Vehicle_Attribute_Values_mutation_response
  """
  insert a single row into the table: "Join__Launch_Vehicle_Attribute_Values"
  """
  insert_Join__Launch_Vehicle_Attribute_Values_one("the row to be inserted" object: Join__Launch_Vehicle_Attribute_Values_insert_input!, "on conflict condition" on_conflict: Join__Launch_Vehicle_Attribute_Values_on_conflict): Join__Launch_Vehicle_Attribute_Values
  """
  insert a single row into the table: "Join__Launch_Vehicle_Attribute"
  """
  insert_Join__Launch_Vehicle_Attribute_one("the row to be inserted" object: Join__Launch_Vehicle_Attribute_insert_input!, "on conflict condition" on_conflict: Join__Launch_Vehicle_Attribute_on_conflict): Join__Launch_Vehicle_Attribute
  """
  insert data into the table: "Join__Measurement_Attribute_Values"
  """
  insert_Join__Measurement_Attribute_Values("the rows to be inserted" objects: [Join__Measurement_Attribute_Values_insert_input!]!, "on conflict condition" on_conflict: Join__Measurement_Attribute_Values_on_conflict): Join__Measurement_Attribute_Values_mutation_response
  """
  insert a single row into the table: "Join__Measurement_Attribute_Values"
  """
  insert_Join__Measurement_Attribute_Values_one("the row to be inserted" object: Join__Measurement_Attribute_Values_insert_input!, "on conflict condition" on_conflict: Join__Measurement_Attribute_Values_on_conflict): Join__Measurement_Attribute_Values
  """
  insert data into the table: "Join__Mission_Attribute_Values"
  """
  insert_Join__Mission_Attribute_Values("the rows to be inserted" objects: [Join__Mission_Attribute_Values_insert_input!]!, "on conflict condition" on_conflict: Join__Mission_Attribute_Values_on_conflict): Join__Mission_Attribute_Values_mutation_response
  """
  insert a single row into the table: "Join__Mission_Attribute_Values"
  """
  insert_Join__Mission_Attribute_Values_one("the row to be inserted" object: Join__Mission_Attribute_Values_insert_input!, "on conflict condition" on_conflict: Join__Mission_Attribute_Values_on_conflict): Join__Mission_Attribute_Values
  """
  insert data into the table: "Join__Orbit_Attribute"
  """
  insert_Join__Orbit_Attribute("the rows to be inserted" objects: [Join__Orbit_Attribute_insert_input!]!, "on conflict condition" on_conflict: Join__Orbit_Attribute_on_conflict): Join__Orbit_Attribute_mutation_response
  """
  insert data into the table: "Join__Orbit_Attribute_Values"
  """
  insert_Join__Orbit_Attribute_Values("the rows to be inserted" objects: [Join__Orbit_Attribute_Values_insert_input!]!, "on conflict condition" on_conflict: Join__Orbit_Attribute_Values_on_conflict): Join__Orbit_Attribute_Values_mutation_response
  """
  insert a single row into the table: "Join__Orbit_Attribute_Values"
  """
  insert_Join__Orbit_Attribute_Values_one("the row to be inserted" object: Join__Orbit_Attribute_Values_insert_input!, "on conflict condition" on_conflict: Join__Orbit_Attribute_Values_on_conflict): Join__Orbit_Attribute_Values
  """
  insert a single row into the table: "Join__Orbit_Attribute"
  """
  insert_Join__Orbit_Attribute_one("the row to be inserted" object: Join__Orbit_Attribute_insert_input!, "on conflict condition" on_conflict: Join__Orbit_Attribute_on_conflict): Join__Orbit_Attribute
  """
  insert data into the table: "Join__Problem_Instrument"
  """
  insert_Join__Problem_Instrument("the rows to be inserted" objects: [Join__Problem_Instrument_insert_input!]!, "on conflict condition" on_conflict: Join__Problem_Instrument_on_conflict): Join__Problem_Instrument_mutation_response
  """
  insert a single row into the table: "Join__Problem_Instrument"
  """
  insert_Join__Problem_Instrument_one("the row to be inserted" object: Join__Problem_Instrument_insert_input!, "on conflict condition" on_conflict: Join__Problem_Instrument_on_conflict): Join__Problem_Instrument
  """
  insert data into the table: "Join__Problem_Launch_Vehicle"
  """
  insert_Join__Problem_Launch_Vehicle("the rows to be inserted" objects: [Join__Problem_Launch_Vehicle_insert_input!]!, "on conflict condition" on_conflict: Join__Problem_Launch_Vehicle_on_conflict): Join__Problem_Launch_Vehicle_mutation_response
  """
  insert a single row into the table: "Join__Problem_Launch_Vehicle"
  """
  insert_Join__Problem_Launch_Vehicle_one("the row to be inserted" object: Join__Problem_Launch_Vehicle_insert_input!, "on conflict condition" on_conflict: Join__Problem_Launch_Vehicle_on_conflict): Join__Problem_Launch_Vehicle
  """
  insert data into the table: "Join__Problem_Orbit"
  """
  insert_Join__Problem_Orbit("the rows to be inserted" objects: [Join__Problem_Orbit_insert_input!]!, "on conflict condition" on_conflict: Join__Problem_Orbit_on_conflict): Join__Problem_Orbit_mutation_response
  """
  insert a single row into the table: "Join__Problem_Orbit"
  """
  insert_Join__Problem_Orbit_one("the row to be inserted" object: Join__Problem_Orbit_insert_input!, "on conflict condition" on_conflict: Join__Problem_Orbit_on_conflict): Join__Problem_Orbit
  """
  insert data into the table: "Launch_Vehicle"
  """
  insert_Launch_Vehicle("the rows to be inserted" objects: [Launch_Vehicle_insert_input!]!, "on conflict condition" on_conflict: Launch_Vehicle_on_conflict): Launch_Vehicle_mutation_response
  """
  insert data into the table: "Launch_Vehicle_Attribute"
  """
  insert_Launch_Vehicle_Attribute("the rows to be inserted" objects: [Launch_Vehicle_Attribute_insert_input!]!, "on conflict condition" on_conflict: Launch_Vehicle_Attribute_on_conflict): Launch_Vehicle_Attribute_mutation_response
  """
  insert a single row into the table: "Launch_Vehicle_Attribute"
  """
  insert_Launch_Vehicle_Attribute_one("the row to be inserted" object: Launch_Vehicle_Attribute_insert_input!, "on conflict condition" on_conflict: Launch_Vehicle_Attribute_on_conflict): Launch_Vehicle_Attribute
  """
  insert data into the table: "Launch_Vehicle_Mission_Analysis"
  """
  insert_Launch_Vehicle_Mission_Analysis("the rows to be inserted" objects: [Launch_Vehicle_Mission_Analysis_insert_input!]!, "on conflict condition" on_conflict: Launch_Vehicle_Mission_Analysis_on_conflict): Launch_Vehicle_Mission_Analysis_mutation_response
  """
  insert a single row into the table: "Launch_Vehicle_Mission_Analysis"
  """
  insert_Launch_Vehicle_Mission_Analysis_one("the row to be inserted" object: Launch_Vehicle_Mission_Analysis_insert_input!, "on conflict condition" on_conflict: Launch_Vehicle_Mission_Analysis_on_conflict): Launch_Vehicle_Mission_Analysis
  """
  insert a single row into the table: "Launch_Vehicle"
  """
  insert_Launch_Vehicle_one("the row to be inserted" object: Launch_Vehicle_insert_input!, "on conflict condition" on_conflict: Launch_Vehicle_on_conflict): Launch_Vehicle
  """
  insert data into the table: "Measurement"
  """
  insert_Measurement("the rows to be inserted" objects: [Measurement_insert_input!]!, "on conflict condition" on_conflict: Measurement_on_conflict): Measurement_mutation_response
  """
  insert data into the table: "Measurement_Attribute"
  """
  insert_Measurement_Attribute("the rows to be inserted" objects: [Measurement_Attribute_insert_input!]!, "on conflict condition" on_conflict: Measurement_Attribute_on_conflict): Measurement_Attribute_mutation_response
  """
  insert a single row into the table: "Measurement_Attribute"
  """
  insert_Measurement_Attribute_one("the row to be inserted" object: Measurement_Attribute_insert_input!, "on conflict condition" on_conflict: Measurement_Attribute_on_conflict): Measurement_Attribute
  """
  insert a single row into the table: "Measurement"
  """
  insert_Measurement_one("the row to be inserted" object: Measurement_insert_input!, "on conflict condition" on_conflict: Measurement_on_conflict): Measurement
  """
  insert data into the table: "Mission_Attribute"
  """
  insert_Mission_Attribute("the rows to be inserted" objects: [Mission_Attribute_insert_input!]!, "on conflict condition" on_conflict: Mission_Attribute_on_conflict): Mission_Attribute_mutation_response
  """
  insert a single row into the table: "Mission_Attribute"
  """
  insert_Mission_Attribute_one("the row to be inserted" object: Mission_Attribute_insert_input!, "on conflict condition" on_conflict: Mission_Attribute_on_conflict): Mission_Attribute
  """
  insert data into the table: "ObjectiveScoreExplanation"
  """
  insert_ObjectiveScoreExplanation("the rows to be inserted" objects: [ObjectiveScoreExplanation_insert_input!]!, "on conflict condition" on_conflict: ObjectiveScoreExplanation_on_conflict): ObjectiveScoreExplanation_mutation_response
  """
  insert a single row into the table: "ObjectiveScoreExplanation"
  """
  insert_ObjectiveScoreExplanation_one("the row to be inserted" object: ObjectiveScoreExplanation_insert_input!, "on conflict condition" on_conflict: ObjectiveScoreExplanation_on_conflict): ObjectiveScoreExplanation
  """
  insert data into the table: "Orbit"
  """
  insert_Orbit("the rows to be inserted" objects: [Orbit_insert_input!]!, "on conflict condition" on_conflict: Orbit_on_conflict): Orbit_mutation_response
  """
  insert data into the table: "Orbit_Attribute"
  """
  insert_Orbit_Attribute("the rows to be inserted" objects: [Orbit_Attribute_insert_input!]!, "on conflict condition" on_conflict: Orbit_Attribute_on_conflict): Orbit_Attribute_mutation_response
  """
  insert a single row into the table: "Orbit_Attribute"
  """
  insert_Orbit_Attribute_one("the row to be inserted" object: Orbit_Attribute_insert_input!, "on conflict condition" on_conflict: Orbit_Attribute_on_conflict): Orbit_Attribute
  """
  insert a single row into the table: "Orbit"
  """
  insert_Orbit_one("the row to be inserted" object: Orbit_insert_input!, "on conflict condition" on_conflict: Orbit_on_conflict): Orbit
  """
  insert data into the table: "PanelScoreExplanation"
  """
  insert_PanelScoreExplanation("the rows to be inserted" objects: [PanelScoreExplanation_insert_input!]!, "on conflict condition" on_conflict: PanelScoreExplanation_on_conflict): PanelScoreExplanation_mutation_response
  """
  insert a single row into the table: "PanelScoreExplanation"
  """
  insert_PanelScoreExplanation_one("the row to be inserted" object: PanelScoreExplanation_insert_input!, "on conflict condition" on_conflict: PanelScoreExplanation_on_conflict): PanelScoreExplanation
  """
  insert data into the table: "Power_Mission_Analysis"
  """
  insert_Power_Mission_Analysis("the rows to be inserted" objects: [Power_Mission_Analysis_insert_input!]!, "on conflict condition" on_conflict: Power_Mission_Analysis_on_conflict): Power_Mission_Analysis_mutation_response
  """
  insert a single row into the table: "Power_Mission_Analysis"
  """
  insert_Power_Mission_Analysis_one("the row to be inserted" object: Power_Mission_Analysis_insert_input!, "on conflict condition" on_conflict: Power_Mission_Analysis_on_conflict): Power_Mission_Analysis
  """
  insert data into the table: "Problem"
  """
  insert_Problem("the rows to be inserted" objects: [Problem_insert_input!]!, "on conflict condition" on_conflict: Problem_on_conflict): Problem_mutation_response
  """
  insert a single row into the table: "Problem"
  """
  insert_Problem_one("the row to be inserted" object: Problem_insert_input!, "on conflict condition" on_conflict: Problem_on_conflict): Problem
  """
  insert data into the table: "Requirement_Rule_Attribute"
  """
  insert_Requirement_Rule_Attribute("the rows to be inserted" objects: [Requirement_Rule_Attribute_insert_input!]!, "on conflict condition" on_conflict: Requirement_Rule_Attribute_on_conflict): Requirement_Rule_Attribute_mutation_response
  """
  insert a single row into the table: "Requirement_Rule_Attribute"
  """
  insert_Requirement_Rule_Attribute_one("the row to be inserted" object: Requirement_Rule_Attribute_insert_input!, "on conflict condition" on_conflict: Requirement_Rule_Attribute_on_conflict): Requirement_Rule_Attribute
  """
  insert data into the table: "Requirement_Rule_Case"
  """
  insert_Requirement_Rule_Case("the rows to be inserted" objects: [Requirement_Rule_Case_insert_input!]!, "on conflict condition" on_conflict: Requirement_Rule_Case_on_conflict): Requirement_Rule_Case_mutation_response
  """
  insert a single row into the table: "Requirement_Rule_Case"
  """
  insert_Requirement_Rule_Case_one("the row to be inserted" object: Requirement_Rule_Case_insert_input!, "on conflict condition" on_conflict: Requirement_Rule_Case_on_conflict): Requirement_Rule_Case
  """
  insert data into the table: "Stakeholder_Needs_Objective"
  """
  insert_Stakeholder_Needs_Objective("the rows to be inserted" objects: [Stakeholder_Needs_Objective_insert_input!]!, "on conflict condition" on_conflict: Stakeholder_Needs_Objective_on_conflict): Stakeholder_Needs_Objective_mutation_response
  """
  insert a single row into the table: "Stakeholder_Needs_Objective"
  """
  insert_Stakeholder_Needs_Objective_one("the row to be inserted" object: Stakeholder_Needs_Objective_insert_input!, "on conflict condition" on_conflict: Stakeholder_Needs_Objective_on_conflict): Stakeholder_Needs_Objective
  """
  insert data into the table: "Stakeholder_Needs_Panel"
  """
  insert_Stakeholder_Needs_Panel("the rows to be inserted" objects: [Stakeholder_Needs_Panel_insert_input!]!, "on conflict condition" on_conflict: Stakeholder_Needs_Panel_on_conflict): Stakeholder_Needs_Panel_mutation_response
  """
  insert a single row into the table: "Stakeholder_Needs_Panel"
  """
  insert_Stakeholder_Needs_Panel_one("the row to be inserted" object: Stakeholder_Needs_Panel_insert_input!, "on conflict condition" on_conflict: Stakeholder_Needs_Panel_on_conflict): Stakeholder_Needs_Panel
  """
  insert data into the table: "Stakeholder_Needs_Subobjective"
  """
  insert_Stakeholder_Needs_Subobjective("the rows to be inserted" objects: [Stakeholder_Needs_Subobjective_insert_input!]!, "on conflict condition" on_conflict: Stakeholder_Needs_Subobjective_on_conflict): Stakeholder_Needs_Subobjective_mutation_response
  """
  insert a single row into the table: "Stakeholder_Needs_Subobjective"
  """
  insert_Stakeholder_Needs_Subobjective_one("the row to be inserted" object: Stakeholder_Needs_Subobjective_insert_input!, "on conflict condition" on_conflict: Stakeholder_Needs_Subobjective_on_conflict): Stakeholder_Needs_Subobjective
  """
  insert data into the table: "SubobjectiveScoreExplanation"
  """
  insert_SubobjectiveScoreExplanation("the rows to be inserted" objects: [SubobjectiveScoreExplanation_insert_input!]!, "on conflict condition" on_conflict: SubobjectiveScoreExplanation_on_conflict): SubobjectiveScoreExplanation_mutation_response
  """
  insert a single row into the table: "SubobjectiveScoreExplanation"
  """
  insert_SubobjectiveScoreExplanation_one("the row to be inserted" object: SubobjectiveScoreExplanation_insert_input!, "on conflict condition" on_conflict: SubobjectiveScoreExplanation_on_conflict): SubobjectiveScoreExplanation
  """
  insert data into the table: "Walker_Mission_Analysis"
  """
  insert_Walker_Mission_Analysis("the rows to be inserted" objects: [Walker_Mission_Analysis_insert_input!]!, "on conflict condition" on_conflict: Walker_Mission_Analysis_on_conflict): Walker_Mission_Analysis_mutation_response
  """
  insert a single row into the table: "Walker_Mission_Analysis"
  """
  insert_Walker_Mission_Analysis_one("the row to be inserted" object: Walker_Mission_Analysis_insert_input!, "on conflict condition" on_conflict: Walker_Mission_Analysis_on_conflict): Walker_Mission_Analysis
  """
  insert data into the table: "auth_group"
  """
  insert_auth_group("the rows to be inserted" objects: [auth_group_insert_input!]!, "on conflict condition" on_conflict: auth_group_on_conflict): auth_group_mutation_response
  """
  insert a single row into the table: "auth_group"
  """
  insert_auth_group_one("the row to be inserted" object: auth_group_insert_input!, "on conflict condition" on_conflict: auth_group_on_conflict): auth_group
  """
  insert data into the table: "auth_group_permissions"
  """
  insert_auth_group_permissions("the rows to be inserted" objects: [auth_group_permissions_insert_input!]!, "on conflict condition" on_conflict: auth_group_permissions_on_conflict): auth_group_permissions_mutation_response
  """
  insert a single row into the table: "auth_group_permissions"
  """
  insert_auth_group_permissions_one("the row to be inserted" object: auth_group_permissions_insert_input!, "on conflict condition" on_conflict: auth_group_permissions_on_conflict): auth_group_permissions
  """
  insert data into the table: "auth_permission"
  """
  insert_auth_permission("the rows to be inserted" objects: [auth_permission_insert_input!]!, "on conflict condition" on_conflict: auth_permission_on_conflict): auth_permission_mutation_response
  """
  insert a single row into the table: "auth_permission"
  """
  insert_auth_permission_one("the row to be inserted" object: auth_permission_insert_input!, "on conflict condition" on_conflict: auth_permission_on_conflict): auth_permission
  """
  insert data into the table: "auth_user"
  """
  insert_auth_user("the rows to be inserted" objects: [auth_user_insert_input!]!, "on conflict condition" on_conflict: auth_user_on_conflict): auth_user_mutation_response
  """
  insert data into the table: "auth_user_groups"
  """
  insert_auth_user_groups("the rows to be inserted" objects: [auth_user_groups_insert_input!]!, "on conflict condition" on_conflict: auth_user_groups_on_conflict): auth_user_groups_mutation_response
  """
  insert a single row into the table: "auth_user_groups"
  """
  insert_auth_user_groups_one("the row to be inserted" object: auth_user_groups_insert_input!, "on conflict condition" on_conflict: auth_user_groups_on_conflict): auth_user_groups
  """
  insert a single row into the table: "auth_user"
  """
  insert_auth_user_one("the row to be inserted" object: auth_user_insert_input!, "on conflict condition" on_conflict: auth_user_on_conflict): auth_user
  """
  insert data into the table: "auth_user_user_permissions"
  """
  insert_auth_user_user_permissions("the rows to be inserted" objects: [auth_user_user_permissions_insert_input!]!, "on conflict condition" on_conflict: auth_user_user_permissions_on_conflict): auth_user_user_permissions_mutation_response
  """
  insert a single row into the table: "auth_user_user_permissions"
  """
  insert_auth_user_user_permissions_one("the row to be inserted" object: auth_user_user_permissions_insert_input!, "on conflict condition" on_conflict: auth_user_user_permissions_on_conflict): auth_user_user_permissions
  """
  insert data into the table: "daphne_context_dialoguecontext"
  """
  insert_daphne_context_dialoguecontext("the rows to be inserted" objects: [daphne_context_dialoguecontext_insert_input!]!, "on conflict condition" on_conflict: daphne_context_dialoguecontext_on_conflict): daphne_context_dialoguecontext_mutation_response
  """
  insert a single row into the table: "daphne_context_dialoguecontext"
  """
  insert_daphne_context_dialoguecontext_one("the row to be inserted" object: daphne_context_dialoguecontext_insert_input!, "on conflict condition" on_conflict: daphne_context_dialoguecontext_on_conflict): daphne_context_dialoguecontext
  """
  insert data into the table: "daphne_context_dialoguehistory"
  """
  insert_daphne_context_dialoguehistory("the rows to be inserted" objects: [daphne_context_dialoguehistory_insert_input!]!, "on conflict condition" on_conflict: daphne_context_dialoguehistory_on_conflict): daphne_context_dialoguehistory_mutation_response
  """
  insert a single row into the table: "daphne_context_dialoguehistory"
  """
  insert_daphne_context_dialoguehistory_one("the row to be inserted" object: daphne_context_dialoguehistory_insert_input!, "on conflict condition" on_conflict: daphne_context_dialoguehistory_on_conflict): daphne_context_dialoguehistory
  """
  insert data into the table: "daphne_context_mycroftuser"
  """
  insert_daphne_context_mycroftuser("the rows to be inserted" objects: [daphne_context_mycroftuser_insert_input!]!, "on conflict condition" on_conflict: daphne_context_mycroftuser_on_conflict): daphne_context_mycroftuser_mutation_response
  """
  insert a single row into the table: "daphne_context_mycroftuser"
  """
  insert_daphne_context_mycroftuser_one("the row to be inserted" object: daphne_context_mycroftuser_insert_input!, "on conflict condition" on_conflict: daphne_context_mycroftuser_on_conflict): daphne_context_mycroftuser
  """
  insert data into the table: "daphne_context_userinformation"
  """
  insert_daphne_context_userinformation("the rows to be inserted" objects: [daphne_context_userinformation_insert_input!]!, "on conflict condition" on_conflict: daphne_context_userinformation_on_conflict): daphne_context_userinformation_mutation_response
  """
  insert a single row into the table: "daphne_context_userinformation"
  """
  insert_daphne_context_userinformation_one("the row to be inserted" object: daphne_context_userinformation_insert_input!, "on conflict condition" on_conflict: daphne_context_userinformation_on_conflict): daphne_context_userinformation
  """
  insert data into the table: "django_admin_log"
  """
  insert_django_admin_log("the rows to be inserted" objects: [django_admin_log_insert_input!]!, "on conflict condition" on_conflict: django_admin_log_on_conflict): django_admin_log_mutation_response
  """
  insert a single row into the table: "django_admin_log"
  """
  insert_django_admin_log_one("the row to be inserted" object: django_admin_log_insert_input!, "on conflict condition" on_conflict: django_admin_log_on_conflict): django_admin_log
  """
  insert data into the table: "django_content_type"
  """
  insert_django_content_type("the rows to be inserted" objects: [django_content_type_insert_input!]!, "on conflict condition" on_conflict: django_content_type_on_conflict): django_content_type_mutation_response
  """
  insert a single row into the table: "django_content_type"
  """
  insert_django_content_type_one("the row to be inserted" object: django_content_type_insert_input!, "on conflict condition" on_conflict: django_content_type_on_conflict): django_content_type
  """
  insert data into the table: "django_migrations"
  """
  insert_django_migrations("the rows to be inserted" objects: [django_migrations_insert_input!]!, "on conflict condition" on_conflict: django_migrations_on_conflict): django_migrations_mutation_response
  """
  insert a single row into the table: "django_migrations"
  """
  insert_django_migrations_one("the row to be inserted" object: django_migrations_insert_input!, "on conflict condition" on_conflict: django_migrations_on_conflict): django_migrations
  """
  insert data into the table: "django_session"
  """
  insert_django_session("the rows to be inserted" objects: [django_session_insert_input!]!, "on conflict condition" on_conflict: django_session_on_conflict): django_session_mutation_response
  """
  insert a single row into the table: "django_session"
  """
  insert_django_session_one("the row to be inserted" object: django_session_insert_input!, "on conflict condition" on_conflict: django_session_on_conflict): django_session
  """
  insert data into the table: "experiment_allowedcommand"
  """
  insert_experiment_allowedcommand("the rows to be inserted" objects: [experiment_allowedcommand_insert_input!]!, "on conflict condition" on_conflict: experiment_allowedcommand_on_conflict): experiment_allowedcommand_mutation_response
  """
  insert a single row into the table: "experiment_allowedcommand"
  """
  insert_experiment_allowedcommand_one("the row to be inserted" object: experiment_allowedcommand_insert_input!, "on conflict condition" on_conflict: experiment_allowedcommand_on_conflict): experiment_allowedcommand
  """
  insert data into the table: "experiment_experimentaction"
  """
  insert_experiment_experimentaction("the rows to be inserted" objects: [experiment_experimentaction_insert_input!]!, "on conflict condition" on_conflict: experiment_experimentaction_on_conflict): experiment_experimentaction_mutation_response
  """
  insert a single row into the table: "experiment_experimentaction"
  """
  insert_experiment_experimentaction_one("the row to be inserted" object: experiment_experimentaction_insert_input!, "on conflict condition" on_conflict: experiment_experimentaction_on_conflict): experiment_experimentaction
  """
  insert data into the table: "experiment_experimentcontext"
  """
  insert_experiment_experimentcontext("the rows to be inserted" objects: [experiment_experimentcontext_insert_input!]!, "on conflict condition" on_conflict: experiment_experimentcontext_on_conflict): experiment_experimentcontext_mutation_response
  """
  insert a single row into the table: "experiment_experimentcontext"
  """
  insert_experiment_experimentcontext_one("the row to be inserted" object: experiment_experimentcontext_insert_input!, "on conflict condition" on_conflict: experiment_experimentcontext_on_conflict): experiment_experimentcontext
  """
  insert data into the table: "experiment_experimentstage"
  """
  insert_experiment_experimentstage("the rows to be inserted" objects: [experiment_experimentstage_insert_input!]!, "on conflict condition" on_conflict: experiment_experimentstage_on_conflict): experiment_experimentstage_mutation_response
  """
  insert a single row into the table: "experiment_experimentstage"
  """
  insert_experiment_experimentstage_one("the row to be inserted" object: experiment_experimentstage_insert_input!, "on conflict condition" on_conflict: experiment_experimentstage_on_conflict): experiment_experimentstage
  """
  update data of the table: "Accepted_Value"
  """
  update_Accepted_Value("increments the numeric columns with given value of the filtered values" _inc: Accepted_Value_inc_input, "sets the columns of the filtered rows to the given values" _set: Accepted_Value_set_input, "filter the rows which have to be updated" where: Accepted_Value_bool_exp!): Accepted_Value_mutation_response
  """
  update single row of the table: "Accepted_Value"
  """
  update_Accepted_Value_by_pk("increments the numeric columns with given value of the filtered values" _inc: Accepted_Value_inc_input, "sets the columns of the filtered rows to the given values" _set: Accepted_Value_set_input, pk_columns: Accepted_Value_pk_columns_input!): Accepted_Value
  """
  update data of the table: "Architecture"
  """
  update_Architecture("increments the numeric columns with given value of the filtered values" _inc: Architecture_inc_input, "sets the columns of the filtered rows to the given values" _set: Architecture_set_input, "filter the rows which have to be updated" where: Architecture_bool_exp!): Architecture_mutation_response
  """
  update data of the table: "ArchitectureBudget"
  """
  update_ArchitectureBudget("increments the numeric columns with given value of the filtered values" _inc: ArchitectureBudget_inc_input, "sets the columns of the filtered rows to the given values" _set: ArchitectureBudget_set_input, "filter the rows which have to be updated" where: ArchitectureBudget_bool_exp!): ArchitectureBudget_mutation_response
  """
  update single row of the table: "ArchitectureBudget"
  """
  update_ArchitectureBudget_by_pk("increments the numeric columns with given value of the filtered values" _inc: ArchitectureBudget_inc_input, "sets the columns of the filtered rows to the given values" _set: ArchitectureBudget_set_input, pk_columns: ArchitectureBudget_pk_columns_input!): ArchitectureBudget
  """
  update data of the table: "ArchitectureCostInformation"
  """
  update_ArchitectureCostInformation("increments the numeric columns with given value of the filtered values" _inc: ArchitectureCostInformation_inc_input, "sets the columns of the filtered rows to the given values" _set: ArchitectureCostInformation_set_input, "filter the rows which have to be updated" where: ArchitectureCostInformation_bool_exp!): ArchitectureCostInformation_mutation_response
  """
  update single row of the table: "ArchitectureCostInformation"
  """
  update_ArchitectureCostInformation_by_pk("increments the numeric columns with given value of the filtered values" _inc: ArchitectureCostInformation_inc_input, "sets the columns of the filtered rows to the given values" _set: ArchitectureCostInformation_set_input, pk_columns: ArchitectureCostInformation_pk_columns_input!): ArchitectureCostInformation
  """
  update data of the table: "ArchitecturePayload"
  """
  update_ArchitecturePayload("increments the numeric columns with given value of the filtered values" _inc: ArchitecturePayload_inc_input, "sets the columns of the filtered rows to the given values" _set: ArchitecturePayload_set_input, "filter the rows which have to be updated" where: ArchitecturePayload_bool_exp!): ArchitecturePayload_mutation_response
  """
  update single row of the table: "ArchitecturePayload"
  """
  update_ArchitecturePayload_by_pk("increments the numeric columns with given value of the filtered values" _inc: ArchitecturePayload_inc_input, "sets the columns of the filtered rows to the given values" _set: ArchitecturePayload_set_input, pk_columns: ArchitecturePayload_pk_columns_input!): ArchitecturePayload
  """
  update data of the table: "ArchitectureScoreExplanation"
  """
  update_ArchitectureScoreExplanation("increments the numeric columns with given value of the filtered values" _inc: ArchitectureScoreExplanation_inc_input, "sets the columns of the filtered rows to the given values" _set: ArchitectureScoreExplanation_set_input, "filter the rows which have to be updated" where: ArchitectureScoreExplanation_bool_exp!): ArchitectureScoreExplanation_mutation_response
  """
  update single row of the table: "ArchitectureScoreExplanation"
  """
  update_ArchitectureScoreExplanation_by_pk("increments the numeric columns with given value of the filtered values" _inc: ArchitectureScoreExplanation_inc_input, "sets the columns of the filtered rows to the given values" _set: ArchitectureScoreExplanation_set_input, pk_columns: ArchitectureScoreExplanation_pk_columns_input!): ArchitectureScoreExplanation
  """
  update single row of the table: "Architecture"
  """
  update_Architecture_by_pk("increments the numeric columns with given value of the filtered values" _inc: Architecture_inc_input, "sets the columns of the filtered rows to the given values" _set: Architecture_set_input, pk_columns: Architecture_pk_columns_input!): Architecture
  """
  update data of the table: "Dataset"
  """
  update_Dataset("increments the numeric columns with given value of the filtered values" _inc: Dataset_inc_input, "sets the columns of the filtered rows to the given values" _set: Dataset_set_input, "filter the rows which have to be updated" where: Dataset_bool_exp!): Dataset_mutation_response
  """
  update single row of the table: "Dataset"
  """
  update_Dataset_by_pk("increments the numeric columns with given value of the filtered values" _inc: Dataset_inc_input, "sets the columns of the filtered rows to the given values" _set: Dataset_set_input, pk_columns: Dataset_pk_columns_input!): Dataset
  """
  update data of the table: "EDL_edlcontext"
  """
  update_EDL_edlcontext("increments the numeric columns with given value of the filtered values" _inc: EDL_edlcontext_inc_input, "sets the columns of the filtered rows to the given values" _set: EDL_edlcontext_set_input, "filter the rows which have to be updated" where: EDL_edlcontext_bool_exp!): EDL_edlcontext_mutation_response
  """
  update single row of the table: "EDL_edlcontext"
  """
  update_EDL_edlcontext_by_pk("increments the numeric columns with given value of the filtered values" _inc: EDL_edlcontext_inc_input, "sets the columns of the filtered rows to the given values" _set: EDL_edlcontext_set_input, pk_columns: EDL_edlcontext_pk_columns_input!): EDL_edlcontext
  """
  update data of the table: "EOSS_activecontext"
  """
  update_EOSS_activecontext("increments the numeric columns with given value of the filtered values" _inc: EOSS_activecontext_inc_input, "sets the columns of the filtered rows to the given values" _set: EOSS_activecontext_set_input, "filter the rows which have to be updated" where: EOSS_activecontext_bool_exp!): EOSS_activecontext_mutation_response
  """
  update single row of the table: "EOSS_activecontext"
  """
  update_EOSS_activecontext_by_pk("increments the numeric columns with given value of the filtered values" _inc: EOSS_activecontext_inc_input, "sets the columns of the filtered rows to the given values" _set: EOSS_activecontext_set_input, pk_columns: EOSS_activecontext_pk_columns_input!): EOSS_activecontext
  """
  update data of the table: "EOSS_engineercontext"
  """
  update_EOSS_engineercontext("increments the numeric columns with given value of the filtered values" _inc: EOSS_engineercontext_inc_input, "sets the columns of the filtered rows to the given values" _set: EOSS_engineercontext_set_input, "filter the rows which have to be updated" where: EOSS_engineercontext_bool_exp!): EOSS_engineercontext_mutation_response
  """
  update single row of the table: "EOSS_engineercontext"
  """
  update_EOSS_engineercontext_by_pk("increments the numeric columns with given value of the filtered values" _inc: EOSS_engineercontext_inc_input, "sets the columns of the filtered rows to the given values" _set: EOSS_engineercontext_set_input, pk_columns: EOSS_engineercontext_pk_columns_input!): EOSS_engineercontext
  """
  update data of the table: "EOSS_eosscontext"
  """
  update_EOSS_eosscontext("append existing jsonb value of filtered columns with new jsonb value" _append: EOSS_eosscontext_append_input, "delete the field or element with specified path (for JSON arrays, negative integers count from the end)" _delete_at_path: EOSS_eosscontext_delete_at_path_input, "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array" _delete_elem: EOSS_eosscontext_delete_elem_input, "delete key/value pair or string element. key/value pairs are matched based on their key value" _delete_key: EOSS_eosscontext_delete_key_input, "increments the numeric columns with given value of the filtered values" _inc: EOSS_eosscontext_inc_input, "prepend existing jsonb value of filtered columns with new jsonb value" _prepend: EOSS_eosscontext_prepend_input, "sets the columns of the filtered rows to the given values" _set: EOSS_eosscontext_set_input, "filter the rows which have to be updated" where: EOSS_eosscontext_bool_exp!): EOSS_eosscontext_mutation_response
  """
  update single row of the table: "EOSS_eosscontext"
  """
  update_EOSS_eosscontext_by_pk("append existing jsonb value of filtered columns with new jsonb value" _append: EOSS_eosscontext_append_input, "delete the field or element with specified path (for JSON arrays, negative integers count from the end)" _delete_at_path: EOSS_eosscontext_delete_at_path_input, "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array" _delete_elem: EOSS_eosscontext_delete_elem_input, "delete key/value pair or string element. key/value pairs are matched based on their key value" _delete_key: EOSS_eosscontext_delete_key_input, "increments the numeric columns with given value of the filtered values" _inc: EOSS_eosscontext_inc_input, "prepend existing jsonb value of filtered columns with new jsonb value" _prepend: EOSS_eosscontext_prepend_input, "sets the columns of the filtered rows to the given values" _set: EOSS_eosscontext_set_input, pk_columns: EOSS_eosscontext_pk_columns_input!): EOSS_eosscontext
  """
  update data of the table: "EOSS_eossdialoguecontext"
  """
  update_EOSS_eossdialoguecontext("increments the numeric columns with given value of the filtered values" _inc: EOSS_eossdialoguecontext_inc_input, "sets the columns of the filtered rows to the given values" _set: EOSS_eossdialoguecontext_set_input, "filter the rows which have to be updated" where: EOSS_eossdialoguecontext_bool_exp!): EOSS_eossdialoguecontext_mutation_response
  """
  update single row of the table: "EOSS_eossdialoguecontext"
  """
  update_EOSS_eossdialoguecontext_by_pk("increments the numeric columns with given value of the filtered values" _inc: EOSS_eossdialoguecontext_inc_input, "sets the columns of the filtered rows to the given values" _set: EOSS_eossdialoguecontext_set_input, pk_columns: EOSS_eossdialoguecontext_pk_columns_input!): EOSS_eossdialoguecontext
  """
  update data of the table: "Fuzzy_Attribute"
  """
  update_Fuzzy_Attribute("increments the numeric columns with given value of the filtered values" _inc: Fuzzy_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Fuzzy_Attribute_set_input, "filter the rows which have to be updated" where: Fuzzy_Attribute_bool_exp!): Fuzzy_Attribute_mutation_response
  """
  update single row of the table: "Fuzzy_Attribute"
  """
  update_Fuzzy_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Fuzzy_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Fuzzy_Attribute_set_input, pk_columns: Fuzzy_Attribute_pk_columns_input!): Fuzzy_Attribute
  """
  update data of the table: "Fuzzy_Value"
  """
  update_Fuzzy_Value("increments the numeric columns with given value of the filtered values" _inc: Fuzzy_Value_inc_input, "sets the columns of the filtered rows to the given values" _set: Fuzzy_Value_set_input, "filter the rows which have to be updated" where: Fuzzy_Value_bool_exp!): Fuzzy_Value_mutation_response
  """
  update single row of the table: "Fuzzy_Value"
  """
  update_Fuzzy_Value_by_pk("increments the numeric columns with given value of the filtered values" _inc: Fuzzy_Value_inc_input, "sets the columns of the filtered rows to the given values" _set: Fuzzy_Value_set_input, pk_columns: Fuzzy_Value_pk_columns_input!): Fuzzy_Value
  """
  update data of the table: "Group"
  """
  update_Group("increments the numeric columns with given value of the filtered values" _inc: Group_inc_input, "sets the columns of the filtered rows to the given values" _set: Group_set_input, "filter the rows which have to be updated" where: Group_bool_exp!): Group_mutation_response
  """
  update single row of the table: "Group"
  """
  update_Group_by_pk("increments the numeric columns with given value of the filtered values" _inc: Group_inc_input, "sets the columns of the filtered rows to the given values" _set: Group_set_input, pk_columns: Group_pk_columns_input!): Group
  """
  update data of the table: "Inheritence_Attribute"
  """
  update_Inheritence_Attribute("increments the numeric columns with given value of the filtered values" _inc: Inheritence_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Inheritence_Attribute_set_input, "filter the rows which have to be updated" where: Inheritence_Attribute_bool_exp!): Inheritence_Attribute_mutation_response
  """
  update single row of the table: "Inheritence_Attribute"
  """
  update_Inheritence_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Inheritence_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Inheritence_Attribute_set_input, pk_columns: Inheritence_Attribute_pk_columns_input!): Inheritence_Attribute
  """
  update data of the table: "Instrument"
  """
  update_Instrument("increments the numeric columns with given value of the filtered values" _inc: Instrument_inc_input, "sets the columns of the filtered rows to the given values" _set: Instrument_set_input, "filter the rows which have to be updated" where: Instrument_bool_exp!): Instrument_mutation_response
  """
  update data of the table: "Instrument_Attribute"
  """
  update_Instrument_Attribute("increments the numeric columns with given value of the filtered values" _inc: Instrument_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Instrument_Attribute_set_input, "filter the rows which have to be updated" where: Instrument_Attribute_bool_exp!): Instrument_Attribute_mutation_response
  """
  update single row of the table: "Instrument_Attribute"
  """
  update_Instrument_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Instrument_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Instrument_Attribute_set_input, pk_columns: Instrument_Attribute_pk_columns_input!): Instrument_Attribute
  """
  update single row of the table: "Instrument"
  """
  update_Instrument_by_pk("increments the numeric columns with given value of the filtered values" _inc: Instrument_inc_input, "sets the columns of the filtered rows to the given values" _set: Instrument_set_input, pk_columns: Instrument_pk_columns_input!): Instrument
  """
  update data of the table: "Join__AuthUser_Group"
  """
  update_Join__AuthUser_Group("increments the numeric columns with given value of the filtered values" _inc: Join__AuthUser_Group_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__AuthUser_Group_set_input, "filter the rows which have to be updated" where: Join__AuthUser_Group_bool_exp!): Join__AuthUser_Group_mutation_response
  """
  update single row of the table: "Join__AuthUser_Group"
  """
  update_Join__AuthUser_Group_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__AuthUser_Group_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__AuthUser_Group_set_input, pk_columns: Join__AuthUser_Group_pk_columns_input!): Join__AuthUser_Group
  """
  update data of the table: "Join__Case_Attribute"
  """
  update_Join__Case_Attribute("increments the numeric columns with given value of the filtered values" _inc: Join__Case_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Case_Attribute_set_input, "filter the rows which have to be updated" where: Join__Case_Attribute_bool_exp!): Join__Case_Attribute_mutation_response
  """
  update single row of the table: "Join__Case_Attribute"
  """
  update_Join__Case_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Case_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Case_Attribute_set_input, pk_columns: Join__Case_Attribute_pk_columns_input!): Join__Case_Attribute
  """
  update data of the table: "Join__Instrument_Attribute_Values"
  """
  update_Join__Instrument_Attribute_Values("increments the numeric columns with given value of the filtered values" _inc: Join__Instrument_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Instrument_Attribute_Values_set_input, "filter the rows which have to be updated" where: Join__Instrument_Attribute_Values_bool_exp!): Join__Instrument_Attribute_Values_mutation_response
  """
  update single row of the table: "Join__Instrument_Attribute_Values"
  """
  update_Join__Instrument_Attribute_Values_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Instrument_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Instrument_Attribute_Values_set_input, pk_columns: Join__Instrument_Attribute_Values_pk_columns_input!): Join__Instrument_Attribute_Values
  """
  update data of the table: "Join__Instrument_Capability"
  """
  update_Join__Instrument_Capability("increments the numeric columns with given value of the filtered values" _inc: Join__Instrument_Capability_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Instrument_Capability_set_input, "filter the rows which have to be updated" where: Join__Instrument_Capability_bool_exp!): Join__Instrument_Capability_mutation_response
  """
  update single row of the table: "Join__Instrument_Capability"
  """
  update_Join__Instrument_Capability_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Instrument_Capability_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Instrument_Capability_set_input, pk_columns: Join__Instrument_Capability_pk_columns_input!): Join__Instrument_Capability
  """
  update data of the table: "Join__Instrument_Characteristic"
  """
  update_Join__Instrument_Characteristic("increments the numeric columns with given value of the filtered values" _inc: Join__Instrument_Characteristic_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Instrument_Characteristic_set_input, "filter the rows which have to be updated" where: Join__Instrument_Characteristic_bool_exp!): Join__Instrument_Characteristic_mutation_response
  """
  update single row of the table: "Join__Instrument_Characteristic"
  """
  update_Join__Instrument_Characteristic_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Instrument_Characteristic_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Instrument_Characteristic_set_input, pk_columns: Join__Instrument_Characteristic_pk_columns_input!): Join__Instrument_Characteristic
  """
  update data of the table: "Join__Instrument_Measurement"
  """
  update_Join__Instrument_Measurement("increments the numeric columns with given value of the filtered values" _inc: Join__Instrument_Measurement_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Instrument_Measurement_set_input, "filter the rows which have to be updated" where: Join__Instrument_Measurement_bool_exp!): Join__Instrument_Measurement_mutation_response
  """
  update single row of the table: "Join__Instrument_Measurement"
  """
  update_Join__Instrument_Measurement_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Instrument_Measurement_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Instrument_Measurement_set_input, pk_columns: Join__Instrument_Measurement_pk_columns_input!): Join__Instrument_Measurement
  """
  update data of the table: "Join__Launch_Vehicle_Attribute"
  """
  update_Join__Launch_Vehicle_Attribute("increments the numeric columns with given value of the filtered values" _inc: Join__Launch_Vehicle_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Launch_Vehicle_Attribute_set_input, "filter the rows which have to be updated" where: Join__Launch_Vehicle_Attribute_bool_exp!): Join__Launch_Vehicle_Attribute_mutation_response
  """
  update data of the table: "Join__Launch_Vehicle_Attribute_Values"
  """
  update_Join__Launch_Vehicle_Attribute_Values("increments the numeric columns with given value of the filtered values" _inc: Join__Launch_Vehicle_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Launch_Vehicle_Attribute_Values_set_input, "filter the rows which have to be updated" where: Join__Launch_Vehicle_Attribute_Values_bool_exp!): Join__Launch_Vehicle_Attribute_Values_mutation_response
  """
  update single row of the table: "Join__Launch_Vehicle_Attribute_Values"
  """
  update_Join__Launch_Vehicle_Attribute_Values_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Launch_Vehicle_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Launch_Vehicle_Attribute_Values_set_input, pk_columns: Join__Launch_Vehicle_Attribute_Values_pk_columns_input!): Join__Launch_Vehicle_Attribute_Values
  """
  update single row of the table: "Join__Launch_Vehicle_Attribute"
  """
  update_Join__Launch_Vehicle_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Launch_Vehicle_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Launch_Vehicle_Attribute_set_input, pk_columns: Join__Launch_Vehicle_Attribute_pk_columns_input!): Join__Launch_Vehicle_Attribute
  """
  update data of the table: "Join__Measurement_Attribute_Values"
  """
  update_Join__Measurement_Attribute_Values("increments the numeric columns with given value of the filtered values" _inc: Join__Measurement_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Measurement_Attribute_Values_set_input, "filter the rows which have to be updated" where: Join__Measurement_Attribute_Values_bool_exp!): Join__Measurement_Attribute_Values_mutation_response
  """
  update single row of the table: "Join__Measurement_Attribute_Values"
  """
  update_Join__Measurement_Attribute_Values_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Measurement_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Measurement_Attribute_Values_set_input, pk_columns: Join__Measurement_Attribute_Values_pk_columns_input!): Join__Measurement_Attribute_Values
  """
  update data of the table: "Join__Mission_Attribute_Values"
  """
  update_Join__Mission_Attribute_Values("increments the numeric columns with given value of the filtered values" _inc: Join__Mission_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Mission_Attribute_Values_set_input, "filter the rows which have to be updated" where: Join__Mission_Attribute_Values_bool_exp!): Join__Mission_Attribute_Values_mutation_response
  """
  update single row of the table: "Join__Mission_Attribute_Values"
  """
  update_Join__Mission_Attribute_Values_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Mission_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Mission_Attribute_Values_set_input, pk_columns: Join__Mission_Attribute_Values_pk_columns_input!): Join__Mission_Attribute_Values
  """
  update data of the table: "Join__Orbit_Attribute"
  """
  update_Join__Orbit_Attribute("increments the numeric columns with given value of the filtered values" _inc: Join__Orbit_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Orbit_Attribute_set_input, "filter the rows which have to be updated" where: Join__Orbit_Attribute_bool_exp!): Join__Orbit_Attribute_mutation_response
  """
  update data of the table: "Join__Orbit_Attribute_Values"
  """
  update_Join__Orbit_Attribute_Values("increments the numeric columns with given value of the filtered values" _inc: Join__Orbit_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Orbit_Attribute_Values_set_input, "filter the rows which have to be updated" where: Join__Orbit_Attribute_Values_bool_exp!): Join__Orbit_Attribute_Values_mutation_response
  """
  update single row of the table: "Join__Orbit_Attribute_Values"
  """
  update_Join__Orbit_Attribute_Values_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Orbit_Attribute_Values_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Orbit_Attribute_Values_set_input, pk_columns: Join__Orbit_Attribute_Values_pk_columns_input!): Join__Orbit_Attribute_Values
  """
  update single row of the table: "Join__Orbit_Attribute"
  """
  update_Join__Orbit_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Orbit_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Orbit_Attribute_set_input, pk_columns: Join__Orbit_Attribute_pk_columns_input!): Join__Orbit_Attribute
  """
  update data of the table: "Join__Problem_Instrument"
  """
  update_Join__Problem_Instrument("increments the numeric columns with given value of the filtered values" _inc: Join__Problem_Instrument_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Problem_Instrument_set_input, "filter the rows which have to be updated" where: Join__Problem_Instrument_bool_exp!): Join__Problem_Instrument_mutation_response
  """
  update single row of the table: "Join__Problem_Instrument"
  """
  update_Join__Problem_Instrument_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Problem_Instrument_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Problem_Instrument_set_input, pk_columns: Join__Problem_Instrument_pk_columns_input!): Join__Problem_Instrument
  """
  update data of the table: "Join__Problem_Launch_Vehicle"
  """
  update_Join__Problem_Launch_Vehicle("increments the numeric columns with given value of the filtered values" _inc: Join__Problem_Launch_Vehicle_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Problem_Launch_Vehicle_set_input, "filter the rows which have to be updated" where: Join__Problem_Launch_Vehicle_bool_exp!): Join__Problem_Launch_Vehicle_mutation_response
  """
  update single row of the table: "Join__Problem_Launch_Vehicle"
  """
  update_Join__Problem_Launch_Vehicle_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Problem_Launch_Vehicle_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Problem_Launch_Vehicle_set_input, pk_columns: Join__Problem_Launch_Vehicle_pk_columns_input!): Join__Problem_Launch_Vehicle
  """
  update data of the table: "Join__Problem_Orbit"
  """
  update_Join__Problem_Orbit("increments the numeric columns with given value of the filtered values" _inc: Join__Problem_Orbit_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Problem_Orbit_set_input, "filter the rows which have to be updated" where: Join__Problem_Orbit_bool_exp!): Join__Problem_Orbit_mutation_response
  """
  update single row of the table: "Join__Problem_Orbit"
  """
  update_Join__Problem_Orbit_by_pk("increments the numeric columns with given value of the filtered values" _inc: Join__Problem_Orbit_inc_input, "sets the columns of the filtered rows to the given values" _set: Join__Problem_Orbit_set_input, pk_columns: Join__Problem_Orbit_pk_columns_input!): Join__Problem_Orbit
  """
  update data of the table: "Launch_Vehicle"
  """
  update_Launch_Vehicle("increments the numeric columns with given value of the filtered values" _inc: Launch_Vehicle_inc_input, "sets the columns of the filtered rows to the given values" _set: Launch_Vehicle_set_input, "filter the rows which have to be updated" where: Launch_Vehicle_bool_exp!): Launch_Vehicle_mutation_response
  """
  update data of the table: "Launch_Vehicle_Attribute"
  """
  update_Launch_Vehicle_Attribute("increments the numeric columns with given value of the filtered values" _inc: Launch_Vehicle_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Launch_Vehicle_Attribute_set_input, "filter the rows which have to be updated" where: Launch_Vehicle_Attribute_bool_exp!): Launch_Vehicle_Attribute_mutation_response
  """
  update single row of the table: "Launch_Vehicle_Attribute"
  """
  update_Launch_Vehicle_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Launch_Vehicle_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Launch_Vehicle_Attribute_set_input, pk_columns: Launch_Vehicle_Attribute_pk_columns_input!): Launch_Vehicle_Attribute
  """
  update data of the table: "Launch_Vehicle_Mission_Analysis"
  """
  update_Launch_Vehicle_Mission_Analysis("increments the numeric columns with given value of the filtered values" _inc: Launch_Vehicle_Mission_Analysis_inc_input, "sets the columns of the filtered rows to the given values" _set: Launch_Vehicle_Mission_Analysis_set_input, "filter the rows which have to be updated" where: Launch_Vehicle_Mission_Analysis_bool_exp!): Launch_Vehicle_Mission_Analysis_mutation_response
  """
  update single row of the table: "Launch_Vehicle_Mission_Analysis"
  """
  update_Launch_Vehicle_Mission_Analysis_by_pk("increments the numeric columns with given value of the filtered values" _inc: Launch_Vehicle_Mission_Analysis_inc_input, "sets the columns of the filtered rows to the given values" _set: Launch_Vehicle_Mission_Analysis_set_input, pk_columns: Launch_Vehicle_Mission_Analysis_pk_columns_input!): Launch_Vehicle_Mission_Analysis
  """
  update single row of the table: "Launch_Vehicle"
  """
  update_Launch_Vehicle_by_pk("increments the numeric columns with given value of the filtered values" _inc: Launch_Vehicle_inc_input, "sets the columns of the filtered rows to the given values" _set: Launch_Vehicle_set_input, pk_columns: Launch_Vehicle_pk_columns_input!): Launch_Vehicle
  """
  update data of the table: "Measurement"
  """
  update_Measurement("increments the numeric columns with given value of the filtered values" _inc: Measurement_inc_input, "sets the columns of the filtered rows to the given values" _set: Measurement_set_input, "filter the rows which have to be updated" where: Measurement_bool_exp!): Measurement_mutation_response
  """
  update data of the table: "Measurement_Attribute"
  """
  update_Measurement_Attribute("increments the numeric columns with given value of the filtered values" _inc: Measurement_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Measurement_Attribute_set_input, "filter the rows which have to be updated" where: Measurement_Attribute_bool_exp!): Measurement_Attribute_mutation_response
  """
  update single row of the table: "Measurement_Attribute"
  """
  update_Measurement_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Measurement_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Measurement_Attribute_set_input, pk_columns: Measurement_Attribute_pk_columns_input!): Measurement_Attribute
  """
  update single row of the table: "Measurement"
  """
  update_Measurement_by_pk("increments the numeric columns with given value of the filtered values" _inc: Measurement_inc_input, "sets the columns of the filtered rows to the given values" _set: Measurement_set_input, pk_columns: Measurement_pk_columns_input!): Measurement
  """
  update data of the table: "Mission_Attribute"
  """
  update_Mission_Attribute("increments the numeric columns with given value of the filtered values" _inc: Mission_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Mission_Attribute_set_input, "filter the rows which have to be updated" where: Mission_Attribute_bool_exp!): Mission_Attribute_mutation_response
  """
  update single row of the table: "Mission_Attribute"
  """
  update_Mission_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Mission_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Mission_Attribute_set_input, pk_columns: Mission_Attribute_pk_columns_input!): Mission_Attribute
  """
  update data of the table: "ObjectiveScoreExplanation"
  """
  update_ObjectiveScoreExplanation("increments the numeric columns with given value of the filtered values" _inc: ObjectiveScoreExplanation_inc_input, "sets the columns of the filtered rows to the given values" _set: ObjectiveScoreExplanation_set_input, "filter the rows which have to be updated" where: ObjectiveScoreExplanation_bool_exp!): ObjectiveScoreExplanation_mutation_response
  """
  update single row of the table: "ObjectiveScoreExplanation"
  """
  update_ObjectiveScoreExplanation_by_pk("increments the numeric columns with given value of the filtered values" _inc: ObjectiveScoreExplanation_inc_input, "sets the columns of the filtered rows to the given values" _set: ObjectiveScoreExplanation_set_input, pk_columns: ObjectiveScoreExplanation_pk_columns_input!): ObjectiveScoreExplanation
  """
  update data of the table: "Orbit"
  """
  update_Orbit("increments the numeric columns with given value of the filtered values" _inc: Orbit_inc_input, "sets the columns of the filtered rows to the given values" _set: Orbit_set_input, "filter the rows which have to be updated" where: Orbit_bool_exp!): Orbit_mutation_response
  """
  update data of the table: "Orbit_Attribute"
  """
  update_Orbit_Attribute("increments the numeric columns with given value of the filtered values" _inc: Orbit_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Orbit_Attribute_set_input, "filter the rows which have to be updated" where: Orbit_Attribute_bool_exp!): Orbit_Attribute_mutation_response
  """
  update single row of the table: "Orbit_Attribute"
  """
  update_Orbit_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Orbit_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Orbit_Attribute_set_input, pk_columns: Orbit_Attribute_pk_columns_input!): Orbit_Attribute
  """
  update single row of the table: "Orbit"
  """
  update_Orbit_by_pk("increments the numeric columns with given value of the filtered values" _inc: Orbit_inc_input, "sets the columns of the filtered rows to the given values" _set: Orbit_set_input, pk_columns: Orbit_pk_columns_input!): Orbit
  """
  update data of the table: "PanelScoreExplanation"
  """
  update_PanelScoreExplanation("increments the numeric columns with given value of the filtered values" _inc: PanelScoreExplanation_inc_input, "sets the columns of the filtered rows to the given values" _set: PanelScoreExplanation_set_input, "filter the rows which have to be updated" where: PanelScoreExplanation_bool_exp!): PanelScoreExplanation_mutation_response
  """
  update single row of the table: "PanelScoreExplanation"
  """
  update_PanelScoreExplanation_by_pk("increments the numeric columns with given value of the filtered values" _inc: PanelScoreExplanation_inc_input, "sets the columns of the filtered rows to the given values" _set: PanelScoreExplanation_set_input, pk_columns: PanelScoreExplanation_pk_columns_input!): PanelScoreExplanation
  """
  update data of the table: "Power_Mission_Analysis"
  """
  update_Power_Mission_Analysis("increments the numeric columns with given value of the filtered values" _inc: Power_Mission_Analysis_inc_input, "sets the columns of the filtered rows to the given values" _set: Power_Mission_Analysis_set_input, "filter the rows which have to be updated" where: Power_Mission_Analysis_bool_exp!): Power_Mission_Analysis_mutation_response
  """
  update single row of the table: "Power_Mission_Analysis"
  """
  update_Power_Mission_Analysis_by_pk("increments the numeric columns with given value of the filtered values" _inc: Power_Mission_Analysis_inc_input, "sets the columns of the filtered rows to the given values" _set: Power_Mission_Analysis_set_input, pk_columns: Power_Mission_Analysis_pk_columns_input!): Power_Mission_Analysis
  """
  update data of the table: "Problem"
  """
  update_Problem("increments the numeric columns with given value of the filtered values" _inc: Problem_inc_input, "sets the columns of the filtered rows to the given values" _set: Problem_set_input, "filter the rows which have to be updated" where: Problem_bool_exp!): Problem_mutation_response
  """
  update single row of the table: "Problem"
  """
  update_Problem_by_pk("increments the numeric columns with given value of the filtered values" _inc: Problem_inc_input, "sets the columns of the filtered rows to the given values" _set: Problem_set_input, pk_columns: Problem_pk_columns_input!): Problem
  """
  update data of the table: "Requirement_Rule_Attribute"
  """
  update_Requirement_Rule_Attribute("increments the numeric columns with given value of the filtered values" _inc: Requirement_Rule_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Requirement_Rule_Attribute_set_input, "filter the rows which have to be updated" where: Requirement_Rule_Attribute_bool_exp!): Requirement_Rule_Attribute_mutation_response
  """
  update single row of the table: "Requirement_Rule_Attribute"
  """
  update_Requirement_Rule_Attribute_by_pk("increments the numeric columns with given value of the filtered values" _inc: Requirement_Rule_Attribute_inc_input, "sets the columns of the filtered rows to the given values" _set: Requirement_Rule_Attribute_set_input, pk_columns: Requirement_Rule_Attribute_pk_columns_input!): Requirement_Rule_Attribute
  """
  update data of the table: "Requirement_Rule_Case"
  """
  update_Requirement_Rule_Case("increments the numeric columns with given value of the filtered values" _inc: Requirement_Rule_Case_inc_input, "sets the columns of the filtered rows to the given values" _set: Requirement_Rule_Case_set_input, "filter the rows which have to be updated" where: Requirement_Rule_Case_bool_exp!): Requirement_Rule_Case_mutation_response
  """
  update single row of the table: "Requirement_Rule_Case"
  """
  update_Requirement_Rule_Case_by_pk("increments the numeric columns with given value of the filtered values" _inc: Requirement_Rule_Case_inc_input, "sets the columns of the filtered rows to the given values" _set: Requirement_Rule_Case_set_input, pk_columns: Requirement_Rule_Case_pk_columns_input!): Requirement_Rule_Case
  """
  update data of the table: "Stakeholder_Needs_Objective"
  """
  update_Stakeholder_Needs_Objective("increments the numeric columns with given value of the filtered values" _inc: Stakeholder_Needs_Objective_inc_input, "sets the columns of the filtered rows to the given values" _set: Stakeholder_Needs_Objective_set_input, "filter the rows which have to be updated" where: Stakeholder_Needs_Objective_bool_exp!): Stakeholder_Needs_Objective_mutation_response
  """
  update single row of the table: "Stakeholder_Needs_Objective"
  """
  update_Stakeholder_Needs_Objective_by_pk("increments the numeric columns with given value of the filtered values" _inc: Stakeholder_Needs_Objective_inc_input, "sets the columns of the filtered rows to the given values" _set: Stakeholder_Needs_Objective_set_input, pk_columns: Stakeholder_Needs_Objective_pk_columns_input!): Stakeholder_Needs_Objective
  """
  update data of the table: "Stakeholder_Needs_Panel"
  """
  update_Stakeholder_Needs_Panel("increments the numeric columns with given value of the filtered values" _inc: Stakeholder_Needs_Panel_inc_input, "sets the columns of the filtered rows to the given values" _set: Stakeholder_Needs_Panel_set_input, "filter the rows which have to be updated" where: Stakeholder_Needs_Panel_bool_exp!): Stakeholder_Needs_Panel_mutation_response
  """
  update single row of the table: "Stakeholder_Needs_Panel"
  """
  update_Stakeholder_Needs_Panel_by_pk("increments the numeric columns with given value of the filtered values" _inc: Stakeholder_Needs_Panel_inc_input, "sets the columns of the filtered rows to the given values" _set: Stakeholder_Needs_Panel_set_input, pk_columns: Stakeholder_Needs_Panel_pk_columns_input!): Stakeholder_Needs_Panel
  """
  update data of the table: "Stakeholder_Needs_Subobjective"
  """
  update_Stakeholder_Needs_Subobjective("increments the numeric columns with given value of the filtered values" _inc: Stakeholder_Needs_Subobjective_inc_input, "sets the columns of the filtered rows to the given values" _set: Stakeholder_Needs_Subobjective_set_input, "filter the rows which have to be updated" where: Stakeholder_Needs_Subobjective_bool_exp!): Stakeholder_Needs_Subobjective_mutation_response
  """
  update single row of the table: "Stakeholder_Needs_Subobjective"
  """
  update_Stakeholder_Needs_Subobjective_by_pk("increments the numeric columns with given value of the filtered values" _inc: Stakeholder_Needs_Subobjective_inc_input, "sets the columns of the filtered rows to the given values" _set: Stakeholder_Needs_Subobjective_set_input, pk_columns: Stakeholder_Needs_Subobjective_pk_columns_input!): Stakeholder_Needs_Subobjective
  """
  update data of the table: "SubobjectiveScoreExplanation"
  """
  update_SubobjectiveScoreExplanation("append existing jsonb value of filtered columns with new jsonb value" _append: SubobjectiveScoreExplanation_append_input, "delete the field or element with specified path (for JSON arrays, negative integers count from the end)" _delete_at_path: SubobjectiveScoreExplanation_delete_at_path_input, "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array" _delete_elem: SubobjectiveScoreExplanation_delete_elem_input, "delete key/value pair or string element. key/value pairs are matched based on their key value" _delete_key: SubobjectiveScoreExplanation_delete_key_input, "increments the numeric columns with given value of the filtered values" _inc: SubobjectiveScoreExplanation_inc_input, "prepend existing jsonb value of filtered columns with new jsonb value" _prepend: SubobjectiveScoreExplanation_prepend_input, "sets the columns of the filtered rows to the given values" _set: SubobjectiveScoreExplanation_set_input, "filter the rows which have to be updated" where: SubobjectiveScoreExplanation_bool_exp!): SubobjectiveScoreExplanation_mutation_response
  """
  update single row of the table: "SubobjectiveScoreExplanation"
  """
  update_SubobjectiveScoreExplanation_by_pk("append existing jsonb value of filtered columns with new jsonb value" _append: SubobjectiveScoreExplanation_append_input, "delete the field or element with specified path (for JSON arrays, negative integers count from the end)" _delete_at_path: SubobjectiveScoreExplanation_delete_at_path_input, "delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array" _delete_elem: SubobjectiveScoreExplanation_delete_elem_input, "delete key/value pair or string element. key/value pairs are matched based on their key value" _delete_key: SubobjectiveScoreExplanation_delete_key_input, "increments the numeric columns with given value of the filtered values" _inc: SubobjectiveScoreExplanation_inc_input, "prepend existing jsonb value of filtered columns with new jsonb value" _prepend: SubobjectiveScoreExplanation_prepend_input, "sets the columns of the filtered rows to the given values" _set: SubobjectiveScoreExplanation_set_input, pk_columns: SubobjectiveScoreExplanation_pk_columns_input!): SubobjectiveScoreExplanation
  """
  update data of the table: "Walker_Mission_Analysis"
  """
  update_Walker_Mission_Analysis("increments the numeric columns with given value of the filtered values" _inc: Walker_Mission_Analysis_inc_input, "sets the columns of the filtered rows to the given values" _set: Walker_Mission_Analysis_set_input, "filter the rows which have to be updated" where: Walker_Mission_Analysis_bool_exp!): Walker_Mission_Analysis_mutation_response
  """
  update single row of the table: "Walker_Mission_Analysis"
  """
  update_Walker_Mission_Analysis_by_pk("increments the numeric columns with given value of the filtered values" _inc: Walker_Mission_Analysis_inc_input, "sets the columns of the filtered rows to the given values" _set: Walker_Mission_Analysis_set_input, pk_columns: Walker_Mission_Analysis_pk_columns_input!): Walker_Mission_Analysis
  """
  update data of the table: "auth_group"
  """
  update_auth_group("increments the numeric columns with given value of the filtered values" _inc: auth_group_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_group_set_input, "filter the rows which have to be updated" where: auth_group_bool_exp!): auth_group_mutation_response
  """
  update single row of the table: "auth_group"
  """
  update_auth_group_by_pk("increments the numeric columns with given value of the filtered values" _inc: auth_group_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_group_set_input, pk_columns: auth_group_pk_columns_input!): auth_group
  """
  update data of the table: "auth_group_permissions"
  """
  update_auth_group_permissions("increments the numeric columns with given value of the filtered values" _inc: auth_group_permissions_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_group_permissions_set_input, "filter the rows which have to be updated" where: auth_group_permissions_bool_exp!): auth_group_permissions_mutation_response
  """
  update single row of the table: "auth_group_permissions"
  """
  update_auth_group_permissions_by_pk("increments the numeric columns with given value of the filtered values" _inc: auth_group_permissions_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_group_permissions_set_input, pk_columns: auth_group_permissions_pk_columns_input!): auth_group_permissions
  """
  update data of the table: "auth_permission"
  """
  update_auth_permission("increments the numeric columns with given value of the filtered values" _inc: auth_permission_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_permission_set_input, "filter the rows which have to be updated" where: auth_permission_bool_exp!): auth_permission_mutation_response
  """
  update single row of the table: "auth_permission"
  """
  update_auth_permission_by_pk("increments the numeric columns with given value of the filtered values" _inc: auth_permission_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_permission_set_input, pk_columns: auth_permission_pk_columns_input!): auth_permission
  """
  update data of the table: "auth_user"
  """
  update_auth_user("increments the numeric columns with given value of the filtered values" _inc: auth_user_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_user_set_input, "filter the rows which have to be updated" where: auth_user_bool_exp!): auth_user_mutation_response
  """
  update single row of the table: "auth_user"
  """
  update_auth_user_by_pk("increments the numeric columns with given value of the filtered values" _inc: auth_user_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_user_set_input, pk_columns: auth_user_pk_columns_input!): auth_user
  """
  update data of the table: "auth_user_groups"
  """
  update_auth_user_groups("increments the numeric columns with given value of the filtered values" _inc: auth_user_groups_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_user_groups_set_input, "filter the rows which have to be updated" where: auth_user_groups_bool_exp!): auth_user_groups_mutation_response
  """
  update single row of the table: "auth_user_groups"
  """
  update_auth_user_groups_by_pk("increments the numeric columns with given value of the filtered values" _inc: auth_user_groups_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_user_groups_set_input, pk_columns: auth_user_groups_pk_columns_input!): auth_user_groups
  """
  update data of the table: "auth_user_user_permissions"
  """
  update_auth_user_user_permissions("increments the numeric columns with given value of the filtered values" _inc: auth_user_user_permissions_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_user_user_permissions_set_input, "filter the rows which have to be updated" where: auth_user_user_permissions_bool_exp!): auth_user_user_permissions_mutation_response
  """
  update single row of the table: "auth_user_user_permissions"
  """
  update_auth_user_user_permissions_by_pk("increments the numeric columns with given value of the filtered values" _inc: auth_user_user_permissions_inc_input, "sets the columns of the filtered rows to the given values" _set: auth_user_user_permissions_set_input, pk_columns: auth_user_user_permissions_pk_columns_input!): auth_user_user_permissions
  """
  update data of the table: "daphne_context_dialoguecontext"
  """
  update_daphne_context_dialoguecontext("increments the numeric columns with given value of the filtered values" _inc: daphne_context_dialoguecontext_inc_input, "sets the columns of the filtered rows to the given values" _set: daphne_context_dialoguecontext_set_input, "filter the rows which have to be updated" where: daphne_context_dialoguecontext_bool_exp!): daphne_context_dialoguecontext_mutation_response
  """
  update single row of the table: "daphne_context_dialoguecontext"
  """
  update_daphne_context_dialoguecontext_by_pk("increments the numeric columns with given value of the filtered values" _inc: daphne_context_dialoguecontext_inc_input, "sets the columns of the filtered rows to the given values" _set: daphne_context_dialoguecontext_set_input, pk_columns: daphne_context_dialoguecontext_pk_columns_input!): daphne_context_dialoguecontext
  """
  update data of the table: "daphne_context_dialoguehistory"
  """
  update_daphne_context_dialoguehistory("increments the numeric columns with given value of the filtered values" _inc: daphne_context_dialoguehistory_inc_input, "sets the columns of the filtered rows to the given values" _set: daphne_context_dialoguehistory_set_input, "filter the rows which have to be updated" where: daphne_context_dialoguehistory_bool_exp!): daphne_context_dialoguehistory_mutation_response
  """
  update single row of the table: "daphne_context_dialoguehistory"
  """
  update_daphne_context_dialoguehistory_by_pk("increments the numeric columns with given value of the filtered values" _inc: daphne_context_dialoguehistory_inc_input, "sets the columns of the filtered rows to the given values" _set: daphne_context_dialoguehistory_set_input, pk_columns: daphne_context_dialoguehistory_pk_columns_input!): daphne_context_dialoguehistory
  """
  update data of the table: "daphne_context_mycroftuser"
  """
  update_daphne_context_mycroftuser("increments the numeric columns with given value of the filtered values" _inc: daphne_context_mycroftuser_inc_input, "sets the columns of the filtered rows to the given values" _set: daphne_context_mycroftuser_set_input, "filter the rows which have to be updated" where: daphne_context_mycroftuser_bool_exp!): daphne_context_mycroftuser_mutation_response
  """
  update single row of the table: "daphne_context_mycroftuser"
  """
  update_daphne_context_mycroftuser_by_pk("increments the numeric columns with given value of the filtered values" _inc: daphne_context_mycroftuser_inc_input, "sets the columns of the filtered rows to the given values" _set: daphne_context_mycroftuser_set_input, pk_columns: daphne_context_mycroftuser_pk_columns_input!): daphne_context_mycroftuser
  """
  update data of the table: "daphne_context_userinformation"
  """
  update_daphne_context_userinformation("increments the numeric columns with given value of the filtered values" _inc: daphne_context_userinformation_inc_input, "sets the columns of the filtered rows to the given values" _set: daphne_context_userinformation_set_input, "filter the rows which have to be updated" where: daphne_context_userinformation_bool_exp!): daphne_context_userinformation_mutation_response
  """
  update single row of the table: "daphne_context_userinformation"
  """
  update_daphne_context_userinformation_by_pk("increments the numeric columns with given value of the filtered values" _inc: daphne_context_userinformation_inc_input, "sets the columns of the filtered rows to the given values" _set: daphne_context_userinformation_set_input, pk_columns: daphne_context_userinformation_pk_columns_input!): daphne_context_userinformation
  """
  update data of the table: "django_admin_log"
  """
  update_django_admin_log("increments the numeric columns with given value of the filtered values" _inc: django_admin_log_inc_input, "sets the columns of the filtered rows to the given values" _set: django_admin_log_set_input, "filter the rows which have to be updated" where: django_admin_log_bool_exp!): django_admin_log_mutation_response
  """
  update single row of the table: "django_admin_log"
  """
  update_django_admin_log_by_pk("increments the numeric columns with given value of the filtered values" _inc: django_admin_log_inc_input, "sets the columns of the filtered rows to the given values" _set: django_admin_log_set_input, pk_columns: django_admin_log_pk_columns_input!): django_admin_log
  """
  update data of the table: "django_content_type"
  """
  update_django_content_type("increments the numeric columns with given value of the filtered values" _inc: django_content_type_inc_input, "sets the columns of the filtered rows to the given values" _set: django_content_type_set_input, "filter the rows which have to be updated" where: django_content_type_bool_exp!): django_content_type_mutation_response
  """
  update single row of the table: "django_content_type"
  """
  update_django_content_type_by_pk("increments the numeric columns with given value of the filtered values" _inc: django_content_type_inc_input, "sets the columns of the filtered rows to the given values" _set: django_content_type_set_input, pk_columns: django_content_type_pk_columns_input!): django_content_type
  """
  update data of the table: "django_migrations"
  """
  update_django_migrations("increments the numeric columns with given value of the filtered values" _inc: django_migrations_inc_input, "sets the columns of the filtered rows to the given values" _set: django_migrations_set_input, "filter the rows which have to be updated" where: django_migrations_bool_exp!): django_migrations_mutation_response
  """
  update single row of the table: "django_migrations"
  """
  update_django_migrations_by_pk("increments the numeric columns with given value of the filtered values" _inc: django_migrations_inc_input, "sets the columns of the filtered rows to the given values" _set: django_migrations_set_input, pk_columns: django_migrations_pk_columns_input!): django_migrations
  """
  update data of the table: "django_session"
  """
  update_django_session("sets the columns of the filtered rows to the given values" _set: django_session_set_input, "filter the rows which have to be updated" where: django_session_bool_exp!): django_session_mutation_response
  """
  update single row of the table: "django_session"
  """
  update_django_session_by_pk("sets the columns of the filtered rows to the given values" _set: django_session_set_input, pk_columns: django_session_pk_columns_input!): django_session
  """
  update data of the table: "experiment_allowedcommand"
  """
  update_experiment_allowedcommand("increments the numeric columns with given value of the filtered values" _inc: experiment_allowedcommand_inc_input, "sets the columns of the filtered rows to the given values" _set: experiment_allowedcommand_set_input, "filter the rows which have to be updated" where: experiment_allowedcommand_bool_exp!): experiment_allowedcommand_mutation_response
  """
  update single row of the table: "experiment_allowedcommand"
  """
  update_experiment_allowedcommand_by_pk("increments the numeric columns with given value of the filtered values" _inc: experiment_allowedcommand_inc_input, "sets the columns of the filtered rows to the given values" _set: experiment_allowedcommand_set_input, pk_columns: experiment_allowedcommand_pk_columns_input!): experiment_allowedcommand
  """
  update data of the table: "experiment_experimentaction"
  """
  update_experiment_experimentaction("increments the numeric columns with given value of the filtered values" _inc: experiment_experimentaction_inc_input, "sets the columns of the filtered rows to the given values" _set: experiment_experimentaction_set_input, "filter the rows which have to be updated" where: experiment_experimentaction_bool_exp!): experiment_experimentaction_mutation_response
  """
  update single row of the table: "experiment_experimentaction"
  """
  update_experiment_experimentaction_by_pk("increments the numeric columns with given value of the filtered values" _inc: experiment_experimentaction_inc_input, "sets the columns of the filtered rows to the given values" _set: experiment_experimentaction_set_input, pk_columns: experiment_experimentaction_pk_columns_input!): experiment_experimentaction
  """
  update data of the table: "experiment_experimentcontext"
  """
  update_experiment_experimentcontext("increments the numeric columns with given value of the filtered values" _inc: experiment_experimentcontext_inc_input, "sets the columns of the filtered rows to the given values" _set: experiment_experimentcontext_set_input, "filter the rows which have to be updated" where: experiment_experimentcontext_bool_exp!): experiment_experimentcontext_mutation_response
  """
  update single row of the table: "experiment_experimentcontext"
  """
  update_experiment_experimentcontext_by_pk("increments the numeric columns with given value of the filtered values" _inc: experiment_experimentcontext_inc_input, "sets the columns of the filtered rows to the given values" _set: experiment_experimentcontext_set_input, pk_columns: experiment_experimentcontext_pk_columns_input!): experiment_experimentcontext
  """
  update data of the table: "experiment_experimentstage"
  """
  update_experiment_experimentstage("increments the numeric columns with given value of the filtered values" _inc: experiment_experimentstage_inc_input, "sets the columns of the filtered rows to the given values" _set: experiment_experimentstage_set_input, "filter the rows which have to be updated" where: experiment_experimentstage_bool_exp!): experiment_experimentstage_mutation_response
  """
  update single row of the table: "experiment_experimentstage"
  """
  update_experiment_experimentstage_by_pk("increments the numeric columns with given value of the filtered values" _inc: experiment_experimentstage_inc_input, "sets the columns of the filtered rows to the given values" _set: experiment_experimentstage_set_input, pk_columns: experiment_experimentstage_pk_columns_input!): experiment_experimentstage
}
"column ordering options"
enum order_by {
  "in ascending order, nulls last"
  asc
  "in ascending order, nulls first"
  asc_nulls_first
  "in ascending order, nulls last"
  asc_nulls_last
  "in descending order, nulls first"
  desc
  "in descending order, nulls first"
  desc_nulls_first
  "in descending order, nulls last"
  desc_nulls_last
}
type query_root {
  """
  fetch data from the table: "Accepted_Value"
  """
  Accepted_Value("distinct select on columns" distinct_on: [Accepted_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Accepted_Value_order_by!], "filter the rows returned" where: Accepted_Value_bool_exp): [Accepted_Value!]!
  """
  fetch aggregated fields from the table: "Accepted_Value"
  """
  Accepted_Value_aggregate("distinct select on columns" distinct_on: [Accepted_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Accepted_Value_order_by!], "filter the rows returned" where: Accepted_Value_bool_exp): Accepted_Value_aggregate!
  """
  fetch data from the table: "Accepted_Value" using primary key columns
  """
  Accepted_Value_by_pk(id: Int!): Accepted_Value
  """
  fetch data from the table: "Architecture"
  """
  Architecture("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): [Architecture!]!
  """
  fetch data from the table: "ArchitectureBudget"
  """
  ArchitectureBudget("distinct select on columns" distinct_on: [ArchitectureBudget_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureBudget_order_by!], "filter the rows returned" where: ArchitectureBudget_bool_exp): [ArchitectureBudget!]!
  """
  fetch aggregated fields from the table: "ArchitectureBudget"
  """
  ArchitectureBudget_aggregate("distinct select on columns" distinct_on: [ArchitectureBudget_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureBudget_order_by!], "filter the rows returned" where: ArchitectureBudget_bool_exp): ArchitectureBudget_aggregate!
  """
  fetch data from the table: "ArchitectureBudget" using primary key columns
  """
  ArchitectureBudget_by_pk(id: Int!): ArchitectureBudget
  """
  fetch data from the table: "ArchitectureCostInformation"
  """
  ArchitectureCostInformation("distinct select on columns" distinct_on: [ArchitectureCostInformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureCostInformation_order_by!], "filter the rows returned" where: ArchitectureCostInformation_bool_exp): [ArchitectureCostInformation!]!
  """
  fetch aggregated fields from the table: "ArchitectureCostInformation"
  """
  ArchitectureCostInformation_aggregate("distinct select on columns" distinct_on: [ArchitectureCostInformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureCostInformation_order_by!], "filter the rows returned" where: ArchitectureCostInformation_bool_exp): ArchitectureCostInformation_aggregate!
  """
  fetch data from the table: "ArchitectureCostInformation" using primary key columns
  """
  ArchitectureCostInformation_by_pk(id: Int!): ArchitectureCostInformation
  """
  fetch data from the table: "ArchitecturePayload"
  """
  ArchitecturePayload("distinct select on columns" distinct_on: [ArchitecturePayload_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitecturePayload_order_by!], "filter the rows returned" where: ArchitecturePayload_bool_exp): [ArchitecturePayload!]!
  """
  fetch aggregated fields from the table: "ArchitecturePayload"
  """
  ArchitecturePayload_aggregate("distinct select on columns" distinct_on: [ArchitecturePayload_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitecturePayload_order_by!], "filter the rows returned" where: ArchitecturePayload_bool_exp): ArchitecturePayload_aggregate!
  """
  fetch data from the table: "ArchitecturePayload" using primary key columns
  """
  ArchitecturePayload_by_pk(id: Int!): ArchitecturePayload
  """
  fetch data from the table: "ArchitectureScoreExplanation"
  """
  ArchitectureScoreExplanation("distinct select on columns" distinct_on: [ArchitectureScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureScoreExplanation_order_by!], "filter the rows returned" where: ArchitectureScoreExplanation_bool_exp): [ArchitectureScoreExplanation!]!
  """
  fetch aggregated fields from the table: "ArchitectureScoreExplanation"
  """
  ArchitectureScoreExplanation_aggregate("distinct select on columns" distinct_on: [ArchitectureScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureScoreExplanation_order_by!], "filter the rows returned" where: ArchitectureScoreExplanation_bool_exp): ArchitectureScoreExplanation_aggregate!
  """
  fetch data from the table: "ArchitectureScoreExplanation" using primary key columns
  """
  ArchitectureScoreExplanation_by_pk(id: Int!): ArchitectureScoreExplanation
  """
  fetch aggregated fields from the table: "Architecture"
  """
  Architecture_aggregate("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): Architecture_aggregate!
  """
  fetch data from the table: "Architecture" using primary key columns
  """
  Architecture_by_pk(id: Int!): Architecture
  """
  fetch data from the table: "Dataset"
  """
  Dataset("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): [Dataset!]!
  """
  fetch aggregated fields from the table: "Dataset"
  """
  Dataset_aggregate("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): Dataset_aggregate!
  """
  fetch data from the table: "Dataset" using primary key columns
  """
  Dataset_by_pk(id: Int!): Dataset
  """
  fetch data from the table: "EDL_edlcontext"
  """
  EDL_edlcontext("distinct select on columns" distinct_on: [EDL_edlcontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EDL_edlcontext_order_by!], "filter the rows returned" where: EDL_edlcontext_bool_exp): [EDL_edlcontext!]!
  """
  fetch aggregated fields from the table: "EDL_edlcontext"
  """
  EDL_edlcontext_aggregate("distinct select on columns" distinct_on: [EDL_edlcontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EDL_edlcontext_order_by!], "filter the rows returned" where: EDL_edlcontext_bool_exp): EDL_edlcontext_aggregate!
  """
  fetch data from the table: "EDL_edlcontext" using primary key columns
  """
  EDL_edlcontext_by_pk(id: Int!): EDL_edlcontext
  """
  fetch data from the table: "EOSS_activecontext"
  """
  EOSS_activecontext("distinct select on columns" distinct_on: [EOSS_activecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_activecontext_order_by!], "filter the rows returned" where: EOSS_activecontext_bool_exp): [EOSS_activecontext!]!
  """
  fetch aggregated fields from the table: "EOSS_activecontext"
  """
  EOSS_activecontext_aggregate("distinct select on columns" distinct_on: [EOSS_activecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_activecontext_order_by!], "filter the rows returned" where: EOSS_activecontext_bool_exp): EOSS_activecontext_aggregate!
  """
  fetch data from the table: "EOSS_activecontext" using primary key columns
  """
  EOSS_activecontext_by_pk(id: Int!): EOSS_activecontext
  """
  fetch data from the table: "EOSS_engineercontext"
  """
  EOSS_engineercontext("distinct select on columns" distinct_on: [EOSS_engineercontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_engineercontext_order_by!], "filter the rows returned" where: EOSS_engineercontext_bool_exp): [EOSS_engineercontext!]!
  """
  fetch aggregated fields from the table: "EOSS_engineercontext"
  """
  EOSS_engineercontext_aggregate("distinct select on columns" distinct_on: [EOSS_engineercontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_engineercontext_order_by!], "filter the rows returned" where: EOSS_engineercontext_bool_exp): EOSS_engineercontext_aggregate!
  """
  fetch data from the table: "EOSS_engineercontext" using primary key columns
  """
  EOSS_engineercontext_by_pk(id: Int!): EOSS_engineercontext
  """
  fetch data from the table: "EOSS_eosscontext"
  """
  EOSS_eosscontext("distinct select on columns" distinct_on: [EOSS_eosscontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_eosscontext_order_by!], "filter the rows returned" where: EOSS_eosscontext_bool_exp): [EOSS_eosscontext!]!
  """
  fetch aggregated fields from the table: "EOSS_eosscontext"
  """
  EOSS_eosscontext_aggregate("distinct select on columns" distinct_on: [EOSS_eosscontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_eosscontext_order_by!], "filter the rows returned" where: EOSS_eosscontext_bool_exp): EOSS_eosscontext_aggregate!
  """
  fetch data from the table: "EOSS_eosscontext" using primary key columns
  """
  EOSS_eosscontext_by_pk(id: Int!): EOSS_eosscontext
  """
  fetch data from the table: "EOSS_eossdialoguecontext"
  """
  EOSS_eossdialoguecontext("distinct select on columns" distinct_on: [EOSS_eossdialoguecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_eossdialoguecontext_order_by!], "filter the rows returned" where: EOSS_eossdialoguecontext_bool_exp): [EOSS_eossdialoguecontext!]!
  """
  fetch aggregated fields from the table: "EOSS_eossdialoguecontext"
  """
  EOSS_eossdialoguecontext_aggregate("distinct select on columns" distinct_on: [EOSS_eossdialoguecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_eossdialoguecontext_order_by!], "filter the rows returned" where: EOSS_eossdialoguecontext_bool_exp): EOSS_eossdialoguecontext_aggregate!
  """
  fetch data from the table: "EOSS_eossdialoguecontext" using primary key columns
  """
  EOSS_eossdialoguecontext_by_pk(id: Int!): EOSS_eossdialoguecontext
  """
  fetch data from the table: "Fuzzy_Attribute"
  """
  Fuzzy_Attribute("distinct select on columns" distinct_on: [Fuzzy_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Attribute_order_by!], "filter the rows returned" where: Fuzzy_Attribute_bool_exp): [Fuzzy_Attribute!]!
  """
  fetch aggregated fields from the table: "Fuzzy_Attribute"
  """
  Fuzzy_Attribute_aggregate("distinct select on columns" distinct_on: [Fuzzy_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Attribute_order_by!], "filter the rows returned" where: Fuzzy_Attribute_bool_exp): Fuzzy_Attribute_aggregate!
  """
  fetch data from the table: "Fuzzy_Attribute" using primary key columns
  """
  Fuzzy_Attribute_by_pk(id: Int!): Fuzzy_Attribute
  """
  fetch data from the table: "Fuzzy_Value"
  """
  Fuzzy_Value("distinct select on columns" distinct_on: [Fuzzy_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Value_order_by!], "filter the rows returned" where: Fuzzy_Value_bool_exp): [Fuzzy_Value!]!
  """
  fetch aggregated fields from the table: "Fuzzy_Value"
  """
  Fuzzy_Value_aggregate("distinct select on columns" distinct_on: [Fuzzy_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Value_order_by!], "filter the rows returned" where: Fuzzy_Value_bool_exp): Fuzzy_Value_aggregate!
  """
  fetch data from the table: "Fuzzy_Value" using primary key columns
  """
  Fuzzy_Value_by_pk(id: Int!): Fuzzy_Value
  """
  fetch data from the table: "Group"
  """
  Group("distinct select on columns" distinct_on: [Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Group_order_by!], "filter the rows returned" where: Group_bool_exp): [Group!]!
  """
  fetch aggregated fields from the table: "Group"
  """
  Group_aggregate("distinct select on columns" distinct_on: [Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Group_order_by!], "filter the rows returned" where: Group_bool_exp): Group_aggregate!
  """
  fetch data from the table: "Group" using primary key columns
  """
  Group_by_pk(id: Int!): Group
  """
  fetch data from the table: "Inheritence_Attribute"
  """
  Inheritence_Attribute("distinct select on columns" distinct_on: [Inheritence_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Inheritence_Attribute_order_by!], "filter the rows returned" where: Inheritence_Attribute_bool_exp): [Inheritence_Attribute!]!
  """
  fetch aggregated fields from the table: "Inheritence_Attribute"
  """
  Inheritence_Attribute_aggregate("distinct select on columns" distinct_on: [Inheritence_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Inheritence_Attribute_order_by!], "filter the rows returned" where: Inheritence_Attribute_bool_exp): Inheritence_Attribute_aggregate!
  """
  fetch data from the table: "Inheritence_Attribute" using primary key columns
  """
  Inheritence_Attribute_by_pk(id: Int!): Inheritence_Attribute
  """
  fetch data from the table: "Instrument"
  """
  Instrument("distinct select on columns" distinct_on: [Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_order_by!], "filter the rows returned" where: Instrument_bool_exp): [Instrument!]!
  """
  fetch data from the table: "Instrument_Attribute"
  """
  Instrument_Attribute("distinct select on columns" distinct_on: [Instrument_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_Attribute_order_by!], "filter the rows returned" where: Instrument_Attribute_bool_exp): [Instrument_Attribute!]!
  """
  fetch aggregated fields from the table: "Instrument_Attribute"
  """
  Instrument_Attribute_aggregate("distinct select on columns" distinct_on: [Instrument_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_Attribute_order_by!], "filter the rows returned" where: Instrument_Attribute_bool_exp): Instrument_Attribute_aggregate!
  """
  fetch data from the table: "Instrument_Attribute" using primary key columns
  """
  Instrument_Attribute_by_pk(id: Int!): Instrument_Attribute
  """
  fetch aggregated fields from the table: "Instrument"
  """
  Instrument_aggregate("distinct select on columns" distinct_on: [Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_order_by!], "filter the rows returned" where: Instrument_bool_exp): Instrument_aggregate!
  """
  fetch data from the table: "Instrument" using primary key columns
  """
  Instrument_by_pk(id: Int!): Instrument
  """
  fetch data from the table: "Join__AuthUser_Group"
  """
  Join__AuthUser_Group("distinct select on columns" distinct_on: [Join__AuthUser_Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__AuthUser_Group_order_by!], "filter the rows returned" where: Join__AuthUser_Group_bool_exp): [Join__AuthUser_Group!]!
  """
  fetch aggregated fields from the table: "Join__AuthUser_Group"
  """
  Join__AuthUser_Group_aggregate("distinct select on columns" distinct_on: [Join__AuthUser_Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__AuthUser_Group_order_by!], "filter the rows returned" where: Join__AuthUser_Group_bool_exp): Join__AuthUser_Group_aggregate!
  """
  fetch data from the table: "Join__AuthUser_Group" using primary key columns
  """
  Join__AuthUser_Group_by_pk(id: Int!): Join__AuthUser_Group
  """
  fetch data from the table: "Join__Case_Attribute"
  """
  Join__Case_Attribute("distinct select on columns" distinct_on: [Join__Case_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Case_Attribute_order_by!], "filter the rows returned" where: Join__Case_Attribute_bool_exp): [Join__Case_Attribute!]!
  """
  fetch aggregated fields from the table: "Join__Case_Attribute"
  """
  Join__Case_Attribute_aggregate("distinct select on columns" distinct_on: [Join__Case_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Case_Attribute_order_by!], "filter the rows returned" where: Join__Case_Attribute_bool_exp): Join__Case_Attribute_aggregate!
  """
  fetch data from the table: "Join__Case_Attribute" using primary key columns
  """
  Join__Case_Attribute_by_pk(id: Int!): Join__Case_Attribute
  "An array relationship"
  Join__Instrument_Attribute_Values("distinct select on columns" distinct_on: [Join__Instrument_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Attribute_Values_order_by!], "filter the rows returned" where: Join__Instrument_Attribute_Values_bool_exp): [Join__Instrument_Attribute_Values!]!
  "An aggregate relationship"
  Join__Instrument_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Attribute_Values_order_by!], "filter the rows returned" where: Join__Instrument_Attribute_Values_bool_exp): Join__Instrument_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Instrument_Attribute_Values" using primary key columns
  """
  Join__Instrument_Attribute_Values_by_pk(id: Int!): Join__Instrument_Attribute_Values
  """
  fetch data from the table: "Join__Instrument_Capability"
  """
  Join__Instrument_Capability("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): [Join__Instrument_Capability!]!
  """
  fetch aggregated fields from the table: "Join__Instrument_Capability"
  """
  Join__Instrument_Capability_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): Join__Instrument_Capability_aggregate!
  """
  fetch data from the table: "Join__Instrument_Capability" using primary key columns
  """
  Join__Instrument_Capability_by_pk(id: Int!): Join__Instrument_Capability
  """
  fetch data from the table: "Join__Instrument_Characteristic"
  """
  Join__Instrument_Characteristic("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): [Join__Instrument_Characteristic!]!
  """
  fetch aggregated fields from the table: "Join__Instrument_Characteristic"
  """
  Join__Instrument_Characteristic_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): Join__Instrument_Characteristic_aggregate!
  """
  fetch data from the table: "Join__Instrument_Characteristic" using primary key columns
  """
  Join__Instrument_Characteristic_by_pk(id: Int!): Join__Instrument_Characteristic
  """
  fetch data from the table: "Join__Instrument_Measurement"
  """
  Join__Instrument_Measurement("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): [Join__Instrument_Measurement!]!
  """
  fetch aggregated fields from the table: "Join__Instrument_Measurement"
  """
  Join__Instrument_Measurement_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): Join__Instrument_Measurement_aggregate!
  """
  fetch data from the table: "Join__Instrument_Measurement" using primary key columns
  """
  Join__Instrument_Measurement_by_pk(id: Int!): Join__Instrument_Measurement
  """
  fetch data from the table: "Join__Launch_Vehicle_Attribute"
  """
  Join__Launch_Vehicle_Attribute("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): [Join__Launch_Vehicle_Attribute!]!
  "An array relationship"
  Join__Launch_Vehicle_Attribute_Values("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_Values_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_Values_bool_exp): [Join__Launch_Vehicle_Attribute_Values!]!
  "An aggregate relationship"
  Join__Launch_Vehicle_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_Values_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_Values_bool_exp): Join__Launch_Vehicle_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Launch_Vehicle_Attribute_Values" using primary key columns
  """
  Join__Launch_Vehicle_Attribute_Values_by_pk(id: Int!): Join__Launch_Vehicle_Attribute_Values
  """
  fetch aggregated fields from the table: "Join__Launch_Vehicle_Attribute"
  """
  Join__Launch_Vehicle_Attribute_aggregate("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): Join__Launch_Vehicle_Attribute_aggregate!
  """
  fetch data from the table: "Join__Launch_Vehicle_Attribute" using primary key columns
  """
  Join__Launch_Vehicle_Attribute_by_pk(id: Int!): Join__Launch_Vehicle_Attribute
  "An array relationship"
  Join__Measurement_Attribute_Values("distinct select on columns" distinct_on: [Join__Measurement_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Measurement_Attribute_Values_order_by!], "filter the rows returned" where: Join__Measurement_Attribute_Values_bool_exp): [Join__Measurement_Attribute_Values!]!
  "An aggregate relationship"
  Join__Measurement_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Measurement_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Measurement_Attribute_Values_order_by!], "filter the rows returned" where: Join__Measurement_Attribute_Values_bool_exp): Join__Measurement_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Measurement_Attribute_Values" using primary key columns
  """
  Join__Measurement_Attribute_Values_by_pk(id: Int!): Join__Measurement_Attribute_Values
  "An array relationship"
  Join__Mission_Attribute_Values("distinct select on columns" distinct_on: [Join__Mission_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Mission_Attribute_Values_order_by!], "filter the rows returned" where: Join__Mission_Attribute_Values_bool_exp): [Join__Mission_Attribute_Values!]!
  "An aggregate relationship"
  Join__Mission_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Mission_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Mission_Attribute_Values_order_by!], "filter the rows returned" where: Join__Mission_Attribute_Values_bool_exp): Join__Mission_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Mission_Attribute_Values" using primary key columns
  """
  Join__Mission_Attribute_Values_by_pk(id: Int!): Join__Mission_Attribute_Values
  """
  fetch data from the table: "Join__Orbit_Attribute"
  """
  Join__Orbit_Attribute("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): [Join__Orbit_Attribute!]!
  "An array relationship"
  Join__Orbit_Attribute_Values("distinct select on columns" distinct_on: [Join__Orbit_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_Values_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_Values_bool_exp): [Join__Orbit_Attribute_Values!]!
  "An aggregate relationship"
  Join__Orbit_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Orbit_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_Values_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_Values_bool_exp): Join__Orbit_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Orbit_Attribute_Values" using primary key columns
  """
  Join__Orbit_Attribute_Values_by_pk(id: Int!): Join__Orbit_Attribute_Values
  """
  fetch aggregated fields from the table: "Join__Orbit_Attribute"
  """
  Join__Orbit_Attribute_aggregate("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): Join__Orbit_Attribute_aggregate!
  """
  fetch data from the table: "Join__Orbit_Attribute" using primary key columns
  """
  Join__Orbit_Attribute_by_pk(id: Int!): Join__Orbit_Attribute
  """
  fetch data from the table: "Join__Problem_Instrument"
  """
  Join__Problem_Instrument("distinct select on columns" distinct_on: [Join__Problem_Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Instrument_order_by!], "filter the rows returned" where: Join__Problem_Instrument_bool_exp): [Join__Problem_Instrument!]!
  """
  fetch aggregated fields from the table: "Join__Problem_Instrument"
  """
  Join__Problem_Instrument_aggregate("distinct select on columns" distinct_on: [Join__Problem_Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Instrument_order_by!], "filter the rows returned" where: Join__Problem_Instrument_bool_exp): Join__Problem_Instrument_aggregate!
  """
  fetch data from the table: "Join__Problem_Instrument" using primary key columns
  """
  Join__Problem_Instrument_by_pk(id: Int!): Join__Problem_Instrument
  """
  fetch data from the table: "Join__Problem_Launch_Vehicle"
  """
  Join__Problem_Launch_Vehicle("distinct select on columns" distinct_on: [Join__Problem_Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Launch_Vehicle_order_by!], "filter the rows returned" where: Join__Problem_Launch_Vehicle_bool_exp): [Join__Problem_Launch_Vehicle!]!
  """
  fetch aggregated fields from the table: "Join__Problem_Launch_Vehicle"
  """
  Join__Problem_Launch_Vehicle_aggregate("distinct select on columns" distinct_on: [Join__Problem_Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Launch_Vehicle_order_by!], "filter the rows returned" where: Join__Problem_Launch_Vehicle_bool_exp): Join__Problem_Launch_Vehicle_aggregate!
  """
  fetch data from the table: "Join__Problem_Launch_Vehicle" using primary key columns
  """
  Join__Problem_Launch_Vehicle_by_pk(id: Int!): Join__Problem_Launch_Vehicle
  """
  fetch data from the table: "Join__Problem_Orbit"
  """
  Join__Problem_Orbit("distinct select on columns" distinct_on: [Join__Problem_Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Orbit_order_by!], "filter the rows returned" where: Join__Problem_Orbit_bool_exp): [Join__Problem_Orbit!]!
  """
  fetch aggregated fields from the table: "Join__Problem_Orbit"
  """
  Join__Problem_Orbit_aggregate("distinct select on columns" distinct_on: [Join__Problem_Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Orbit_order_by!], "filter the rows returned" where: Join__Problem_Orbit_bool_exp): Join__Problem_Orbit_aggregate!
  """
  fetch data from the table: "Join__Problem_Orbit" using primary key columns
  """
  Join__Problem_Orbit_by_pk(id: Int!): Join__Problem_Orbit
  """
  fetch data from the table: "Launch_Vehicle"
  """
  Launch_Vehicle("distinct select on columns" distinct_on: [Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_order_by!], "filter the rows returned" where: Launch_Vehicle_bool_exp): [Launch_Vehicle!]!
  """
  fetch data from the table: "Launch_Vehicle_Attribute"
  """
  Launch_Vehicle_Attribute("distinct select on columns" distinct_on: [Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Launch_Vehicle_Attribute_bool_exp): [Launch_Vehicle_Attribute!]!
  """
  fetch aggregated fields from the table: "Launch_Vehicle_Attribute"
  """
  Launch_Vehicle_Attribute_aggregate("distinct select on columns" distinct_on: [Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Launch_Vehicle_Attribute_bool_exp): Launch_Vehicle_Attribute_aggregate!
  """
  fetch data from the table: "Launch_Vehicle_Attribute" using primary key columns
  """
  Launch_Vehicle_Attribute_by_pk(id: Int!): Launch_Vehicle_Attribute
  """
  fetch data from the table: "Launch_Vehicle_Mission_Analysis"
  """
  Launch_Vehicle_Mission_Analysis("distinct select on columns" distinct_on: [Launch_Vehicle_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Mission_Analysis_order_by!], "filter the rows returned" where: Launch_Vehicle_Mission_Analysis_bool_exp): [Launch_Vehicle_Mission_Analysis!]!
  """
  fetch aggregated fields from the table: "Launch_Vehicle_Mission_Analysis"
  """
  Launch_Vehicle_Mission_Analysis_aggregate("distinct select on columns" distinct_on: [Launch_Vehicle_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Mission_Analysis_order_by!], "filter the rows returned" where: Launch_Vehicle_Mission_Analysis_bool_exp): Launch_Vehicle_Mission_Analysis_aggregate!
  """
  fetch data from the table: "Launch_Vehicle_Mission_Analysis" using primary key columns
  """
  Launch_Vehicle_Mission_Analysis_by_pk(id: Int!): Launch_Vehicle_Mission_Analysis
  """
  fetch aggregated fields from the table: "Launch_Vehicle"
  """
  Launch_Vehicle_aggregate("distinct select on columns" distinct_on: [Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_order_by!], "filter the rows returned" where: Launch_Vehicle_bool_exp): Launch_Vehicle_aggregate!
  """
  fetch data from the table: "Launch_Vehicle" using primary key columns
  """
  Launch_Vehicle_by_pk(id: Int!): Launch_Vehicle
  """
  fetch data from the table: "Measurement"
  """
  Measurement("distinct select on columns" distinct_on: [Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_order_by!], "filter the rows returned" where: Measurement_bool_exp): [Measurement!]!
  """
  fetch data from the table: "Measurement_Attribute"
  """
  Measurement_Attribute("distinct select on columns" distinct_on: [Measurement_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_Attribute_order_by!], "filter the rows returned" where: Measurement_Attribute_bool_exp): [Measurement_Attribute!]!
  """
  fetch aggregated fields from the table: "Measurement_Attribute"
  """
  Measurement_Attribute_aggregate("distinct select on columns" distinct_on: [Measurement_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_Attribute_order_by!], "filter the rows returned" where: Measurement_Attribute_bool_exp): Measurement_Attribute_aggregate!
  """
  fetch data from the table: "Measurement_Attribute" using primary key columns
  """
  Measurement_Attribute_by_pk(id: Int!): Measurement_Attribute
  """
  fetch aggregated fields from the table: "Measurement"
  """
  Measurement_aggregate("distinct select on columns" distinct_on: [Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_order_by!], "filter the rows returned" where: Measurement_bool_exp): Measurement_aggregate!
  """
  fetch data from the table: "Measurement" using primary key columns
  """
  Measurement_by_pk(id: Int!): Measurement
  """
  fetch data from the table: "Mission_Attribute"
  """
  Mission_Attribute("distinct select on columns" distinct_on: [Mission_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Mission_Attribute_order_by!], "filter the rows returned" where: Mission_Attribute_bool_exp): [Mission_Attribute!]!
  """
  fetch aggregated fields from the table: "Mission_Attribute"
  """
  Mission_Attribute_aggregate("distinct select on columns" distinct_on: [Mission_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Mission_Attribute_order_by!], "filter the rows returned" where: Mission_Attribute_bool_exp): Mission_Attribute_aggregate!
  """
  fetch data from the table: "Mission_Attribute" using primary key columns
  """
  Mission_Attribute_by_pk(id: Int!): Mission_Attribute
  """
  fetch data from the table: "ObjectiveScoreExplanation"
  """
  ObjectiveScoreExplanation("distinct select on columns" distinct_on: [ObjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ObjectiveScoreExplanation_order_by!], "filter the rows returned" where: ObjectiveScoreExplanation_bool_exp): [ObjectiveScoreExplanation!]!
  """
  fetch aggregated fields from the table: "ObjectiveScoreExplanation"
  """
  ObjectiveScoreExplanation_aggregate("distinct select on columns" distinct_on: [ObjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ObjectiveScoreExplanation_order_by!], "filter the rows returned" where: ObjectiveScoreExplanation_bool_exp): ObjectiveScoreExplanation_aggregate!
  """
  fetch data from the table: "ObjectiveScoreExplanation" using primary key columns
  """
  ObjectiveScoreExplanation_by_pk(id: Int!): ObjectiveScoreExplanation
  """
  fetch data from the table: "Orbit"
  """
  Orbit("distinct select on columns" distinct_on: [Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_order_by!], "filter the rows returned" where: Orbit_bool_exp): [Orbit!]!
  """
  fetch data from the table: "Orbit_Attribute"
  """
  Orbit_Attribute("distinct select on columns" distinct_on: [Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_Attribute_order_by!], "filter the rows returned" where: Orbit_Attribute_bool_exp): [Orbit_Attribute!]!
  """
  fetch aggregated fields from the table: "Orbit_Attribute"
  """
  Orbit_Attribute_aggregate("distinct select on columns" distinct_on: [Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_Attribute_order_by!], "filter the rows returned" where: Orbit_Attribute_bool_exp): Orbit_Attribute_aggregate!
  """
  fetch data from the table: "Orbit_Attribute" using primary key columns
  """
  Orbit_Attribute_by_pk(id: Int!): Orbit_Attribute
  """
  fetch aggregated fields from the table: "Orbit"
  """
  Orbit_aggregate("distinct select on columns" distinct_on: [Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_order_by!], "filter the rows returned" where: Orbit_bool_exp): Orbit_aggregate!
  """
  fetch data from the table: "Orbit" using primary key columns
  """
  Orbit_by_pk(id: Int!): Orbit
  """
  fetch data from the table: "PanelScoreExplanation"
  """
  PanelScoreExplanation("distinct select on columns" distinct_on: [PanelScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [PanelScoreExplanation_order_by!], "filter the rows returned" where: PanelScoreExplanation_bool_exp): [PanelScoreExplanation!]!
  """
  fetch aggregated fields from the table: "PanelScoreExplanation"
  """
  PanelScoreExplanation_aggregate("distinct select on columns" distinct_on: [PanelScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [PanelScoreExplanation_order_by!], "filter the rows returned" where: PanelScoreExplanation_bool_exp): PanelScoreExplanation_aggregate!
  """
  fetch data from the table: "PanelScoreExplanation" using primary key columns
  """
  PanelScoreExplanation_by_pk(id: Int!): PanelScoreExplanation
  """
  fetch data from the table: "Power_Mission_Analysis"
  """
  Power_Mission_Analysis("distinct select on columns" distinct_on: [Power_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Power_Mission_Analysis_order_by!], "filter the rows returned" where: Power_Mission_Analysis_bool_exp): [Power_Mission_Analysis!]!
  """
  fetch aggregated fields from the table: "Power_Mission_Analysis"
  """
  Power_Mission_Analysis_aggregate("distinct select on columns" distinct_on: [Power_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Power_Mission_Analysis_order_by!], "filter the rows returned" where: Power_Mission_Analysis_bool_exp): Power_Mission_Analysis_aggregate!
  """
  fetch data from the table: "Power_Mission_Analysis" using primary key columns
  """
  Power_Mission_Analysis_by_pk(id: Int!): Power_Mission_Analysis
  """
  fetch data from the table: "Problem"
  """
  Problem("distinct select on columns" distinct_on: [Problem_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Problem_order_by!], "filter the rows returned" where: Problem_bool_exp): [Problem!]!
  """
  fetch aggregated fields from the table: "Problem"
  """
  Problem_aggregate("distinct select on columns" distinct_on: [Problem_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Problem_order_by!], "filter the rows returned" where: Problem_bool_exp): Problem_aggregate!
  """
  fetch data from the table: "Problem" using primary key columns
  """
  Problem_by_pk(id: Int!): Problem
  """
  fetch data from the table: "Requirement_Rule_Attribute"
  """
  Requirement_Rule_Attribute("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): [Requirement_Rule_Attribute!]!
  """
  fetch aggregated fields from the table: "Requirement_Rule_Attribute"
  """
  Requirement_Rule_Attribute_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): Requirement_Rule_Attribute_aggregate!
  """
  fetch data from the table: "Requirement_Rule_Attribute" using primary key columns
  """
  Requirement_Rule_Attribute_by_pk(id: Int!): Requirement_Rule_Attribute
  """
  fetch data from the table: "Requirement_Rule_Case"
  """
  Requirement_Rule_Case("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): [Requirement_Rule_Case!]!
  """
  fetch aggregated fields from the table: "Requirement_Rule_Case"
  """
  Requirement_Rule_Case_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): Requirement_Rule_Case_aggregate!
  """
  fetch data from the table: "Requirement_Rule_Case" using primary key columns
  """
  Requirement_Rule_Case_by_pk(id: Int!): Requirement_Rule_Case
  """
  fetch data from the table: "Stakeholder_Needs_Objective"
  """
  Stakeholder_Needs_Objective("distinct select on columns" distinct_on: [Stakeholder_Needs_Objective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Objective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Objective_bool_exp): [Stakeholder_Needs_Objective!]!
  """
  fetch aggregated fields from the table: "Stakeholder_Needs_Objective"
  """
  Stakeholder_Needs_Objective_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Objective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Objective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Objective_bool_exp): Stakeholder_Needs_Objective_aggregate!
  """
  fetch data from the table: "Stakeholder_Needs_Objective" using primary key columns
  """
  Stakeholder_Needs_Objective_by_pk(id: Int!): Stakeholder_Needs_Objective
  """
  fetch data from the table: "Stakeholder_Needs_Panel"
  """
  Stakeholder_Needs_Panel("distinct select on columns" distinct_on: [Stakeholder_Needs_Panel_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Panel_order_by!], "filter the rows returned" where: Stakeholder_Needs_Panel_bool_exp): [Stakeholder_Needs_Panel!]!
  """
  fetch aggregated fields from the table: "Stakeholder_Needs_Panel"
  """
  Stakeholder_Needs_Panel_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Panel_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Panel_order_by!], "filter the rows returned" where: Stakeholder_Needs_Panel_bool_exp): Stakeholder_Needs_Panel_aggregate!
  """
  fetch data from the table: "Stakeholder_Needs_Panel" using primary key columns
  """
  Stakeholder_Needs_Panel_by_pk(id: Int!): Stakeholder_Needs_Panel
  """
  fetch data from the table: "Stakeholder_Needs_Subobjective"
  """
  Stakeholder_Needs_Subobjective("distinct select on columns" distinct_on: [Stakeholder_Needs_Subobjective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Subobjective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Subobjective_bool_exp): [Stakeholder_Needs_Subobjective!]!
  """
  fetch aggregated fields from the table: "Stakeholder_Needs_Subobjective"
  """
  Stakeholder_Needs_Subobjective_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Subobjective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Subobjective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Subobjective_bool_exp): Stakeholder_Needs_Subobjective_aggregate!
  """
  fetch data from the table: "Stakeholder_Needs_Subobjective" using primary key columns
  """
  Stakeholder_Needs_Subobjective_by_pk(id: Int!): Stakeholder_Needs_Subobjective
  """
  fetch data from the table: "SubobjectiveScoreExplanation"
  """
  SubobjectiveScoreExplanation("distinct select on columns" distinct_on: [SubobjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [SubobjectiveScoreExplanation_order_by!], "filter the rows returned" where: SubobjectiveScoreExplanation_bool_exp): [SubobjectiveScoreExplanation!]!
  """
  fetch aggregated fields from the table: "SubobjectiveScoreExplanation"
  """
  SubobjectiveScoreExplanation_aggregate("distinct select on columns" distinct_on: [SubobjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [SubobjectiveScoreExplanation_order_by!], "filter the rows returned" where: SubobjectiveScoreExplanation_bool_exp): SubobjectiveScoreExplanation_aggregate!
  """
  fetch data from the table: "SubobjectiveScoreExplanation" using primary key columns
  """
  SubobjectiveScoreExplanation_by_pk(id: Int!): SubobjectiveScoreExplanation
  """
  fetch data from the table: "Walker_Mission_Analysis"
  """
  Walker_Mission_Analysis("distinct select on columns" distinct_on: [Walker_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Walker_Mission_Analysis_order_by!], "filter the rows returned" where: Walker_Mission_Analysis_bool_exp): [Walker_Mission_Analysis!]!
  """
  fetch aggregated fields from the table: "Walker_Mission_Analysis"
  """
  Walker_Mission_Analysis_aggregate("distinct select on columns" distinct_on: [Walker_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Walker_Mission_Analysis_order_by!], "filter the rows returned" where: Walker_Mission_Analysis_bool_exp): Walker_Mission_Analysis_aggregate!
  """
  fetch data from the table: "Walker_Mission_Analysis" using primary key columns
  """
  Walker_Mission_Analysis_by_pk(id: Int!): Walker_Mission_Analysis
  """
  fetch data from the table: "auth_group"
  """
  auth_group("distinct select on columns" distinct_on: [auth_group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_order_by!], "filter the rows returned" where: auth_group_bool_exp): [auth_group!]!
  """
  fetch aggregated fields from the table: "auth_group"
  """
  auth_group_aggregate("distinct select on columns" distinct_on: [auth_group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_order_by!], "filter the rows returned" where: auth_group_bool_exp): auth_group_aggregate!
  """
  fetch data from the table: "auth_group" using primary key columns
  """
  auth_group_by_pk(id: Int!): auth_group
  "An array relationship"
  auth_group_permissions("distinct select on columns" distinct_on: [auth_group_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_permissions_order_by!], "filter the rows returned" where: auth_group_permissions_bool_exp): [auth_group_permissions!]!
  "An aggregate relationship"
  auth_group_permissions_aggregate("distinct select on columns" distinct_on: [auth_group_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_permissions_order_by!], "filter the rows returned" where: auth_group_permissions_bool_exp): auth_group_permissions_aggregate!
  """
  fetch data from the table: "auth_group_permissions" using primary key columns
  """
  auth_group_permissions_by_pk(id: Int!): auth_group_permissions
  """
  fetch data from the table: "auth_permission"
  """
  auth_permission("distinct select on columns" distinct_on: [auth_permission_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_permission_order_by!], "filter the rows returned" where: auth_permission_bool_exp): [auth_permission!]!
  """
  fetch aggregated fields from the table: "auth_permission"
  """
  auth_permission_aggregate("distinct select on columns" distinct_on: [auth_permission_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_permission_order_by!], "filter the rows returned" where: auth_permission_bool_exp): auth_permission_aggregate!
  """
  fetch data from the table: "auth_permission" using primary key columns
  """
  auth_permission_by_pk(id: Int!): auth_permission
  """
  fetch data from the table: "auth_user"
  """
  auth_user("distinct select on columns" distinct_on: [auth_user_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_order_by!], "filter the rows returned" where: auth_user_bool_exp): [auth_user!]!
  """
  fetch aggregated fields from the table: "auth_user"
  """
  auth_user_aggregate("distinct select on columns" distinct_on: [auth_user_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_order_by!], "filter the rows returned" where: auth_user_bool_exp): auth_user_aggregate!
  """
  fetch data from the table: "auth_user" using primary key columns
  """
  auth_user_by_pk(id: Int!): auth_user
  "An array relationship"
  auth_user_groups("distinct select on columns" distinct_on: [auth_user_groups_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_groups_order_by!], "filter the rows returned" where: auth_user_groups_bool_exp): [auth_user_groups!]!
  "An aggregate relationship"
  auth_user_groups_aggregate("distinct select on columns" distinct_on: [auth_user_groups_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_groups_order_by!], "filter the rows returned" where: auth_user_groups_bool_exp): auth_user_groups_aggregate!
  """
  fetch data from the table: "auth_user_groups" using primary key columns
  """
  auth_user_groups_by_pk(id: Int!): auth_user_groups
  "An array relationship"
  auth_user_user_permissions("distinct select on columns" distinct_on: [auth_user_user_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_user_permissions_order_by!], "filter the rows returned" where: auth_user_user_permissions_bool_exp): [auth_user_user_permissions!]!
  "An aggregate relationship"
  auth_user_user_permissions_aggregate("distinct select on columns" distinct_on: [auth_user_user_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_user_permissions_order_by!], "filter the rows returned" where: auth_user_user_permissions_bool_exp): auth_user_user_permissions_aggregate!
  """
  fetch data from the table: "auth_user_user_permissions" using primary key columns
  """
  auth_user_user_permissions_by_pk(id: Int!): auth_user_user_permissions
  """
  fetch data from the table: "daphne_context_dialoguecontext"
  """
  daphne_context_dialoguecontext("distinct select on columns" distinct_on: [daphne_context_dialoguecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguecontext_order_by!], "filter the rows returned" where: daphne_context_dialoguecontext_bool_exp): [daphne_context_dialoguecontext!]!
  """
  fetch aggregated fields from the table: "daphne_context_dialoguecontext"
  """
  daphne_context_dialoguecontext_aggregate("distinct select on columns" distinct_on: [daphne_context_dialoguecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguecontext_order_by!], "filter the rows returned" where: daphne_context_dialoguecontext_bool_exp): daphne_context_dialoguecontext_aggregate!
  """
  fetch data from the table: "daphne_context_dialoguecontext" using primary key columns
  """
  daphne_context_dialoguecontext_by_pk(id: Int!): daphne_context_dialoguecontext
  """
  fetch data from the table: "daphne_context_dialoguehistory"
  """
  daphne_context_dialoguehistory("distinct select on columns" distinct_on: [daphne_context_dialoguehistory_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguehistory_order_by!], "filter the rows returned" where: daphne_context_dialoguehistory_bool_exp): [daphne_context_dialoguehistory!]!
  """
  fetch aggregated fields from the table: "daphne_context_dialoguehistory"
  """
  daphne_context_dialoguehistory_aggregate("distinct select on columns" distinct_on: [daphne_context_dialoguehistory_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguehistory_order_by!], "filter the rows returned" where: daphne_context_dialoguehistory_bool_exp): daphne_context_dialoguehistory_aggregate!
  """
  fetch data from the table: "daphne_context_dialoguehistory" using primary key columns
  """
  daphne_context_dialoguehistory_by_pk(id: Int!): daphne_context_dialoguehistory
  """
  fetch data from the table: "daphne_context_mycroftuser"
  """
  daphne_context_mycroftuser("distinct select on columns" distinct_on: [daphne_context_mycroftuser_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_mycroftuser_order_by!], "filter the rows returned" where: daphne_context_mycroftuser_bool_exp): [daphne_context_mycroftuser!]!
  """
  fetch aggregated fields from the table: "daphne_context_mycroftuser"
  """
  daphne_context_mycroftuser_aggregate("distinct select on columns" distinct_on: [daphne_context_mycroftuser_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_mycroftuser_order_by!], "filter the rows returned" where: daphne_context_mycroftuser_bool_exp): daphne_context_mycroftuser_aggregate!
  """
  fetch data from the table: "daphne_context_mycroftuser" using primary key columns
  """
  daphne_context_mycroftuser_by_pk(user_id: Int!): daphne_context_mycroftuser
  """
  fetch data from the table: "daphne_context_userinformation"
  """
  daphne_context_userinformation("distinct select on columns" distinct_on: [daphne_context_userinformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_userinformation_order_by!], "filter the rows returned" where: daphne_context_userinformation_bool_exp): [daphne_context_userinformation!]!
  """
  fetch aggregated fields from the table: "daphne_context_userinformation"
  """
  daphne_context_userinformation_aggregate("distinct select on columns" distinct_on: [daphne_context_userinformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_userinformation_order_by!], "filter the rows returned" where: daphne_context_userinformation_bool_exp): daphne_context_userinformation_aggregate!
  """
  fetch data from the table: "daphne_context_userinformation" using primary key columns
  """
  daphne_context_userinformation_by_pk(id: Int!): daphne_context_userinformation
  """
  fetch data from the table: "django_admin_log"
  """
  django_admin_log("distinct select on columns" distinct_on: [django_admin_log_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_admin_log_order_by!], "filter the rows returned" where: django_admin_log_bool_exp): [django_admin_log!]!
  """
  fetch aggregated fields from the table: "django_admin_log"
  """
  django_admin_log_aggregate("distinct select on columns" distinct_on: [django_admin_log_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_admin_log_order_by!], "filter the rows returned" where: django_admin_log_bool_exp): django_admin_log_aggregate!
  """
  fetch data from the table: "django_admin_log" using primary key columns
  """
  django_admin_log_by_pk(id: Int!): django_admin_log
  """
  fetch data from the table: "django_content_type"
  """
  django_content_type("distinct select on columns" distinct_on: [django_content_type_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_content_type_order_by!], "filter the rows returned" where: django_content_type_bool_exp): [django_content_type!]!
  """
  fetch aggregated fields from the table: "django_content_type"
  """
  django_content_type_aggregate("distinct select on columns" distinct_on: [django_content_type_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_content_type_order_by!], "filter the rows returned" where: django_content_type_bool_exp): django_content_type_aggregate!
  """
  fetch data from the table: "django_content_type" using primary key columns
  """
  django_content_type_by_pk(id: Int!): django_content_type
  """
  fetch data from the table: "django_migrations"
  """
  django_migrations("distinct select on columns" distinct_on: [django_migrations_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_migrations_order_by!], "filter the rows returned" where: django_migrations_bool_exp): [django_migrations!]!
  """
  fetch aggregated fields from the table: "django_migrations"
  """
  django_migrations_aggregate("distinct select on columns" distinct_on: [django_migrations_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_migrations_order_by!], "filter the rows returned" where: django_migrations_bool_exp): django_migrations_aggregate!
  """
  fetch data from the table: "django_migrations" using primary key columns
  """
  django_migrations_by_pk(id: Int!): django_migrations
  """
  fetch data from the table: "django_session"
  """
  django_session("distinct select on columns" distinct_on: [django_session_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_session_order_by!], "filter the rows returned" where: django_session_bool_exp): [django_session!]!
  """
  fetch aggregated fields from the table: "django_session"
  """
  django_session_aggregate("distinct select on columns" distinct_on: [django_session_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_session_order_by!], "filter the rows returned" where: django_session_bool_exp): django_session_aggregate!
  """
  fetch data from the table: "django_session" using primary key columns
  """
  django_session_by_pk(session_key: String!): django_session
  """
  fetch data from the table: "experiment_allowedcommand"
  """
  experiment_allowedcommand("distinct select on columns" distinct_on: [experiment_allowedcommand_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_allowedcommand_order_by!], "filter the rows returned" where: experiment_allowedcommand_bool_exp): [experiment_allowedcommand!]!
  """
  fetch aggregated fields from the table: "experiment_allowedcommand"
  """
  experiment_allowedcommand_aggregate("distinct select on columns" distinct_on: [experiment_allowedcommand_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_allowedcommand_order_by!], "filter the rows returned" where: experiment_allowedcommand_bool_exp): experiment_allowedcommand_aggregate!
  """
  fetch data from the table: "experiment_allowedcommand" using primary key columns
  """
  experiment_allowedcommand_by_pk(id: Int!): experiment_allowedcommand
  """
  fetch data from the table: "experiment_experimentaction"
  """
  experiment_experimentaction("distinct select on columns" distinct_on: [experiment_experimentaction_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentaction_order_by!], "filter the rows returned" where: experiment_experimentaction_bool_exp): [experiment_experimentaction!]!
  """
  fetch aggregated fields from the table: "experiment_experimentaction"
  """
  experiment_experimentaction_aggregate("distinct select on columns" distinct_on: [experiment_experimentaction_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentaction_order_by!], "filter the rows returned" where: experiment_experimentaction_bool_exp): experiment_experimentaction_aggregate!
  """
  fetch data from the table: "experiment_experimentaction" using primary key columns
  """
  experiment_experimentaction_by_pk(id: Int!): experiment_experimentaction
  """
  fetch data from the table: "experiment_experimentcontext"
  """
  experiment_experimentcontext("distinct select on columns" distinct_on: [experiment_experimentcontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentcontext_order_by!], "filter the rows returned" where: experiment_experimentcontext_bool_exp): [experiment_experimentcontext!]!
  """
  fetch aggregated fields from the table: "experiment_experimentcontext"
  """
  experiment_experimentcontext_aggregate("distinct select on columns" distinct_on: [experiment_experimentcontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentcontext_order_by!], "filter the rows returned" where: experiment_experimentcontext_bool_exp): experiment_experimentcontext_aggregate!
  """
  fetch data from the table: "experiment_experimentcontext" using primary key columns
  """
  experiment_experimentcontext_by_pk(id: Int!): experiment_experimentcontext
  """
  fetch data from the table: "experiment_experimentstage"
  """
  experiment_experimentstage("distinct select on columns" distinct_on: [experiment_experimentstage_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentstage_order_by!], "filter the rows returned" where: experiment_experimentstage_bool_exp): [experiment_experimentstage!]!
  """
  fetch aggregated fields from the table: "experiment_experimentstage"
  """
  experiment_experimentstage_aggregate("distinct select on columns" distinct_on: [experiment_experimentstage_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentstage_order_by!], "filter the rows returned" where: experiment_experimentstage_bool_exp): experiment_experimentstage_aggregate!
  """
  fetch data from the table: "experiment_experimentstage" using primary key columns
  """
  experiment_experimentstage_by_pk(id: Int!): experiment_experimentstage
}
scalar smallint
"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}
type subscription_root {
  """
  fetch data from the table: "Accepted_Value"
  """
  Accepted_Value("distinct select on columns" distinct_on: [Accepted_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Accepted_Value_order_by!], "filter the rows returned" where: Accepted_Value_bool_exp): [Accepted_Value!]!
  """
  fetch aggregated fields from the table: "Accepted_Value"
  """
  Accepted_Value_aggregate("distinct select on columns" distinct_on: [Accepted_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Accepted_Value_order_by!], "filter the rows returned" where: Accepted_Value_bool_exp): Accepted_Value_aggregate!
  """
  fetch data from the table: "Accepted_Value" using primary key columns
  """
  Accepted_Value_by_pk(id: Int!): Accepted_Value
  """
  fetch data from the table: "Architecture"
  """
  Architecture("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): [Architecture!]!
  """
  fetch data from the table: "ArchitectureBudget"
  """
  ArchitectureBudget("distinct select on columns" distinct_on: [ArchitectureBudget_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureBudget_order_by!], "filter the rows returned" where: ArchitectureBudget_bool_exp): [ArchitectureBudget!]!
  """
  fetch aggregated fields from the table: "ArchitectureBudget"
  """
  ArchitectureBudget_aggregate("distinct select on columns" distinct_on: [ArchitectureBudget_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureBudget_order_by!], "filter the rows returned" where: ArchitectureBudget_bool_exp): ArchitectureBudget_aggregate!
  """
  fetch data from the table: "ArchitectureBudget" using primary key columns
  """
  ArchitectureBudget_by_pk(id: Int!): ArchitectureBudget
  """
  fetch data from the table: "ArchitectureCostInformation"
  """
  ArchitectureCostInformation("distinct select on columns" distinct_on: [ArchitectureCostInformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureCostInformation_order_by!], "filter the rows returned" where: ArchitectureCostInformation_bool_exp): [ArchitectureCostInformation!]!
  """
  fetch aggregated fields from the table: "ArchitectureCostInformation"
  """
  ArchitectureCostInformation_aggregate("distinct select on columns" distinct_on: [ArchitectureCostInformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureCostInformation_order_by!], "filter the rows returned" where: ArchitectureCostInformation_bool_exp): ArchitectureCostInformation_aggregate!
  """
  fetch data from the table: "ArchitectureCostInformation" using primary key columns
  """
  ArchitectureCostInformation_by_pk(id: Int!): ArchitectureCostInformation
  """
  fetch data from the table: "ArchitecturePayload"
  """
  ArchitecturePayload("distinct select on columns" distinct_on: [ArchitecturePayload_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitecturePayload_order_by!], "filter the rows returned" where: ArchitecturePayload_bool_exp): [ArchitecturePayload!]!
  """
  fetch aggregated fields from the table: "ArchitecturePayload"
  """
  ArchitecturePayload_aggregate("distinct select on columns" distinct_on: [ArchitecturePayload_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitecturePayload_order_by!], "filter the rows returned" where: ArchitecturePayload_bool_exp): ArchitecturePayload_aggregate!
  """
  fetch data from the table: "ArchitecturePayload" using primary key columns
  """
  ArchitecturePayload_by_pk(id: Int!): ArchitecturePayload
  """
  fetch data from the table: "ArchitectureScoreExplanation"
  """
  ArchitectureScoreExplanation("distinct select on columns" distinct_on: [ArchitectureScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureScoreExplanation_order_by!], "filter the rows returned" where: ArchitectureScoreExplanation_bool_exp): [ArchitectureScoreExplanation!]!
  """
  fetch aggregated fields from the table: "ArchitectureScoreExplanation"
  """
  ArchitectureScoreExplanation_aggregate("distinct select on columns" distinct_on: [ArchitectureScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ArchitectureScoreExplanation_order_by!], "filter the rows returned" where: ArchitectureScoreExplanation_bool_exp): ArchitectureScoreExplanation_aggregate!
  """
  fetch data from the table: "ArchitectureScoreExplanation" using primary key columns
  """
  ArchitectureScoreExplanation_by_pk(id: Int!): ArchitectureScoreExplanation
  """
  fetch aggregated fields from the table: "Architecture"
  """
  Architecture_aggregate("distinct select on columns" distinct_on: [Architecture_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Architecture_order_by!], "filter the rows returned" where: Architecture_bool_exp): Architecture_aggregate!
  """
  fetch data from the table: "Architecture" using primary key columns
  """
  Architecture_by_pk(id: Int!): Architecture
  """
  fetch data from the table: "Dataset"
  """
  Dataset("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): [Dataset!]!
  """
  fetch aggregated fields from the table: "Dataset"
  """
  Dataset_aggregate("distinct select on columns" distinct_on: [Dataset_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Dataset_order_by!], "filter the rows returned" where: Dataset_bool_exp): Dataset_aggregate!
  """
  fetch data from the table: "Dataset" using primary key columns
  """
  Dataset_by_pk(id: Int!): Dataset
  """
  fetch data from the table: "EDL_edlcontext"
  """
  EDL_edlcontext("distinct select on columns" distinct_on: [EDL_edlcontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EDL_edlcontext_order_by!], "filter the rows returned" where: EDL_edlcontext_bool_exp): [EDL_edlcontext!]!
  """
  fetch aggregated fields from the table: "EDL_edlcontext"
  """
  EDL_edlcontext_aggregate("distinct select on columns" distinct_on: [EDL_edlcontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EDL_edlcontext_order_by!], "filter the rows returned" where: EDL_edlcontext_bool_exp): EDL_edlcontext_aggregate!
  """
  fetch data from the table: "EDL_edlcontext" using primary key columns
  """
  EDL_edlcontext_by_pk(id: Int!): EDL_edlcontext
  """
  fetch data from the table: "EOSS_activecontext"
  """
  EOSS_activecontext("distinct select on columns" distinct_on: [EOSS_activecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_activecontext_order_by!], "filter the rows returned" where: EOSS_activecontext_bool_exp): [EOSS_activecontext!]!
  """
  fetch aggregated fields from the table: "EOSS_activecontext"
  """
  EOSS_activecontext_aggregate("distinct select on columns" distinct_on: [EOSS_activecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_activecontext_order_by!], "filter the rows returned" where: EOSS_activecontext_bool_exp): EOSS_activecontext_aggregate!
  """
  fetch data from the table: "EOSS_activecontext" using primary key columns
  """
  EOSS_activecontext_by_pk(id: Int!): EOSS_activecontext
  """
  fetch data from the table: "EOSS_engineercontext"
  """
  EOSS_engineercontext("distinct select on columns" distinct_on: [EOSS_engineercontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_engineercontext_order_by!], "filter the rows returned" where: EOSS_engineercontext_bool_exp): [EOSS_engineercontext!]!
  """
  fetch aggregated fields from the table: "EOSS_engineercontext"
  """
  EOSS_engineercontext_aggregate("distinct select on columns" distinct_on: [EOSS_engineercontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_engineercontext_order_by!], "filter the rows returned" where: EOSS_engineercontext_bool_exp): EOSS_engineercontext_aggregate!
  """
  fetch data from the table: "EOSS_engineercontext" using primary key columns
  """
  EOSS_engineercontext_by_pk(id: Int!): EOSS_engineercontext
  """
  fetch data from the table: "EOSS_eosscontext"
  """
  EOSS_eosscontext("distinct select on columns" distinct_on: [EOSS_eosscontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_eosscontext_order_by!], "filter the rows returned" where: EOSS_eosscontext_bool_exp): [EOSS_eosscontext!]!
  """
  fetch aggregated fields from the table: "EOSS_eosscontext"
  """
  EOSS_eosscontext_aggregate("distinct select on columns" distinct_on: [EOSS_eosscontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_eosscontext_order_by!], "filter the rows returned" where: EOSS_eosscontext_bool_exp): EOSS_eosscontext_aggregate!
  """
  fetch data from the table: "EOSS_eosscontext" using primary key columns
  """
  EOSS_eosscontext_by_pk(id: Int!): EOSS_eosscontext
  """
  fetch data from the table: "EOSS_eossdialoguecontext"
  """
  EOSS_eossdialoguecontext("distinct select on columns" distinct_on: [EOSS_eossdialoguecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_eossdialoguecontext_order_by!], "filter the rows returned" where: EOSS_eossdialoguecontext_bool_exp): [EOSS_eossdialoguecontext!]!
  """
  fetch aggregated fields from the table: "EOSS_eossdialoguecontext"
  """
  EOSS_eossdialoguecontext_aggregate("distinct select on columns" distinct_on: [EOSS_eossdialoguecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [EOSS_eossdialoguecontext_order_by!], "filter the rows returned" where: EOSS_eossdialoguecontext_bool_exp): EOSS_eossdialoguecontext_aggregate!
  """
  fetch data from the table: "EOSS_eossdialoguecontext" using primary key columns
  """
  EOSS_eossdialoguecontext_by_pk(id: Int!): EOSS_eossdialoguecontext
  """
  fetch data from the table: "Fuzzy_Attribute"
  """
  Fuzzy_Attribute("distinct select on columns" distinct_on: [Fuzzy_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Attribute_order_by!], "filter the rows returned" where: Fuzzy_Attribute_bool_exp): [Fuzzy_Attribute!]!
  """
  fetch aggregated fields from the table: "Fuzzy_Attribute"
  """
  Fuzzy_Attribute_aggregate("distinct select on columns" distinct_on: [Fuzzy_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Attribute_order_by!], "filter the rows returned" where: Fuzzy_Attribute_bool_exp): Fuzzy_Attribute_aggregate!
  """
  fetch data from the table: "Fuzzy_Attribute" using primary key columns
  """
  Fuzzy_Attribute_by_pk(id: Int!): Fuzzy_Attribute
  """
  fetch data from the table: "Fuzzy_Value"
  """
  Fuzzy_Value("distinct select on columns" distinct_on: [Fuzzy_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Value_order_by!], "filter the rows returned" where: Fuzzy_Value_bool_exp): [Fuzzy_Value!]!
  """
  fetch aggregated fields from the table: "Fuzzy_Value"
  """
  Fuzzy_Value_aggregate("distinct select on columns" distinct_on: [Fuzzy_Value_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Fuzzy_Value_order_by!], "filter the rows returned" where: Fuzzy_Value_bool_exp): Fuzzy_Value_aggregate!
  """
  fetch data from the table: "Fuzzy_Value" using primary key columns
  """
  Fuzzy_Value_by_pk(id: Int!): Fuzzy_Value
  """
  fetch data from the table: "Group"
  """
  Group("distinct select on columns" distinct_on: [Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Group_order_by!], "filter the rows returned" where: Group_bool_exp): [Group!]!
  """
  fetch aggregated fields from the table: "Group"
  """
  Group_aggregate("distinct select on columns" distinct_on: [Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Group_order_by!], "filter the rows returned" where: Group_bool_exp): Group_aggregate!
  """
  fetch data from the table: "Group" using primary key columns
  """
  Group_by_pk(id: Int!): Group
  """
  fetch data from the table: "Inheritence_Attribute"
  """
  Inheritence_Attribute("distinct select on columns" distinct_on: [Inheritence_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Inheritence_Attribute_order_by!], "filter the rows returned" where: Inheritence_Attribute_bool_exp): [Inheritence_Attribute!]!
  """
  fetch aggregated fields from the table: "Inheritence_Attribute"
  """
  Inheritence_Attribute_aggregate("distinct select on columns" distinct_on: [Inheritence_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Inheritence_Attribute_order_by!], "filter the rows returned" where: Inheritence_Attribute_bool_exp): Inheritence_Attribute_aggregate!
  """
  fetch data from the table: "Inheritence_Attribute" using primary key columns
  """
  Inheritence_Attribute_by_pk(id: Int!): Inheritence_Attribute
  """
  fetch data from the table: "Instrument"
  """
  Instrument("distinct select on columns" distinct_on: [Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_order_by!], "filter the rows returned" where: Instrument_bool_exp): [Instrument!]!
  """
  fetch data from the table: "Instrument_Attribute"
  """
  Instrument_Attribute("distinct select on columns" distinct_on: [Instrument_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_Attribute_order_by!], "filter the rows returned" where: Instrument_Attribute_bool_exp): [Instrument_Attribute!]!
  """
  fetch aggregated fields from the table: "Instrument_Attribute"
  """
  Instrument_Attribute_aggregate("distinct select on columns" distinct_on: [Instrument_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_Attribute_order_by!], "filter the rows returned" where: Instrument_Attribute_bool_exp): Instrument_Attribute_aggregate!
  """
  fetch data from the table: "Instrument_Attribute" using primary key columns
  """
  Instrument_Attribute_by_pk(id: Int!): Instrument_Attribute
  """
  fetch aggregated fields from the table: "Instrument"
  """
  Instrument_aggregate("distinct select on columns" distinct_on: [Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Instrument_order_by!], "filter the rows returned" where: Instrument_bool_exp): Instrument_aggregate!
  """
  fetch data from the table: "Instrument" using primary key columns
  """
  Instrument_by_pk(id: Int!): Instrument
  """
  fetch data from the table: "Join__AuthUser_Group"
  """
  Join__AuthUser_Group("distinct select on columns" distinct_on: [Join__AuthUser_Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__AuthUser_Group_order_by!], "filter the rows returned" where: Join__AuthUser_Group_bool_exp): [Join__AuthUser_Group!]!
  """
  fetch aggregated fields from the table: "Join__AuthUser_Group"
  """
  Join__AuthUser_Group_aggregate("distinct select on columns" distinct_on: [Join__AuthUser_Group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__AuthUser_Group_order_by!], "filter the rows returned" where: Join__AuthUser_Group_bool_exp): Join__AuthUser_Group_aggregate!
  """
  fetch data from the table: "Join__AuthUser_Group" using primary key columns
  """
  Join__AuthUser_Group_by_pk(id: Int!): Join__AuthUser_Group
  """
  fetch data from the table: "Join__Case_Attribute"
  """
  Join__Case_Attribute("distinct select on columns" distinct_on: [Join__Case_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Case_Attribute_order_by!], "filter the rows returned" where: Join__Case_Attribute_bool_exp): [Join__Case_Attribute!]!
  """
  fetch aggregated fields from the table: "Join__Case_Attribute"
  """
  Join__Case_Attribute_aggregate("distinct select on columns" distinct_on: [Join__Case_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Case_Attribute_order_by!], "filter the rows returned" where: Join__Case_Attribute_bool_exp): Join__Case_Attribute_aggregate!
  """
  fetch data from the table: "Join__Case_Attribute" using primary key columns
  """
  Join__Case_Attribute_by_pk(id: Int!): Join__Case_Attribute
  "An array relationship"
  Join__Instrument_Attribute_Values("distinct select on columns" distinct_on: [Join__Instrument_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Attribute_Values_order_by!], "filter the rows returned" where: Join__Instrument_Attribute_Values_bool_exp): [Join__Instrument_Attribute_Values!]!
  "An aggregate relationship"
  Join__Instrument_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Attribute_Values_order_by!], "filter the rows returned" where: Join__Instrument_Attribute_Values_bool_exp): Join__Instrument_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Instrument_Attribute_Values" using primary key columns
  """
  Join__Instrument_Attribute_Values_by_pk(id: Int!): Join__Instrument_Attribute_Values
  """
  fetch data from the table: "Join__Instrument_Capability"
  """
  Join__Instrument_Capability("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): [Join__Instrument_Capability!]!
  """
  fetch aggregated fields from the table: "Join__Instrument_Capability"
  """
  Join__Instrument_Capability_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Capability_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Capability_order_by!], "filter the rows returned" where: Join__Instrument_Capability_bool_exp): Join__Instrument_Capability_aggregate!
  """
  fetch data from the table: "Join__Instrument_Capability" using primary key columns
  """
  Join__Instrument_Capability_by_pk(id: Int!): Join__Instrument_Capability
  """
  fetch data from the table: "Join__Instrument_Characteristic"
  """
  Join__Instrument_Characteristic("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): [Join__Instrument_Characteristic!]!
  """
  fetch aggregated fields from the table: "Join__Instrument_Characteristic"
  """
  Join__Instrument_Characteristic_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Characteristic_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Characteristic_order_by!], "filter the rows returned" where: Join__Instrument_Characteristic_bool_exp): Join__Instrument_Characteristic_aggregate!
  """
  fetch data from the table: "Join__Instrument_Characteristic" using primary key columns
  """
  Join__Instrument_Characteristic_by_pk(id: Int!): Join__Instrument_Characteristic
  """
  fetch data from the table: "Join__Instrument_Measurement"
  """
  Join__Instrument_Measurement("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): [Join__Instrument_Measurement!]!
  """
  fetch aggregated fields from the table: "Join__Instrument_Measurement"
  """
  Join__Instrument_Measurement_aggregate("distinct select on columns" distinct_on: [Join__Instrument_Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Instrument_Measurement_order_by!], "filter the rows returned" where: Join__Instrument_Measurement_bool_exp): Join__Instrument_Measurement_aggregate!
  """
  fetch data from the table: "Join__Instrument_Measurement" using primary key columns
  """
  Join__Instrument_Measurement_by_pk(id: Int!): Join__Instrument_Measurement
  """
  fetch data from the table: "Join__Launch_Vehicle_Attribute"
  """
  Join__Launch_Vehicle_Attribute("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): [Join__Launch_Vehicle_Attribute!]!
  "An array relationship"
  Join__Launch_Vehicle_Attribute_Values("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_Values_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_Values_bool_exp): [Join__Launch_Vehicle_Attribute_Values!]!
  "An aggregate relationship"
  Join__Launch_Vehicle_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_Values_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_Values_bool_exp): Join__Launch_Vehicle_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Launch_Vehicle_Attribute_Values" using primary key columns
  """
  Join__Launch_Vehicle_Attribute_Values_by_pk(id: Int!): Join__Launch_Vehicle_Attribute_Values
  """
  fetch aggregated fields from the table: "Join__Launch_Vehicle_Attribute"
  """
  Join__Launch_Vehicle_Attribute_aggregate("distinct select on columns" distinct_on: [Join__Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Join__Launch_Vehicle_Attribute_bool_exp): Join__Launch_Vehicle_Attribute_aggregate!
  """
  fetch data from the table: "Join__Launch_Vehicle_Attribute" using primary key columns
  """
  Join__Launch_Vehicle_Attribute_by_pk(id: Int!): Join__Launch_Vehicle_Attribute
  "An array relationship"
  Join__Measurement_Attribute_Values("distinct select on columns" distinct_on: [Join__Measurement_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Measurement_Attribute_Values_order_by!], "filter the rows returned" where: Join__Measurement_Attribute_Values_bool_exp): [Join__Measurement_Attribute_Values!]!
  "An aggregate relationship"
  Join__Measurement_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Measurement_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Measurement_Attribute_Values_order_by!], "filter the rows returned" where: Join__Measurement_Attribute_Values_bool_exp): Join__Measurement_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Measurement_Attribute_Values" using primary key columns
  """
  Join__Measurement_Attribute_Values_by_pk(id: Int!): Join__Measurement_Attribute_Values
  "An array relationship"
  Join__Mission_Attribute_Values("distinct select on columns" distinct_on: [Join__Mission_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Mission_Attribute_Values_order_by!], "filter the rows returned" where: Join__Mission_Attribute_Values_bool_exp): [Join__Mission_Attribute_Values!]!
  "An aggregate relationship"
  Join__Mission_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Mission_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Mission_Attribute_Values_order_by!], "filter the rows returned" where: Join__Mission_Attribute_Values_bool_exp): Join__Mission_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Mission_Attribute_Values" using primary key columns
  """
  Join__Mission_Attribute_Values_by_pk(id: Int!): Join__Mission_Attribute_Values
  """
  fetch data from the table: "Join__Orbit_Attribute"
  """
  Join__Orbit_Attribute("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): [Join__Orbit_Attribute!]!
  "An array relationship"
  Join__Orbit_Attribute_Values("distinct select on columns" distinct_on: [Join__Orbit_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_Values_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_Values_bool_exp): [Join__Orbit_Attribute_Values!]!
  "An aggregate relationship"
  Join__Orbit_Attribute_Values_aggregate("distinct select on columns" distinct_on: [Join__Orbit_Attribute_Values_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_Values_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_Values_bool_exp): Join__Orbit_Attribute_Values_aggregate!
  """
  fetch data from the table: "Join__Orbit_Attribute_Values" using primary key columns
  """
  Join__Orbit_Attribute_Values_by_pk(id: Int!): Join__Orbit_Attribute_Values
  """
  fetch aggregated fields from the table: "Join__Orbit_Attribute"
  """
  Join__Orbit_Attribute_aggregate("distinct select on columns" distinct_on: [Join__Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Orbit_Attribute_order_by!], "filter the rows returned" where: Join__Orbit_Attribute_bool_exp): Join__Orbit_Attribute_aggregate!
  """
  fetch data from the table: "Join__Orbit_Attribute" using primary key columns
  """
  Join__Orbit_Attribute_by_pk(id: Int!): Join__Orbit_Attribute
  """
  fetch data from the table: "Join__Problem_Instrument"
  """
  Join__Problem_Instrument("distinct select on columns" distinct_on: [Join__Problem_Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Instrument_order_by!], "filter the rows returned" where: Join__Problem_Instrument_bool_exp): [Join__Problem_Instrument!]!
  """
  fetch aggregated fields from the table: "Join__Problem_Instrument"
  """
  Join__Problem_Instrument_aggregate("distinct select on columns" distinct_on: [Join__Problem_Instrument_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Instrument_order_by!], "filter the rows returned" where: Join__Problem_Instrument_bool_exp): Join__Problem_Instrument_aggregate!
  """
  fetch data from the table: "Join__Problem_Instrument" using primary key columns
  """
  Join__Problem_Instrument_by_pk(id: Int!): Join__Problem_Instrument
  """
  fetch data from the table: "Join__Problem_Launch_Vehicle"
  """
  Join__Problem_Launch_Vehicle("distinct select on columns" distinct_on: [Join__Problem_Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Launch_Vehicle_order_by!], "filter the rows returned" where: Join__Problem_Launch_Vehicle_bool_exp): [Join__Problem_Launch_Vehicle!]!
  """
  fetch aggregated fields from the table: "Join__Problem_Launch_Vehicle"
  """
  Join__Problem_Launch_Vehicle_aggregate("distinct select on columns" distinct_on: [Join__Problem_Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Launch_Vehicle_order_by!], "filter the rows returned" where: Join__Problem_Launch_Vehicle_bool_exp): Join__Problem_Launch_Vehicle_aggregate!
  """
  fetch data from the table: "Join__Problem_Launch_Vehicle" using primary key columns
  """
  Join__Problem_Launch_Vehicle_by_pk(id: Int!): Join__Problem_Launch_Vehicle
  """
  fetch data from the table: "Join__Problem_Orbit"
  """
  Join__Problem_Orbit("distinct select on columns" distinct_on: [Join__Problem_Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Orbit_order_by!], "filter the rows returned" where: Join__Problem_Orbit_bool_exp): [Join__Problem_Orbit!]!
  """
  fetch aggregated fields from the table: "Join__Problem_Orbit"
  """
  Join__Problem_Orbit_aggregate("distinct select on columns" distinct_on: [Join__Problem_Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Join__Problem_Orbit_order_by!], "filter the rows returned" where: Join__Problem_Orbit_bool_exp): Join__Problem_Orbit_aggregate!
  """
  fetch data from the table: "Join__Problem_Orbit" using primary key columns
  """
  Join__Problem_Orbit_by_pk(id: Int!): Join__Problem_Orbit
  """
  fetch data from the table: "Launch_Vehicle"
  """
  Launch_Vehicle("distinct select on columns" distinct_on: [Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_order_by!], "filter the rows returned" where: Launch_Vehicle_bool_exp): [Launch_Vehicle!]!
  """
  fetch data from the table: "Launch_Vehicle_Attribute"
  """
  Launch_Vehicle_Attribute("distinct select on columns" distinct_on: [Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Launch_Vehicle_Attribute_bool_exp): [Launch_Vehicle_Attribute!]!
  """
  fetch aggregated fields from the table: "Launch_Vehicle_Attribute"
  """
  Launch_Vehicle_Attribute_aggregate("distinct select on columns" distinct_on: [Launch_Vehicle_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Attribute_order_by!], "filter the rows returned" where: Launch_Vehicle_Attribute_bool_exp): Launch_Vehicle_Attribute_aggregate!
  """
  fetch data from the table: "Launch_Vehicle_Attribute" using primary key columns
  """
  Launch_Vehicle_Attribute_by_pk(id: Int!): Launch_Vehicle_Attribute
  """
  fetch data from the table: "Launch_Vehicle_Mission_Analysis"
  """
  Launch_Vehicle_Mission_Analysis("distinct select on columns" distinct_on: [Launch_Vehicle_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Mission_Analysis_order_by!], "filter the rows returned" where: Launch_Vehicle_Mission_Analysis_bool_exp): [Launch_Vehicle_Mission_Analysis!]!
  """
  fetch aggregated fields from the table: "Launch_Vehicle_Mission_Analysis"
  """
  Launch_Vehicle_Mission_Analysis_aggregate("distinct select on columns" distinct_on: [Launch_Vehicle_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_Mission_Analysis_order_by!], "filter the rows returned" where: Launch_Vehicle_Mission_Analysis_bool_exp): Launch_Vehicle_Mission_Analysis_aggregate!
  """
  fetch data from the table: "Launch_Vehicle_Mission_Analysis" using primary key columns
  """
  Launch_Vehicle_Mission_Analysis_by_pk(id: Int!): Launch_Vehicle_Mission_Analysis
  """
  fetch aggregated fields from the table: "Launch_Vehicle"
  """
  Launch_Vehicle_aggregate("distinct select on columns" distinct_on: [Launch_Vehicle_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Launch_Vehicle_order_by!], "filter the rows returned" where: Launch_Vehicle_bool_exp): Launch_Vehicle_aggregate!
  """
  fetch data from the table: "Launch_Vehicle" using primary key columns
  """
  Launch_Vehicle_by_pk(id: Int!): Launch_Vehicle
  """
  fetch data from the table: "Measurement"
  """
  Measurement("distinct select on columns" distinct_on: [Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_order_by!], "filter the rows returned" where: Measurement_bool_exp): [Measurement!]!
  """
  fetch data from the table: "Measurement_Attribute"
  """
  Measurement_Attribute("distinct select on columns" distinct_on: [Measurement_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_Attribute_order_by!], "filter the rows returned" where: Measurement_Attribute_bool_exp): [Measurement_Attribute!]!
  """
  fetch aggregated fields from the table: "Measurement_Attribute"
  """
  Measurement_Attribute_aggregate("distinct select on columns" distinct_on: [Measurement_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_Attribute_order_by!], "filter the rows returned" where: Measurement_Attribute_bool_exp): Measurement_Attribute_aggregate!
  """
  fetch data from the table: "Measurement_Attribute" using primary key columns
  """
  Measurement_Attribute_by_pk(id: Int!): Measurement_Attribute
  """
  fetch aggregated fields from the table: "Measurement"
  """
  Measurement_aggregate("distinct select on columns" distinct_on: [Measurement_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Measurement_order_by!], "filter the rows returned" where: Measurement_bool_exp): Measurement_aggregate!
  """
  fetch data from the table: "Measurement" using primary key columns
  """
  Measurement_by_pk(id: Int!): Measurement
  """
  fetch data from the table: "Mission_Attribute"
  """
  Mission_Attribute("distinct select on columns" distinct_on: [Mission_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Mission_Attribute_order_by!], "filter the rows returned" where: Mission_Attribute_bool_exp): [Mission_Attribute!]!
  """
  fetch aggregated fields from the table: "Mission_Attribute"
  """
  Mission_Attribute_aggregate("distinct select on columns" distinct_on: [Mission_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Mission_Attribute_order_by!], "filter the rows returned" where: Mission_Attribute_bool_exp): Mission_Attribute_aggregate!
  """
  fetch data from the table: "Mission_Attribute" using primary key columns
  """
  Mission_Attribute_by_pk(id: Int!): Mission_Attribute
  """
  fetch data from the table: "ObjectiveScoreExplanation"
  """
  ObjectiveScoreExplanation("distinct select on columns" distinct_on: [ObjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ObjectiveScoreExplanation_order_by!], "filter the rows returned" where: ObjectiveScoreExplanation_bool_exp): [ObjectiveScoreExplanation!]!
  """
  fetch aggregated fields from the table: "ObjectiveScoreExplanation"
  """
  ObjectiveScoreExplanation_aggregate("distinct select on columns" distinct_on: [ObjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [ObjectiveScoreExplanation_order_by!], "filter the rows returned" where: ObjectiveScoreExplanation_bool_exp): ObjectiveScoreExplanation_aggregate!
  """
  fetch data from the table: "ObjectiveScoreExplanation" using primary key columns
  """
  ObjectiveScoreExplanation_by_pk(id: Int!): ObjectiveScoreExplanation
  """
  fetch data from the table: "Orbit"
  """
  Orbit("distinct select on columns" distinct_on: [Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_order_by!], "filter the rows returned" where: Orbit_bool_exp): [Orbit!]!
  """
  fetch data from the table: "Orbit_Attribute"
  """
  Orbit_Attribute("distinct select on columns" distinct_on: [Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_Attribute_order_by!], "filter the rows returned" where: Orbit_Attribute_bool_exp): [Orbit_Attribute!]!
  """
  fetch aggregated fields from the table: "Orbit_Attribute"
  """
  Orbit_Attribute_aggregate("distinct select on columns" distinct_on: [Orbit_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_Attribute_order_by!], "filter the rows returned" where: Orbit_Attribute_bool_exp): Orbit_Attribute_aggregate!
  """
  fetch data from the table: "Orbit_Attribute" using primary key columns
  """
  Orbit_Attribute_by_pk(id: Int!): Orbit_Attribute
  """
  fetch aggregated fields from the table: "Orbit"
  """
  Orbit_aggregate("distinct select on columns" distinct_on: [Orbit_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Orbit_order_by!], "filter the rows returned" where: Orbit_bool_exp): Orbit_aggregate!
  """
  fetch data from the table: "Orbit" using primary key columns
  """
  Orbit_by_pk(id: Int!): Orbit
  """
  fetch data from the table: "PanelScoreExplanation"
  """
  PanelScoreExplanation("distinct select on columns" distinct_on: [PanelScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [PanelScoreExplanation_order_by!], "filter the rows returned" where: PanelScoreExplanation_bool_exp): [PanelScoreExplanation!]!
  """
  fetch aggregated fields from the table: "PanelScoreExplanation"
  """
  PanelScoreExplanation_aggregate("distinct select on columns" distinct_on: [PanelScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [PanelScoreExplanation_order_by!], "filter the rows returned" where: PanelScoreExplanation_bool_exp): PanelScoreExplanation_aggregate!
  """
  fetch data from the table: "PanelScoreExplanation" using primary key columns
  """
  PanelScoreExplanation_by_pk(id: Int!): PanelScoreExplanation
  """
  fetch data from the table: "Power_Mission_Analysis"
  """
  Power_Mission_Analysis("distinct select on columns" distinct_on: [Power_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Power_Mission_Analysis_order_by!], "filter the rows returned" where: Power_Mission_Analysis_bool_exp): [Power_Mission_Analysis!]!
  """
  fetch aggregated fields from the table: "Power_Mission_Analysis"
  """
  Power_Mission_Analysis_aggregate("distinct select on columns" distinct_on: [Power_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Power_Mission_Analysis_order_by!], "filter the rows returned" where: Power_Mission_Analysis_bool_exp): Power_Mission_Analysis_aggregate!
  """
  fetch data from the table: "Power_Mission_Analysis" using primary key columns
  """
  Power_Mission_Analysis_by_pk(id: Int!): Power_Mission_Analysis
  """
  fetch data from the table: "Problem"
  """
  Problem("distinct select on columns" distinct_on: [Problem_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Problem_order_by!], "filter the rows returned" where: Problem_bool_exp): [Problem!]!
  """
  fetch aggregated fields from the table: "Problem"
  """
  Problem_aggregate("distinct select on columns" distinct_on: [Problem_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Problem_order_by!], "filter the rows returned" where: Problem_bool_exp): Problem_aggregate!
  """
  fetch data from the table: "Problem" using primary key columns
  """
  Problem_by_pk(id: Int!): Problem
  """
  fetch data from the table: "Requirement_Rule_Attribute"
  """
  Requirement_Rule_Attribute("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): [Requirement_Rule_Attribute!]!
  """
  fetch aggregated fields from the table: "Requirement_Rule_Attribute"
  """
  Requirement_Rule_Attribute_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Attribute_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Attribute_order_by!], "filter the rows returned" where: Requirement_Rule_Attribute_bool_exp): Requirement_Rule_Attribute_aggregate!
  """
  fetch data from the table: "Requirement_Rule_Attribute" using primary key columns
  """
  Requirement_Rule_Attribute_by_pk(id: Int!): Requirement_Rule_Attribute
  """
  fetch data from the table: "Requirement_Rule_Case"
  """
  Requirement_Rule_Case("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): [Requirement_Rule_Case!]!
  """
  fetch aggregated fields from the table: "Requirement_Rule_Case"
  """
  Requirement_Rule_Case_aggregate("distinct select on columns" distinct_on: [Requirement_Rule_Case_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Requirement_Rule_Case_order_by!], "filter the rows returned" where: Requirement_Rule_Case_bool_exp): Requirement_Rule_Case_aggregate!
  """
  fetch data from the table: "Requirement_Rule_Case" using primary key columns
  """
  Requirement_Rule_Case_by_pk(id: Int!): Requirement_Rule_Case
  """
  fetch data from the table: "Stakeholder_Needs_Objective"
  """
  Stakeholder_Needs_Objective("distinct select on columns" distinct_on: [Stakeholder_Needs_Objective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Objective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Objective_bool_exp): [Stakeholder_Needs_Objective!]!
  """
  fetch aggregated fields from the table: "Stakeholder_Needs_Objective"
  """
  Stakeholder_Needs_Objective_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Objective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Objective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Objective_bool_exp): Stakeholder_Needs_Objective_aggregate!
  """
  fetch data from the table: "Stakeholder_Needs_Objective" using primary key columns
  """
  Stakeholder_Needs_Objective_by_pk(id: Int!): Stakeholder_Needs_Objective
  """
  fetch data from the table: "Stakeholder_Needs_Panel"
  """
  Stakeholder_Needs_Panel("distinct select on columns" distinct_on: [Stakeholder_Needs_Panel_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Panel_order_by!], "filter the rows returned" where: Stakeholder_Needs_Panel_bool_exp): [Stakeholder_Needs_Panel!]!
  """
  fetch aggregated fields from the table: "Stakeholder_Needs_Panel"
  """
  Stakeholder_Needs_Panel_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Panel_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Panel_order_by!], "filter the rows returned" where: Stakeholder_Needs_Panel_bool_exp): Stakeholder_Needs_Panel_aggregate!
  """
  fetch data from the table: "Stakeholder_Needs_Panel" using primary key columns
  """
  Stakeholder_Needs_Panel_by_pk(id: Int!): Stakeholder_Needs_Panel
  """
  fetch data from the table: "Stakeholder_Needs_Subobjective"
  """
  Stakeholder_Needs_Subobjective("distinct select on columns" distinct_on: [Stakeholder_Needs_Subobjective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Subobjective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Subobjective_bool_exp): [Stakeholder_Needs_Subobjective!]!
  """
  fetch aggregated fields from the table: "Stakeholder_Needs_Subobjective"
  """
  Stakeholder_Needs_Subobjective_aggregate("distinct select on columns" distinct_on: [Stakeholder_Needs_Subobjective_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Stakeholder_Needs_Subobjective_order_by!], "filter the rows returned" where: Stakeholder_Needs_Subobjective_bool_exp): Stakeholder_Needs_Subobjective_aggregate!
  """
  fetch data from the table: "Stakeholder_Needs_Subobjective" using primary key columns
  """
  Stakeholder_Needs_Subobjective_by_pk(id: Int!): Stakeholder_Needs_Subobjective
  """
  fetch data from the table: "SubobjectiveScoreExplanation"
  """
  SubobjectiveScoreExplanation("distinct select on columns" distinct_on: [SubobjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [SubobjectiveScoreExplanation_order_by!], "filter the rows returned" where: SubobjectiveScoreExplanation_bool_exp): [SubobjectiveScoreExplanation!]!
  """
  fetch aggregated fields from the table: "SubobjectiveScoreExplanation"
  """
  SubobjectiveScoreExplanation_aggregate("distinct select on columns" distinct_on: [SubobjectiveScoreExplanation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [SubobjectiveScoreExplanation_order_by!], "filter the rows returned" where: SubobjectiveScoreExplanation_bool_exp): SubobjectiveScoreExplanation_aggregate!
  """
  fetch data from the table: "SubobjectiveScoreExplanation" using primary key columns
  """
  SubobjectiveScoreExplanation_by_pk(id: Int!): SubobjectiveScoreExplanation
  """
  fetch data from the table: "Walker_Mission_Analysis"
  """
  Walker_Mission_Analysis("distinct select on columns" distinct_on: [Walker_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Walker_Mission_Analysis_order_by!], "filter the rows returned" where: Walker_Mission_Analysis_bool_exp): [Walker_Mission_Analysis!]!
  """
  fetch aggregated fields from the table: "Walker_Mission_Analysis"
  """
  Walker_Mission_Analysis_aggregate("distinct select on columns" distinct_on: [Walker_Mission_Analysis_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [Walker_Mission_Analysis_order_by!], "filter the rows returned" where: Walker_Mission_Analysis_bool_exp): Walker_Mission_Analysis_aggregate!
  """
  fetch data from the table: "Walker_Mission_Analysis" using primary key columns
  """
  Walker_Mission_Analysis_by_pk(id: Int!): Walker_Mission_Analysis
  """
  fetch data from the table: "auth_group"
  """
  auth_group("distinct select on columns" distinct_on: [auth_group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_order_by!], "filter the rows returned" where: auth_group_bool_exp): [auth_group!]!
  """
  fetch aggregated fields from the table: "auth_group"
  """
  auth_group_aggregate("distinct select on columns" distinct_on: [auth_group_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_order_by!], "filter the rows returned" where: auth_group_bool_exp): auth_group_aggregate!
  """
  fetch data from the table: "auth_group" using primary key columns
  """
  auth_group_by_pk(id: Int!): auth_group
  "An array relationship"
  auth_group_permissions("distinct select on columns" distinct_on: [auth_group_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_permissions_order_by!], "filter the rows returned" where: auth_group_permissions_bool_exp): [auth_group_permissions!]!
  "An aggregate relationship"
  auth_group_permissions_aggregate("distinct select on columns" distinct_on: [auth_group_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_group_permissions_order_by!], "filter the rows returned" where: auth_group_permissions_bool_exp): auth_group_permissions_aggregate!
  """
  fetch data from the table: "auth_group_permissions" using primary key columns
  """
  auth_group_permissions_by_pk(id: Int!): auth_group_permissions
  """
  fetch data from the table: "auth_permission"
  """
  auth_permission("distinct select on columns" distinct_on: [auth_permission_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_permission_order_by!], "filter the rows returned" where: auth_permission_bool_exp): [auth_permission!]!
  """
  fetch aggregated fields from the table: "auth_permission"
  """
  auth_permission_aggregate("distinct select on columns" distinct_on: [auth_permission_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_permission_order_by!], "filter the rows returned" where: auth_permission_bool_exp): auth_permission_aggregate!
  """
  fetch data from the table: "auth_permission" using primary key columns
  """
  auth_permission_by_pk(id: Int!): auth_permission
  """
  fetch data from the table: "auth_user"
  """
  auth_user("distinct select on columns" distinct_on: [auth_user_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_order_by!], "filter the rows returned" where: auth_user_bool_exp): [auth_user!]!
  """
  fetch aggregated fields from the table: "auth_user"
  """
  auth_user_aggregate("distinct select on columns" distinct_on: [auth_user_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_order_by!], "filter the rows returned" where: auth_user_bool_exp): auth_user_aggregate!
  """
  fetch data from the table: "auth_user" using primary key columns
  """
  auth_user_by_pk(id: Int!): auth_user
  "An array relationship"
  auth_user_groups("distinct select on columns" distinct_on: [auth_user_groups_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_groups_order_by!], "filter the rows returned" where: auth_user_groups_bool_exp): [auth_user_groups!]!
  "An aggregate relationship"
  auth_user_groups_aggregate("distinct select on columns" distinct_on: [auth_user_groups_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_groups_order_by!], "filter the rows returned" where: auth_user_groups_bool_exp): auth_user_groups_aggregate!
  """
  fetch data from the table: "auth_user_groups" using primary key columns
  """
  auth_user_groups_by_pk(id: Int!): auth_user_groups
  "An array relationship"
  auth_user_user_permissions("distinct select on columns" distinct_on: [auth_user_user_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_user_permissions_order_by!], "filter the rows returned" where: auth_user_user_permissions_bool_exp): [auth_user_user_permissions!]!
  "An aggregate relationship"
  auth_user_user_permissions_aggregate("distinct select on columns" distinct_on: [auth_user_user_permissions_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [auth_user_user_permissions_order_by!], "filter the rows returned" where: auth_user_user_permissions_bool_exp): auth_user_user_permissions_aggregate!
  """
  fetch data from the table: "auth_user_user_permissions" using primary key columns
  """
  auth_user_user_permissions_by_pk(id: Int!): auth_user_user_permissions
  """
  fetch data from the table: "daphne_context_dialoguecontext"
  """
  daphne_context_dialoguecontext("distinct select on columns" distinct_on: [daphne_context_dialoguecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguecontext_order_by!], "filter the rows returned" where: daphne_context_dialoguecontext_bool_exp): [daphne_context_dialoguecontext!]!
  """
  fetch aggregated fields from the table: "daphne_context_dialoguecontext"
  """
  daphne_context_dialoguecontext_aggregate("distinct select on columns" distinct_on: [daphne_context_dialoguecontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguecontext_order_by!], "filter the rows returned" where: daphne_context_dialoguecontext_bool_exp): daphne_context_dialoguecontext_aggregate!
  """
  fetch data from the table: "daphne_context_dialoguecontext" using primary key columns
  """
  daphne_context_dialoguecontext_by_pk(id: Int!): daphne_context_dialoguecontext
  """
  fetch data from the table: "daphne_context_dialoguehistory"
  """
  daphne_context_dialoguehistory("distinct select on columns" distinct_on: [daphne_context_dialoguehistory_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguehistory_order_by!], "filter the rows returned" where: daphne_context_dialoguehistory_bool_exp): [daphne_context_dialoguehistory!]!
  """
  fetch aggregated fields from the table: "daphne_context_dialoguehistory"
  """
  daphne_context_dialoguehistory_aggregate("distinct select on columns" distinct_on: [daphne_context_dialoguehistory_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_dialoguehistory_order_by!], "filter the rows returned" where: daphne_context_dialoguehistory_bool_exp): daphne_context_dialoguehistory_aggregate!
  """
  fetch data from the table: "daphne_context_dialoguehistory" using primary key columns
  """
  daphne_context_dialoguehistory_by_pk(id: Int!): daphne_context_dialoguehistory
  """
  fetch data from the table: "daphne_context_mycroftuser"
  """
  daphne_context_mycroftuser("distinct select on columns" distinct_on: [daphne_context_mycroftuser_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_mycroftuser_order_by!], "filter the rows returned" where: daphne_context_mycroftuser_bool_exp): [daphne_context_mycroftuser!]!
  """
  fetch aggregated fields from the table: "daphne_context_mycroftuser"
  """
  daphne_context_mycroftuser_aggregate("distinct select on columns" distinct_on: [daphne_context_mycroftuser_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_mycroftuser_order_by!], "filter the rows returned" where: daphne_context_mycroftuser_bool_exp): daphne_context_mycroftuser_aggregate!
  """
  fetch data from the table: "daphne_context_mycroftuser" using primary key columns
  """
  daphne_context_mycroftuser_by_pk(user_id: Int!): daphne_context_mycroftuser
  """
  fetch data from the table: "daphne_context_userinformation"
  """
  daphne_context_userinformation("distinct select on columns" distinct_on: [daphne_context_userinformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_userinformation_order_by!], "filter the rows returned" where: daphne_context_userinformation_bool_exp): [daphne_context_userinformation!]!
  """
  fetch aggregated fields from the table: "daphne_context_userinformation"
  """
  daphne_context_userinformation_aggregate("distinct select on columns" distinct_on: [daphne_context_userinformation_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [daphne_context_userinformation_order_by!], "filter the rows returned" where: daphne_context_userinformation_bool_exp): daphne_context_userinformation_aggregate!
  """
  fetch data from the table: "daphne_context_userinformation" using primary key columns
  """
  daphne_context_userinformation_by_pk(id: Int!): daphne_context_userinformation
  """
  fetch data from the table: "django_admin_log"
  """
  django_admin_log("distinct select on columns" distinct_on: [django_admin_log_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_admin_log_order_by!], "filter the rows returned" where: django_admin_log_bool_exp): [django_admin_log!]!
  """
  fetch aggregated fields from the table: "django_admin_log"
  """
  django_admin_log_aggregate("distinct select on columns" distinct_on: [django_admin_log_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_admin_log_order_by!], "filter the rows returned" where: django_admin_log_bool_exp): django_admin_log_aggregate!
  """
  fetch data from the table: "django_admin_log" using primary key columns
  """
  django_admin_log_by_pk(id: Int!): django_admin_log
  """
  fetch data from the table: "django_content_type"
  """
  django_content_type("distinct select on columns" distinct_on: [django_content_type_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_content_type_order_by!], "filter the rows returned" where: django_content_type_bool_exp): [django_content_type!]!
  """
  fetch aggregated fields from the table: "django_content_type"
  """
  django_content_type_aggregate("distinct select on columns" distinct_on: [django_content_type_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_content_type_order_by!], "filter the rows returned" where: django_content_type_bool_exp): django_content_type_aggregate!
  """
  fetch data from the table: "django_content_type" using primary key columns
  """
  django_content_type_by_pk(id: Int!): django_content_type
  """
  fetch data from the table: "django_migrations"
  """
  django_migrations("distinct select on columns" distinct_on: [django_migrations_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_migrations_order_by!], "filter the rows returned" where: django_migrations_bool_exp): [django_migrations!]!
  """
  fetch aggregated fields from the table: "django_migrations"
  """
  django_migrations_aggregate("distinct select on columns" distinct_on: [django_migrations_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_migrations_order_by!], "filter the rows returned" where: django_migrations_bool_exp): django_migrations_aggregate!
  """
  fetch data from the table: "django_migrations" using primary key columns
  """
  django_migrations_by_pk(id: Int!): django_migrations
  """
  fetch data from the table: "django_session"
  """
  django_session("distinct select on columns" distinct_on: [django_session_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_session_order_by!], "filter the rows returned" where: django_session_bool_exp): [django_session!]!
  """
  fetch aggregated fields from the table: "django_session"
  """
  django_session_aggregate("distinct select on columns" distinct_on: [django_session_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [django_session_order_by!], "filter the rows returned" where: django_session_bool_exp): django_session_aggregate!
  """
  fetch data from the table: "django_session" using primary key columns
  """
  django_session_by_pk(session_key: String!): django_session
  """
  fetch data from the table: "experiment_allowedcommand"
  """
  experiment_allowedcommand("distinct select on columns" distinct_on: [experiment_allowedcommand_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_allowedcommand_order_by!], "filter the rows returned" where: experiment_allowedcommand_bool_exp): [experiment_allowedcommand!]!
  """
  fetch aggregated fields from the table: "experiment_allowedcommand"
  """
  experiment_allowedcommand_aggregate("distinct select on columns" distinct_on: [experiment_allowedcommand_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_allowedcommand_order_by!], "filter the rows returned" where: experiment_allowedcommand_bool_exp): experiment_allowedcommand_aggregate!
  """
  fetch data from the table: "experiment_allowedcommand" using primary key columns
  """
  experiment_allowedcommand_by_pk(id: Int!): experiment_allowedcommand
  """
  fetch data from the table: "experiment_experimentaction"
  """
  experiment_experimentaction("distinct select on columns" distinct_on: [experiment_experimentaction_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentaction_order_by!], "filter the rows returned" where: experiment_experimentaction_bool_exp): [experiment_experimentaction!]!
  """
  fetch aggregated fields from the table: "experiment_experimentaction"
  """
  experiment_experimentaction_aggregate("distinct select on columns" distinct_on: [experiment_experimentaction_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentaction_order_by!], "filter the rows returned" where: experiment_experimentaction_bool_exp): experiment_experimentaction_aggregate!
  """
  fetch data from the table: "experiment_experimentaction" using primary key columns
  """
  experiment_experimentaction_by_pk(id: Int!): experiment_experimentaction
  """
  fetch data from the table: "experiment_experimentcontext"
  """
  experiment_experimentcontext("distinct select on columns" distinct_on: [experiment_experimentcontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentcontext_order_by!], "filter the rows returned" where: experiment_experimentcontext_bool_exp): [experiment_experimentcontext!]!
  """
  fetch aggregated fields from the table: "experiment_experimentcontext"
  """
  experiment_experimentcontext_aggregate("distinct select on columns" distinct_on: [experiment_experimentcontext_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentcontext_order_by!], "filter the rows returned" where: experiment_experimentcontext_bool_exp): experiment_experimentcontext_aggregate!
  """
  fetch data from the table: "experiment_experimentcontext" using primary key columns
  """
  experiment_experimentcontext_by_pk(id: Int!): experiment_experimentcontext
  """
  fetch data from the table: "experiment_experimentstage"
  """
  experiment_experimentstage("distinct select on columns" distinct_on: [experiment_experimentstage_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentstage_order_by!], "filter the rows returned" where: experiment_experimentstage_bool_exp): [experiment_experimentstage!]!
  """
  fetch aggregated fields from the table: "experiment_experimentstage"
  """
  experiment_experimentstage_aggregate("distinct select on columns" distinct_on: [experiment_experimentstage_select_column!], "limit the number of rows returned" limit: Int, "skip the first n rows. Use only with order_by" offset: Int, "sort the rows by one or more columns" order_by: [experiment_experimentstage_order_by!], "filter the rows returned" where: experiment_experimentstage_bool_exp): experiment_experimentstage_aggregate!
  """
  fetch data from the table: "experiment_experimentstage" using primary key columns
  """
  experiment_experimentstage_by_pk(id: Int!): experiment_experimentstage
}
scalar timestamptz
"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
